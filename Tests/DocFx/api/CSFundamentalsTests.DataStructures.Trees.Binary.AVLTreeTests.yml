### YamlMime:ManagedReference
items:
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  commentId: T:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  id: AVLTreeTests
  parent: CSFundamentalsTests.DataStructures.Trees.Binary
  children:
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1},System.Int32)
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}})
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize
  - CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  langs:
  - csharp
  - vb
  name: AVLTreeTests
  nameWithType: AVLTreeTests
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  type: Class
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: AVLTreeTests
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 31
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests methods of <xref href=\"CSFundamentals.DataStructures.Trees.Binary.AVLTree%602\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: >-
      [TestClass]

      public class AVLTreeTests
    content.vb: >-
      <TestClass>

      Public Class AVLTreeTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize
  id: Initialize
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: AVLTreeTests.Initialize()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Initialize
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 45
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nInitializes/Resets variables before executing each unit test in this class. \n"
  example: []
  syntax:
    content: >-
      [TestInitialize]

      public void Initialize()
    content.vb: >-
      <TestInitialize>

      Public Sub Initialize
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree
  id: Build_ExpectsACorrectAVLTree
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Build_ExpectsACorrectAVLTree()
  nameWithType: AVLTreeTests.Build_ExpectsACorrectAVLTree()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Build_ExpectsACorrectAVLTree
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 55
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests the correctness of Build operation\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Build_ExpectsACorrectAVLTree()
    content.vb: >-
      <TestMethod>

      Public Sub Build_ExpectsACorrectAVLTree
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  id: Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion()
  nameWithType: AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 65
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests the correctness of insert operation.\nFor a step by step transition of the AVL tree while inserting these keys, see &quot;images\\avl-bst-insert-stepByStep.png&quot;.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion()
    content.vb: >-
      <TestMethod>

      Public Sub Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
  id: Delete_NonExistingKey_ExpectsNoAlternationToTree
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NonExistingKey_ExpectsNoAlternationToTree()
  nameWithType: AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NonExistingKey_ExpectsNoAlternationToTree
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 115
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deleting a non existing key, and expects the tree to be the same before and after the operation. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NonExistingKey_ExpectsNoAlternationToTree()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NonExistingKey_ExpectsNoAlternationToTree
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
  id: Delete_NodeWith2Children_ExpectsLineAndRotateRight
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWith2Children_ExpectsLineAndRotateRight()
  nameWithType: AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWith2Children_ExpectsLineAndRotateRight
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 129
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests delete operation on a node with 2 children, and expects right rotate to be triggered during the operation.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWith2Children_ExpectsLineAndRotateRight()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWith2Children_ExpectsLineAndRotateRight
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  id: Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion()
  nameWithType: AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 143
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deleting the root node which has 2 children. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  id: Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion()
  nameWithType: AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 157
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deleting a node with 2 children, expects simple deletion of the replacement leaf node.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  id: Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWithNoChildren_ExpectsSimpleDeletion()
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWithNoChildren_ExpectsSimpleDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 171
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of a leaf node. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWithNoChildren_ExpectsSimpleDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  id: Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWithNoChildren_ExpectsLineAndRightRotation()
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 185
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of a leaf node and expects right rotation to be triggered during the operation. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWithNoChildren_ExpectsLineAndRightRotation()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  id: Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion()
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 199
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of a leaf node\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  id: Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion()
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 213
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of the max key in the tree. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  id: Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion()
  nameWithType: AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 227
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of the min key in the tree. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  id: Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_NodeWith1Children_ExpectsReplacementWithRightChild()
  nameWithType: AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_NodeWith1Children_ExpectsReplacementWithRightChild
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 241
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests deletion of a node with only one right child. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_NodeWith1Children_ExpectsReplacementWithRightChild()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  id: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1()
  nameWithType: AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 256
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nDeletes all the keys in the tree in a random order in several sequential operations. \nFor a step by step transition of the AVL tree while deleting these keys, see &quot;images\\avl-bst-delete-stepBystep.png&quot;.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  id: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2()
  nameWithType: AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 297
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nDeletes all the keys in the tree in a random order in several sequential operations. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2()
    content.vb: >-
      <TestMethod>

      Public Sub Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  id: GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights()
  nameWithType: AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 338
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests computing height of the (sub)tree rooted at the chosen nodes.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights()
    content.vb: >-
      <TestMethod>

      Public Sub GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  id: GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues()
  nameWithType: AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 378
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests computing balance factor for nodes in the tree. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues()
    content.vb: >-
      <TestMethod>

      Public Sub GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance
  id: Balance
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: Balance()
  nameWithType: AVLTreeTests.Balance()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Balance
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 418
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nTests balance internal method. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Balance()
    content.vb: >-
      <TestMethod>

      Public Sub Balance
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1},System.Int32)
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1},System.Int32)
  id: HasAVLTreeProperties``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1},System.Int32)
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: HasAVLTreeProperties<TKey, TValue>(AVLTree<TKey, TValue>, AVLTreeNode<TKey, TValue>, Int32)
  nameWithType: AVLTreeTests.HasAVLTreeProperties<TKey, TValue>(AVLTree<TKey, TValue>, AVLTreeNode<TKey, TValue>, Int32)
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties<TKey, TValue>(CSFundamentals.DataStructures.Trees.Binary.AVLTree<TKey, TValue>, CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasAVLTreeProperties
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 433
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nChecks whether the given tree has AVL tree properties\n"
  example: []
  syntax:
    content: >-
      public bool HasAVLTreeProperties<TKey, TValue>(AVLTree<TKey, TValue> tree, AVLTreeNode<TKey, TValue> root, int expectedNodeCount)

          where TKey : IComparable<TKey>, IEquatable<TKey>
    parameters:
    - id: tree
      type: CSFundamentals.DataStructures.Trees.Binary.AVLTree{{TKey},{TValue}}
      description: An AVL tree
    - id: root
      type: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{{TKey},{TValue}}
      description: Root of the AVL tree
    - id: expectedNodeCount
      type: System.Int32
      description: 'Specifies the expected number of tree nodes in the tree. '
    typeParameters:
    - id: TKey
      description: 'Type of the keys stored in the tree. '
    - id: TValue
      description: 'Type of the values stored in the tree. '
    return:
      type: System.Boolean
      description: 'True if the tree has AVL tree properties and false otherwise. '
    content.vb: Public Function HasAVLTreeProperties(Of TKey As {IComparable(Of TKey), IEquatable(Of TKey)}, TValue)(tree As AVLTree(Of TKey, TValue), root As AVLTreeNode(Of TKey, TValue), expectedNodeCount As Integer) As Boolean
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties*
  nameWithType.vb: AVLTreeTests.HasAVLTreeProperties(Of TKey, TValue)(AVLTree(Of TKey, TValue), AVLTreeNode(Of TKey, TValue), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties(Of TKey, TValue)(CSFundamentals.DataStructures.Trees.Binary.AVLTree(Of TKey, TValue), CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode(Of TKey, TValue), System.Int32)
  name.vb: HasAVLTreeProperties(Of TKey, TValue)(AVLTree(Of TKey, TValue), AVLTreeNode(Of TKey, TValue), Int32)
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}})
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}})
  id: HasExpectedBalanceFactor``2(CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}})
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests
  langs:
  - csharp
  - vb
  name: HasExpectedBalanceFactor<TKey, TValue>(AVLTree<TKey, TValue>, List<AVLTreeNode<TKey, TValue>>)
  nameWithType: AVLTreeTests.HasExpectedBalanceFactor<TKey, TValue>(AVLTree<TKey, TValue>, List<AVLTreeNode<TKey, TValue>>)
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor<TKey, TValue>(CSFundamentals.DataStructures.Trees.Binary.AVLTree<TKey, TValue>, System.Collections.Generic.List<CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode<TKey, TValue>>)
  type: Method
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/AVLTreeTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasExpectedBalanceFactor
    path: ../DataStructures/Trees/Binary/AVLTreeTests.cs
    startLine: 451
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary
  summary: "\nChecks whether all the nodes in the AVL tree have expected balance factors between -1 and 1. \n"
  example: []
  syntax:
    content: >-
      public bool HasExpectedBalanceFactor<TKey, TValue>(AVLTree<TKey, TValue> tree, List<AVLTreeNode<TKey, TValue>> nodes)

          where TKey : IComparable<TKey>, IEquatable<TKey>
    parameters:
    - id: tree
      type: CSFundamentals.DataStructures.Trees.Binary.AVLTree{{TKey},{TValue}}
      description: An AVL tree
    - id: nodes
      type: System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{{TKey},{TValue}}}
      description: 'List of all the nodes in the tree. '
    typeParameters:
    - id: TKey
      description: 'Type of the keys stored in the tree. '
    - id: TValue
      description: 'Type of the values stored in the tree. '
    return:
      type: System.Boolean
      description: 'True if the nodes all have expected balance factors, and false otherwise. '
    content.vb: Public Function HasExpectedBalanceFactor(Of TKey As {IComparable(Of TKey), IEquatable(Of TKey)}, TValue)(tree As AVLTree(Of TKey, TValue), nodes As List(Of AVLTreeNode(Of TKey, TValue))) As Boolean
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor*
  nameWithType.vb: AVLTreeTests.HasExpectedBalanceFactor(Of TKey, TValue)(AVLTree(Of TKey, TValue), List(Of AVLTreeNode(Of TKey, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor(Of TKey, TValue)(CSFundamentals.DataStructures.Trees.Binary.AVLTree(Of TKey, TValue), System.Collections.Generic.List(Of CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode(Of TKey, TValue)))
  name.vb: HasExpectedBalanceFactor(Of TKey, TValue)(AVLTree(Of TKey, TValue), List(Of AVLTreeNode(Of TKey, TValue)))
references:
- uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
  name: AVLTree<TKey, TValue>
  nameWithType: AVLTree<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree<TKey, TValue>
  nameWithType.vb: AVLTree(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.AVLTree(Of TKey, TValue)
  name.vb: AVLTree(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
    name: AVLTree
    nameWithType: AVLTree
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
    name: AVLTree
    nameWithType: AVLTree
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.Trees.Binary
  commentId: N:CSFundamentalsTests.DataStructures.Trees.Binary
  name: CSFundamentalsTests.DataStructures.Trees.Binary
  nameWithType: CSFundamentalsTests.DataStructures.Trees.Binary
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize
  name: Initialize
  nameWithType: AVLTreeTests.Initialize
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Initialize
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree
  name: Build_ExpectsACorrectAVLTree
  nameWithType: AVLTreeTests.Build_ExpectsACorrectAVLTree
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Build_ExpectsACorrectAVLTree
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  name: Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  nameWithType: AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Insert_SeveralKeysConsecutively_ExpectsACorrectTreeAfterEachInsertion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
  name: Delete_NonExistingKey_ExpectsNoAlternationToTree
  nameWithType: AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NonExistingKey_ExpectsNoAlternationToTree
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
  name: Delete_NodeWith2Children_ExpectsLineAndRotateRight
  nameWithType: AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsLineAndRotateRight
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  name: Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  nameWithType: AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_RootNodeNodeWith2Children_ExpectsReplacementWithSuccessorAndSimpleLeafNodeDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  name: Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  nameWithType: AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith2Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafNodeDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  name: Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  name: Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsLineAndRightRotation
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  name: Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildren_ExpectsSimpleLeafDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  name: Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  nameWithType: AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWithNoChildrenAndMaxKey_ExpectsSimpleLeafDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  name: Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  nameWithType: AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithMinInSubtreeAndSimpleLeafDeletion
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  name: Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  nameWithType: AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_NodeWith1Children_ExpectsReplacementWithRightChild
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  name: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  nameWithType: AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder1
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  name: Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  nameWithType: AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Delete_MultipleKeysConsecutively_ExpectsCorrectTreeAfterEachDeletion_RandomOrder2
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  name: GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  nameWithType: AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetHeight_ForSeveralNodesInSampleTree_ExpectsCorrectHeights
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  name: GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  nameWithType: AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.GetBalanceFactor_ForSeveralNodesInSampleTree_ExpectsCorrectValues
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance
  name: Balance
  nameWithType: AVLTreeTests.Balance
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.Balance
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties
  name: HasAVLTreeProperties
  nameWithType: AVLTreeTests.HasAVLTreeProperties
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasAVLTreeProperties
- uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree{{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.AVLTree{``0,``1}
  parent: CSFundamentals.DataStructures.Trees.Binary
  definition: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
  name: AVLTree<TKey, TValue>
  nameWithType: AVLTree<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree<TKey, TValue>
  nameWithType.vb: AVLTree(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.AVLTree(Of TKey, TValue)
  name.vb: AVLTree(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
    name: AVLTree
    nameWithType: AVLTree
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
    name: AVLTree
    nameWithType: AVLTree
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTree
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}
  parent: CSFundamentals.DataStructures.Trees.Binary
  definition: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
  name: AVLTreeNode<TKey, TValue>
  nameWithType: AVLTreeNode<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode<TKey, TValue>
  nameWithType.vb: AVLTreeNode(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode(Of TKey, TValue)
  name.vb: AVLTreeNode(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.Trees.Binary
  commentId: N:CSFundamentals.DataStructures.Trees.Binary
  name: CSFundamentals.DataStructures.Trees.Binary
  nameWithType: CSFundamentals.DataStructures.Trees.Binary
  fullName: CSFundamentals.DataStructures.Trees.Binary
- uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
  name: AVLTreeNode<TKey, TValue>
  nameWithType: AVLTreeNode<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode<TKey, TValue>
  nameWithType.vb: AVLTreeNode(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode(Of TKey, TValue)
  name.vb: AVLTreeNode(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor
  name: HasExpectedBalanceFactor
  nameWithType: AVLTreeTests.HasExpectedBalanceFactor
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.AVLTreeTests.HasExpectedBalanceFactor
- uid: System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode{``0,``1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AVLTreeNode<TKey, TValue>>
  nameWithType: List<AVLTreeNode<TKey, TValue>>
  fullName: System.Collections.Generic.List<CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode<TKey, TValue>>
  nameWithType.vb: List(Of AVLTreeNode(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode(Of TKey, TValue))
  name.vb: List(Of AVLTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
    name: AVLTreeNode
    nameWithType: AVLTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
