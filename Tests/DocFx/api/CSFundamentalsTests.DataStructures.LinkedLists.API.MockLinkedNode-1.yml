### YamlMime:ManagedReference
items:
- uid: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1
  commentId: T:CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1
  id: MockLinkedNode`1
  parent: CSFundamentalsTests.DataStructures.LinkedLists.API
  children:
  - CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor(`0)
  langs:
  - csharp
  - vb
  name: MockLinkedNode<T1>
  nameWithType: MockLinkedNode<T1>
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>
  type: Class
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/API/MockLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MockLinkedNode
    path: ../DataStructures/LinkedLists/API/MockLinkedNode.cs
    startLine: 30
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists.API
  summary: "\nImplements a mock class for testing <xref href=\"CSFundamentals.DataStructures.LinkedLists.API.LinkedNode%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [TestClass]

      public class MockLinkedNode<T1> : LinkedNode<MockLinkedNode<T1>, T1> where T1 : IComparable<T1>
    typeParameters:
    - id: T1
      description: ''
    content.vb: >-
      <TestClass>

      Public Class MockLinkedNode(Of T1 As IComparable(Of T1))

          Inherits LinkedNode(Of MockLinkedNode(Of T1), T1)
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}
  inheritedMembers:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.Value
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.Next
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.IsTail
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor
    arguments: []
  nameWithType.vb: MockLinkedNode(Of T1)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1)
  name.vb: MockLinkedNode(Of T1)
- uid: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor(`0)
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1
  langs:
  - csharp
  - vb
  name: MockLinkedNode(T1)
  nameWithType: MockLinkedNode<T1>.MockLinkedNode(T1)
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>.MockLinkedNode(T1)
  type: Constructor
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/API/MockLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/API/MockLinkedNode.cs
    startLine: 37
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists.API
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public MockLinkedNode(T1 value)
    parameters:
    - id: value
      type: '{T1}'
      description: 'Value to be stored in the node. '
    content.vb: Public Sub New(value As T1)
  overload: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor*
  nameWithType.vb: MockLinkedNode(Of T1).MockLinkedNode(T1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1).MockLinkedNode(T1)
references:
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  name: LinkedNode<TNode, TValue>
  nameWithType: LinkedNode<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>
  nameWithType.vb: LinkedNode(Of TNode, TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue)
  name.vb: LinkedNode(Of TNode, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.LinkedLists.API
  commentId: N:CSFundamentalsTests.DataStructures.LinkedLists.API
  name: CSFundamentalsTests.DataStructures.LinkedLists.API
  nameWithType: CSFundamentalsTests.DataStructures.LinkedLists.API
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,`0}
  parent: CSFundamentals.DataStructures.LinkedLists.API
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  name: LinkedNode<MockLinkedNode<T1>, T1>
  nameWithType: LinkedNode<MockLinkedNode<T1>, T1>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>, T1>
  nameWithType.vb: LinkedNode(Of MockLinkedNode(Of T1), T1)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1), T1)
  name.vb: LinkedNode(Of MockLinkedNode(Of T1), T1)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1
    name: MockLinkedNode
    nameWithType: MockLinkedNode
    fullName: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1
    name: MockLinkedNode
    nameWithType: MockLinkedNode
    fullName: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.Value
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,`0}.Value
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  name: Value
  nameWithType: LinkedNode<MockLinkedNode<T1>, T1>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>, T1>.Value
  nameWithType.vb: LinkedNode(Of MockLinkedNode(Of T1), T1).Value
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1), T1).Value
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.Next
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,`0}.Next
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  name: Next
  nameWithType: LinkedNode<MockLinkedNode<T1>, T1>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>, T1>.Next
  nameWithType.vb: LinkedNode(Of MockLinkedNode(Of T1), T1).Next
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1), T1).Next
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}.IsTail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,`0}.IsTail
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1,{T1}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  name: IsTail()
  nameWithType: LinkedNode<MockLinkedNode<T1>, T1>.IsTail()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>, T1>.IsTail()
  nameWithType.vb: LinkedNode(Of MockLinkedNode(Of T1), T1).IsTail()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1), T1).IsTail()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode<MockLinkedNode<T1>, T1>.IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>, T1>.IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode(Of MockLinkedNode(Of T1), T1).IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1), T1).IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  name: Value
  nameWithType: LinkedNode<TNode, TValue>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Value
  nameWithType.vb: LinkedNode(Of TNode, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Value
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  name: Next
  nameWithType: LinkedNode<TNode, TValue>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Next
  nameWithType.vb: LinkedNode(Of TNode, TValue).Next
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Next
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  name: IsTail()
  nameWithType: LinkedNode<TNode, TValue>.IsTail()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail()
  nameWithType.vb: LinkedNode(Of TNode, TValue).IsTail()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode<TNode, TValue>.IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode(Of TNode, TValue).IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode`1.#ctor
  name: MockLinkedNode
  nameWithType: MockLinkedNode<T1>.MockLinkedNode
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode<T1>.MockLinkedNode
  nameWithType.vb: MockLinkedNode(Of T1).MockLinkedNode
  fullName.vb: CSFundamentalsTests.DataStructures.LinkedLists.API.MockLinkedNode(Of T1).MockLinkedNode
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
