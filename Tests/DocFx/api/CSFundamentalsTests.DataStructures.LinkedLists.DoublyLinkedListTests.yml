### YamlMime:ManagedReference
items:
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  commentId: T:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  id: DoublyLinkedListTests
  parent: CSFundamentalsTests.DataStructures.LinkedLists
  children:
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2
  - CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend
  langs:
  - csharp
  - vb
  name: DoublyLinkedListTests
  nameWithType: DoublyLinkedListTests
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  type: Class
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DoublyLinkedListTests
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 28
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests methods in <xref href=\"CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList%601\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: >-
      [TestClass]

      public class DoublyLinkedListTests
    content.vb: >-
      <TestClass>

      Public Class DoublyLinkedListTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  id: InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException()
  nameWithType: DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 34
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertAfter operation over an empty list. Expects an exception to be thrown. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      [ExpectedException(typeof(NotFoundException))]

      public void InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException()
    content.vb: >-
      <TestMethod>

      <ExpectedException(GetType(NotFoundException))>

      Public Sub InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: CSFundamentals.DataStructures.LinkedLists.NotFoundException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  id: InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException()
  nameWithType: DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 46
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertAfter operation over a non empty list to insert after a non existing key. Expects an exception to be thrown. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      [ExpectedException(typeof(NotFoundException))]

      public void InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException()
    content.vb: >-
      <TestMethod>

      <ExpectedException(GetType(NotFoundException))>

      Public Sub InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: CSFundamentals.DataStructures.LinkedLists.NotFoundException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1
  id: InsertAfter_Success_1
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertAfter_Success_1()
  nameWithType: DoublyLinkedListTests.InsertAfter_Success_1()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter_Success_1
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 58
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertAfter operation over a non empty list and inserting after an existing key. Expects success. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void InsertAfter_Success_1()
    content.vb: >-
      <TestMethod>

      Public Sub InsertAfter_Success_1
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2
  id: InsertAfter_Success_2
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertAfter_Success_2()
  nameWithType: DoublyLinkedListTests.InsertAfter_Success_2()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter_Success_2
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 82
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertAfter operation over a non empty list and inserting after an existing key. Expects success. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void InsertAfter_Success_2()
    content.vb: >-
      <TestMethod>

      Public Sub InsertAfter_Success_2
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  id: InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException()
  nameWithType: DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 103
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertBefore operation over an empty list and inserting after a non existing key. Expects an exception to be thrown. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      [ExpectedException(typeof(NotFoundException))]

      public void InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException()
    content.vb: >-
      <TestMethod>

      <ExpectedException(GetType(NotFoundException))>

      Public Sub InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: CSFundamentals.DataStructures.LinkedLists.NotFoundException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  id: InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException()
  nameWithType: DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 115
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertBefore operation over a non empty list and inserting after a non existing key. Expects an exception to be thrown. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      [ExpectedException(typeof(NotFoundException))]

      public void InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException()
    content.vb: >-
      <TestMethod>

      <ExpectedException(GetType(NotFoundException))>

      Public Sub InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.ExpectedExceptionAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: CSFundamentals.DataStructures.LinkedLists.NotFoundException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1
  id: InsertBefore_Success_1
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertBefore_Success_1()
  nameWithType: DoublyLinkedListTests.InsertBefore_Success_1()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore_Success_1
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 127
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertBefore operation over a non empty list and inserting after an existing key. Expects success.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void InsertBefore_Success_1()
    content.vb: >-
      <TestMethod>

      Public Sub InsertBefore_Success_1
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2
  id: InsertBefore_Success_2
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: InsertBefore_Success_2()
  nameWithType: DoublyLinkedListTests.InsertBefore_Success_2()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore_Success_2
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 151
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of InsertBefore operation over a non empty list and inserting after an existing key. Expects success.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void InsertBefore_Success_2()
    content.vb: >-
      <TestMethod>

      Public Sub InsertBefore_Success_2
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append
  id: Append
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: Append()
  nameWithType: DoublyLinkedListTests.Append()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Append
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 179
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of Append operation.\n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Append()
    content.vb: >-
      <TestMethod>

      Public Sub Append
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend
  id: Prepend
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: Prepend()
  nameWithType: DoublyLinkedListTests.Prepend()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Prepend
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 216
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of Pre-pend operation. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Prepend()
    content.vb: >-
      <TestMethod>

      Public Sub Prepend
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete
  id: Delete
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: DoublyLinkedListTests.Delete()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 253
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of Delete operation. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Delete()
    content.vb: >-
      <TestMethod>

      Public Sub Delete
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend
  commentId: M:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend
  id: Append_Prepend
  parent: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests
  langs:
  - csharp
  - vb
  name: Append_Prepend()
  nameWithType: DoublyLinkedListTests.Append_Prepend()
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend()
  type: Method
  source:
    remote:
      path: Tests/DataStructures/LinkedLists/DoublyLinkedListTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Append_Prepend
    path: ../DataStructures/LinkedLists/DoublyLinkedListTests.cs
    startLine: 292
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.LinkedLists
  summary: "\nTests the correctness of Append and Prepend operations one after each other. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Append_Prepend()
    content.vb: >-
      <TestMethod>

      Public Sub Append_Prepend
  overload: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  isExternal: true
- uid: CSFundamentalsTests.DataStructures.LinkedLists
  commentId: N:CSFundamentalsTests.DataStructures.LinkedLists
  name: CSFundamentalsTests.DataStructures.LinkedLists
  nameWithType: CSFundamentalsTests.DataStructures.LinkedLists
  fullName: CSFundamentalsTests.DataStructures.LinkedLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  name: InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  nameWithType: DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_EmptyListAndInsertAfterNotExistingValue_ThrowsException
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  name: InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  nameWithType: DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_NotEmptyListAndInsertAfterNotExistingValue_ThrowsException
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1
  name: InsertAfter_Success_1
  nameWithType: DoublyLinkedListTests.InsertAfter_Success_1
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_1
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2
  name: InsertAfter_Success_2
  nameWithType: DoublyLinkedListTests.InsertAfter_Success_2
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertAfter_Success_2
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  name: InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  nameWithType: DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_EmptyListInsertBeforeNotExistingValue_ThrowsException
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  name: InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  nameWithType: DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_NotEmptyListInsertBeforeNotExistingValue_ThrowsException
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1
  name: InsertBefore_Success_1
  nameWithType: DoublyLinkedListTests.InsertBefore_Success_1
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_1
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2
  name: InsertBefore_Success_2
  nameWithType: DoublyLinkedListTests.InsertBefore_Success_2
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.InsertBefore_Success_2
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append
  name: Append
  nameWithType: DoublyLinkedListTests.Append
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend
  name: Prepend
  nameWithType: DoublyLinkedListTests.Prepend
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Prepend
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete
  name: Delete
  nameWithType: DoublyLinkedListTests.Delete
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Delete
- uid: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend*
  commentId: Overload:CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend
  name: Append_Prepend
  nameWithType: DoublyLinkedListTests.Append_Prepend
  fullName: CSFundamentalsTests.DataStructures.LinkedLists.DoublyLinkedListTests.Append_Prepend
