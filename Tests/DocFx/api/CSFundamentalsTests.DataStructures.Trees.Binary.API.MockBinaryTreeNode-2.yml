### YamlMime:ManagedReference
items:
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  commentId: T:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  id: MockBinaryTreeNode`2
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API
  children:
  - CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor
  - CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor(`0,`1)
  - CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild
  - CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent
  - CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild
  langs:
  - csharp
  - vb
  name: MockBinaryTreeNode<TKey, TValue>
  nameWithType: MockBinaryTreeNode<TKey, TValue>
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>
  type: Class
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MockBinaryTreeNode
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 33
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nThis class is only created for testing purposes. \nTreeNode is an abstract class with generic types, and some method implementations. \nWe need to test those methods without using any child class in production code. \nTherefore this mock class is created. \n"
  example: []
  syntax:
    content: 'public class MockBinaryTreeNode<TKey, TValue> : BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>, IBinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>, IComparable<MockBinaryTreeNode<TKey, TValue>> where TKey : IComparable<TKey>'
    typeParameters:
    - id: TKey
      description: Specifies the type of the keys in a tree.
    - id: TValue
      description: Specifies type of the values in a tree.
    content.vb: >-
      Public Class MockBinaryTreeNode(Of TKey As IComparable(Of TKey), TValue)

          Inherits BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)

          Implements IBinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue), IComparable(Of MockBinaryTreeNode(Of TKey, TValue))
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  - System.IComparable{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2}
  inheritedMembers:
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsNill
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Key
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Value
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.LeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.RightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Parent
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsLeaf
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsLeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsRightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsRoot
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetUncle
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetSibling
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetGrandParent
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.FormsLine
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.FormsTriangle
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.CompareTo(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsComplete
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetChildren
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetGrandChildren
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Equals(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{{TKey},{TValue}})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue)
  name.vb: MockBinaryTreeNode(Of TKey, TValue)
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor
  id: '#ctor'
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  langs:
  - csharp
  - vb
  name: MockBinaryTreeNode()
  nameWithType: MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode()
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode()
  type: Constructor
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 38
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nParameter-less constructor. \n"
  example: []
  syntax:
    content: public MockBinaryTreeNode()
    content.vb: Public Sub New
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor*
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode()
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor(`0,`1)
  commentId: M:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor(`0,`1)
  id: '#ctor(`0,`1)'
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  langs:
  - csharp
  - vb
  name: MockBinaryTreeNode(TKey, TValue)
  nameWithType: MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode(TKey, TValue)
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode(TKey, TValue)
  type: Constructor
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 47
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nConstructor. \n"
  example: []
  syntax:
    content: public MockBinaryTreeNode(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: 'Type of the key stored in the node. '
    - id: value
      type: '{TValue}'
      description: 'Type of the value stored in the node. '
    content.vb: Public Sub New(key As TKey, value As TValue)
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor*
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode(TKey, TValue)
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild
  commentId: P:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild
  id: LeftChild
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  langs:
  - csharp
  - vb
  name: LeftChild
  nameWithType: MockBinaryTreeNode<TKey, TValue>.LeftChild
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.LeftChild
  type: Property
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LeftChild
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 54
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the left child of the current node. \n"
  example: []
  syntax:
    content: public override MockBinaryTreeNode<TKey, TValue> LeftChild { get; set; }
    parameters: []
    return:
      type: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    content.vb: Public Overrides Property LeftChild As MockBinaryTreeNode(Of TKey, TValue)
  overridden: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.LeftChild
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild*
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).LeftChild
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).LeftChild
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild
  commentId: P:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild
  id: RightChild
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  langs:
  - csharp
  - vb
  name: RightChild
  nameWithType: MockBinaryTreeNode<TKey, TValue>.RightChild
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.RightChild
  type: Property
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RightChild
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 59
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the right child of the current node. \n"
  example: []
  syntax:
    content: public override MockBinaryTreeNode<TKey, TValue> RightChild { get; set; }
    parameters: []
    return:
      type: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    content.vb: Public Overrides Property RightChild As MockBinaryTreeNode(Of TKey, TValue)
  overridden: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.RightChild
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild*
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).RightChild
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).RightChild
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent
  commentId: P:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent
  id: Parent
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: MockBinaryTreeNode<TKey, TValue>.Parent
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.Parent
  type: Property
  source:
    remote:
      path: Tests/DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Parent
    path: ../DataStructures/Trees/Binary/API/MockBinaryTreeNode.cs
    startLine: 64
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the parent of the current node. \n"
  example: []
  syntax:
    content: public override MockBinaryTreeNode<TKey, TValue> Parent { get; set; }
    parameters: []
    return:
      type: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    content.vb: Public Overrides Property Parent As MockBinaryTreeNode(Of TKey, TValue)
  overridden: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Parent
  overload: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent*
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).Parent
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).Parent
references:
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API
  commentId: N:CSFundamentalsTests.DataStructures.Trees.Binary.API
  name: CSFundamentalsTests.DataStructures.Trees.Binary.API
  nameWithType: CSFundamentalsTests.DataStructures.Trees.Binary.API
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  name: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  name.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
    name: BinaryTreeNode
    nameWithType: BinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
    name: BinaryTreeNode
    nameWithType: BinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  name: IBinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType: IBinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType.vb: IBinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  name.vb: IBinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2}
  commentId: T:System.IComparable{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2}
  parent: System
  definition: System.IComparable`1
  name: IComparable<MockBinaryTreeNode<TKey, TValue>>
  nameWithType: IComparable<MockBinaryTreeNode<TKey, TValue>>
  fullName: System.IComparable<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>>
  nameWithType.vb: IComparable(Of MockBinaryTreeNode(Of TKey, TValue))
  fullName.vb: System.IComparable(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue))
  name.vb: IComparable(Of MockBinaryTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsNill
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsNill
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.Key
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  name: Key
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Key
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Key
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.Value
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  name: Value
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Value
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Value
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.LeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.LeftChild
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).LeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.RightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.RightChild
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.Parent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  name: Parent
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Parent
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  name: IsLeaf()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsLeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  name: IsLeftChild()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeftChild()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeftChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeftChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsRightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  name: IsRightChild()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRightChild()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRightChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRightChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsRoot
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  name: IsRoot()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRoot()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetUncle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.GetUncle
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  name: GetUncle()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetUncle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetUncle()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetUncle()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetUncle()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
    name: GetUncle
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetUncle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetUncle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
    name: GetUncle
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetUncle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetUncle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.GetSibling
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  name: GetSibling()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetSibling()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetSibling()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
    name: GetSibling
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetSibling
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
    name: GetSibling
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetSibling
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetGrandParent
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.GetGrandParent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  name: GetGrandParent()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandParent()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandParent()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
    name: GetGrandParent
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandParent
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
    name: GetGrandParent
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandParent
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.FormsLine
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.FormsLine
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  name: FormsLine()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsLine()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsLine()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsLine()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsLine()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
    name: FormsLine
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsLine
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsLine
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
    name: FormsLine
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsLine
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsLine
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.FormsTriangle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.FormsTriangle
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  name: FormsTriangle()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsTriangle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsTriangle()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsTriangle()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsTriangle()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
    name: FormsTriangle
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsTriangle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.FormsTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
    name: FormsTriangle
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsTriangle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).FormsTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.CompareTo(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.CompareTo(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  name: CompareTo(MockBinaryTreeNode<TKey, TValue>)
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.CompareTo(MockBinaryTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.CompareTo(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>)
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).CompareTo(MockBinaryTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).CompareTo(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue))
  name.vb: CompareTo(MockBinaryTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.IsComplete
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.IsComplete
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  name: IsComplete()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsComplete()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsComplete()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsComplete()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsComplete()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
    name: IsComplete
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsComplete
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.IsComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
    name: IsComplete
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsComplete
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).IsComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.GetChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  name: GetChildren()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetChildren()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.GetGrandChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.GetGrandChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  name: GetGrandChildren()
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandChildren()
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
    name: GetGrandChildren
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.GetGrandChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
    name: GetGrandChildren
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).GetGrandChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}.Equals(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,`0,`1}.Equals(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode{CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  name: Equals(MockBinaryTreeNode<TKey, TValue>)
  nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Equals(MockBinaryTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Equals(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>)
  nameWithType.vb: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Equals(MockBinaryTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Equals(CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue))
  name.vb: Equals(MockBinaryTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
    name: Equals
    nameWithType: BinaryTreeNode<MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Equals
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>, TKey, TValue>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
    name: Equals
    nameWithType: BinaryTreeNode(Of MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Equals
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue), TKey, TValue).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  name: BinaryTreeNode<TNode, TKey, TValue>
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: BinaryTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
    name: BinaryTreeNode
    nameWithType: BinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
    name: BinaryTreeNode
    nameWithType: BinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Binary.API
  name: CSFundamentals.DataStructures.Trees.Binary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Binary.API
  fullName: CSFundamentals.DataStructures.Trees.Binary.API
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  name: IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsNill
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  name: Key
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Key
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  name: Value
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Value
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.RightChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  name: Parent
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Parent
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  name: IsLeaf()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeaf()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  name: IsLeftChild()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  name: IsRightChild()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  name: IsRoot()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRoot()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  name: GetUncle()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetUncle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetUncle()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetUncle()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetUncle()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
    name: GetUncle
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetUncle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetUncle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
    name: GetUncle
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).GetUncle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetUncle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  name: GetSibling()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetSibling()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetSibling()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
    name: GetSibling
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetSibling
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
    name: GetSibling
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).GetSibling
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  name: GetGrandParent()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
    name: GetGrandParent
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
    name: GetGrandParent
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  name: FormsLine()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsLine()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsLine()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsLine()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsLine()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
    name: FormsLine
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsLine
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsLine
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
    name: FormsLine
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).FormsLine
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsLine
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  name: FormsTriangle()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
    name: FormsTriangle
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
    name: FormsTriangle
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.CompareTo(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.CompareTo(TNode)
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).CompareTo(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).CompareTo(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  name: IsComplete()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsComplete()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsComplete()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsComplete()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsComplete()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
    name: IsComplete
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsComplete
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
    name: IsComplete
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).IsComplete
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsComplete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  name: GetChildren()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  name: GetGrandChildren()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren()
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
    name: GetGrandChildren
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
    name: GetGrandChildren
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  name: Equals(TNode)
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Equals(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Equals(TNode)
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Equals(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Equals(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
    name: Equals
    nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Equals
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
    name: Equals
    nameWithType: BinaryTreeNode(Of TNode, TKey, TValue).Equals
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.#ctor
  name: MockBinaryTreeNode
  nameWithType: MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.MockBinaryTreeNode
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).MockBinaryTreeNode
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.LeftChild
  name: LeftChild
  nameWithType: MockBinaryTreeNode<TKey, TValue>.LeftChild
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.LeftChild
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).LeftChild
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).LeftChild
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  commentId: T:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
  parent: CSFundamentalsTests.DataStructures.Trees.Binary.API
  name: MockBinaryTreeNode<TKey, TValue>
  nameWithType: MockBinaryTreeNode<TKey, TValue>
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue)
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue)
  name.vb: MockBinaryTreeNode(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2
    name: MockBinaryTreeNode
    nameWithType: MockBinaryTreeNode
    fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.RightChild
  name: RightChild
  nameWithType: MockBinaryTreeNode<TKey, TValue>.RightChild
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.RightChild
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).RightChild
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).RightChild
- uid: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent*
  commentId: Overload:CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode`2.Parent
  name: Parent
  nameWithType: MockBinaryTreeNode<TKey, TValue>.Parent
  fullName: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode<TKey, TValue>.Parent
  nameWithType.vb: MockBinaryTreeNode(Of TKey, TValue).Parent
  fullName.vb: CSFundamentalsTests.DataStructures.Trees.Binary.API.MockBinaryTreeNode(Of TKey, TValue).Parent
