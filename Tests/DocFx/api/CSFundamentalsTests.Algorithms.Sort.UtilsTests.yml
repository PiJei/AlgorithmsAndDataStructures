### YamlMime:ManagedReference
items:
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  commentId: T:CSFundamentalsTests.Algorithms.Sort.UtilsTests
  id: UtilsTests
  parent: CSFundamentalsTests.Algorithms.Sort
  children:
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly(System.Collections.Generic.List{System.Int32})
  - CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap
  langs:
  - csharp
  - vb
  name: UtilsTests
  nameWithType: UtilsTests
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  type: Class
  source:
    remote:
      path: Tests/Algorithms/Sort/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: UtilsTests
    path: ../Algorithms/Sort/UtilsTests.cs
    startLine: 31
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests methods in <xref href=\"CSFundamentals.Algorithms.Sort.Utils\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: >-
      [TestClass]

      public class UtilsTests
    content.vb: >-
      <TestClass>

      Public Class UtilsTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert
  id: Convert
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: Convert()
  nameWithType: UtilsTests.Convert()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Convert
    path: ../Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
    startLine: 36
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of converting a list of integers to a list of Elements. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Convert()
    content.vb: >-
      <TestMethod>

      Public Sub Convert
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable
  id: IsMapStable
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: IsMapStable()
  nameWithType: UtilsTests.IsMapStable()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsMapStable
    path: ../Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
    startLine: 53
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of checking whether a dictionary is stable. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void IsMapStable()
    content.vb: >-
      <TestMethod>

      Public Sub IsMapStable
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes
  id: HashListToIndexes
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: HashListToIndexes()
  nameWithType: UtilsTests.HashListToIndexes()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HashListToIndexes
    path: ../Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
    startLine: 78
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of hashing a list to indexes. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void HashListToIndexes()
    content.vb: >-
      <TestMethod>

      Public Sub HashListToIndexes
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap
  id: Swap
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: Swap()
  nameWithType: UtilsTests.Swap()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Swap
    path: ../Algorithms/Sort/StabilityCheckableVersions/UtilsTests.cs
    startLine: 113
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of swap operation. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void Swap()
    content.vb: >-
      <TestMethod>

      Public Sub Swap
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly(System.Collections.Generic.List{System.Int32})
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly(System.Collections.Generic.List{System.Int32})
  id: IsSortedAscendingly(System.Collections.Generic.List{System.Int32})
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: IsSortedAscendingly(List<Int32>)
  nameWithType: UtilsTests.IsSortedAscendingly(List<Int32>)
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly(System.Collections.Generic.List<System.Int32>)
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsSortedAscendingly
    path: ../Algorithms/Sort/UtilsTests.cs
    startLine: 36
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nChecks whether the given integer list is sorted in ascending order. \n"
  example: []
  syntax:
    content: public static bool IsSortedAscendingly(List<int> values)
    parameters:
    - id: values
      type: System.Collections.Generic.List{System.Int32}
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsSortedAscendingly(values As List(Of Integer)) As Boolean
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly*
  nameWithType.vb: UtilsTests.IsSortedAscendingly(List(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly(System.Collections.Generic.List(Of System.Int32))
  name.vb: IsSortedAscendingly(List(Of Int32))
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount
  id: GetDigitsCount
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: GetDigitsCount()
  nameWithType: UtilsTests.GetDigitsCount()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetDigitsCount
    path: ../Algorithms/Sort/UtilsTests.cs
    startLine: 48
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of computing number of digits in an integer. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void GetDigitsCount()
    content.vb: >-
      <TestMethod>

      Public Sub GetDigitsCount
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight
  commentId: M:CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight
  id: GetNthDigitFromRight
  parent: CSFundamentalsTests.Algorithms.Sort.UtilsTests
  langs:
  - csharp
  - vb
  name: GetNthDigitFromRight()
  nameWithType: UtilsTests.GetNthDigitFromRight()
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight()
  type: Method
  source:
    remote:
      path: Tests/Algorithms/Sort/UtilsTests.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetNthDigitFromRight
    path: ../Algorithms/Sort/UtilsTests.cs
    startLine: 62
  assemblies:
  - CSFundamentalsTests
  namespace: CSFundamentalsTests.Algorithms.Sort
  summary: "\nTests the correctness of computing the n(th) digit of a number from right. \n"
  example: []
  syntax:
    content: >-
      [TestMethod]

      public void GetNthDigitFromRight()
    content.vb: >-
      <TestMethod>

      Public Sub GetNthDigitFromRight
  overload: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight*
  attributes:
  - type: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute
    ctor: Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CSFundamentals.Algorithms.Sort.Utils
  commentId: T:CSFundamentals.Algorithms.Sort.Utils
  isExternal: true
- uid: CSFundamentalsTests.Algorithms.Sort
  commentId: N:CSFundamentalsTests.Algorithms.Sort
  name: CSFundamentalsTests.Algorithms.Sort
  nameWithType: CSFundamentalsTests.Algorithms.Sort
  fullName: CSFundamentalsTests.Algorithms.Sort
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert
  name: Convert
  nameWithType: UtilsTests.Convert
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Convert
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable
  name: IsMapStable
  nameWithType: UtilsTests.IsMapStable
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsMapStable
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes
  name: HashListToIndexes
  nameWithType: UtilsTests.HashListToIndexes
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.HashListToIndexes
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap
  name: Swap
  nameWithType: UtilsTests.Swap
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.Swap
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly
  name: IsSortedAscendingly
  nameWithType: UtilsTests.IsSortedAscendingly
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.IsSortedAscendingly
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount
  name: GetDigitsCount
  nameWithType: UtilsTests.GetDigitsCount
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetDigitsCount
- uid: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight*
  commentId: Overload:CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight
  name: GetNthDigitFromRight
  nameWithType: UtilsTests.GetNthDigitFromRight
  fullName: CSFundamentalsTests.Algorithms.Sort.UtilsTests.GetNthDigitFromRight
