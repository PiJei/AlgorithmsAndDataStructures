### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  id: BTreeNodeBase`3
  parent: CSFundamentals.DataStructures.Trees.Nary.API
  children:
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`1,`2})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}},System.Collections.Generic.List{`0})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  langs:
  - csharp
  - vb
  name: BTreeNodeBase<TNode, TKey, TValue>
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BTreeNodeBase
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 32
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nImplements a base B-Tree node. \n"
  example: []
  syntax:
    content: >-
      public abstract class BTreeNodeBase<TNode, TKey, TValue> : IBTreeNode<TNode, TKey, TValue>, IComparable<TNode> where TNode : IBTreeNode<TNode, TKey, TValue>, new()

          where TKey : IComparable<TKey>
    typeParameters:
    - id: TNode
      description: Type of B-Tree node.
    - id: TKey
      description: 'Type of the key stored in the B-Tree node. '
    - id: TValue
      description: 'Type of the value stored in the B-Tree node. '
    content.vb: >-
      Public MustInherit Class BTreeNodeBase(Of TNode As {IBTreeNode(Of TNode, TKey, TValue), New}, TKey As IComparable(Of TKey), TValue)

          Implements IBTreeNode(Of TNode, TKey, TValue), IComparable(Of TNode)
  inheritance:
  - System.Object
  derivedClasses:
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  - CSFundamentals.DataStructures.Trees.Nary.BTreeNode`2
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  - System.IComparable{{TNode}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)
  name.vb: BTreeNodeBase(Of TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  id: _keyValues
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: _keyValues
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._keyValues
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._keyValues
  type: Field
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: _keyValues
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 42
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nA list of key-value pairs stored in this node. \nNotice that SortedList does not allow duplicates. \n"
  example: []
  syntax:
    content: protected SortedList<TKey, TValue> _keyValues
    return:
      type: System.Collections.Generic.SortedList{{TKey},{TValue}}
    content.vb: Protected _keyValues As SortedList(Of TKey, TValue)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  id: _children
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: _children
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._children
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._children
  type: Field
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: _children
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 51
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChildren of the current node. \nContract: Keys of the child at index i are all smaller than key at index i of _keyValues\nContract: Keys of the child at index i are all greater than key at index i-1 of _keyValues\nIn otherWords for key at index i, left children are at index i of _children\nAnd right children are at index i+1 of _children. \n"
  example: []
  syntax:
    content: protected SortedList<TNode, bool> _children
    return:
      type: System.Collections.Generic.SortedList{{TNode},System.Boolean}
    content.vb: Protected _children As SortedList(Of TNode, Boolean)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._children
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._children
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  id: _parent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: _parent
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._parent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._parent
  type: Field
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: _parent
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 56
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the parent of the current node.\n"
  example: []
  syntax:
    content: protected TNode _parent
    return:
      type: '{TNode}'
    content.vb: Protected _parent As TNode
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._parent
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._parent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  id: MinKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: MinKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MinKeys
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 61
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the minimum number of keys in a B-tree internal/leaf node. (Notice that a root has no lower bound on the number of keys. Intuitively when the tree is just being built it might start with 1, and grow afterwards.)\n"
  example: []
  syntax:
    content: public int MinKeys { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MinKeys As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MinKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  id: MaxKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: MaxKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxKeys
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 66
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the maximum number of keys in a B-tree internal/leaf/root node. This is often 2 times the MinKeys.\n"
  example: []
  syntax:
    content: public int MaxKeys { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MaxKeys As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MaxKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  id: MinBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: MinBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MinBranchingDegree
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 71
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the minimum number of branches/children a B-tree internal node can have. \n"
  example: []
  syntax:
    content: public int MinBranchingDegree { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property MinBranchingDegree As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MinBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  id: MaxBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: MaxBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxBranchingDegree
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 76
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the maximum number of branches/children a B-tree internal or root node can have. Leaf nodes contain 0 children. \n"
  example: []
  syntax:
    content: public int MaxBranchingDegree { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property MaxBranchingDegree As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MaxBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: BTreeNodeBase()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 81
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nParameter-less constructor.\n"
  example: []
  syntax:
    content: public BTreeNodeBase()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: BTreeNodeBase(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(System.Int32)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 91
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public BTreeNodeBase(int maxBranchingDegree)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Maximum branching factor or the maximum number of children the node can have. '
    content.vb: Public Sub New(maxBranchingDegree As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`1,`2})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`1,`2})
  id: '#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`1,`2})'
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: BTreeNodeBase(Int32, KeyValuePair<TKey, TValue>)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(Int32, KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(System.Int32, System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 101
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nCreates a node with 1 key. \n"
  example: []
  syntax:
    content: public BTreeNodeBase(int maxBranchingDegree, KeyValuePair<TKey, TValue> keyValue)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Is the maximum number of children the node can have. '
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'Is a key-value pair to be inserted in the tree. '
    content.vb: Public Sub New(maxBranchingDegree As Integer, keyValue As KeyValuePair(Of TKey, TValue))
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(Int32, KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(System.Int32, System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: BTreeNodeBase(Int32, KeyValuePair(Of TKey, TValue))
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}},System.Collections.Generic.List{`0})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}},System.Collections.Generic.List{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}},System.Collections.Generic.List{`0})'
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: BTreeNodeBase(Int32, List<KeyValuePair<TKey, TValue>>, List<TNode>)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(Int32, List<KeyValuePair<TKey, TValue>>, List<TNode>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase(System.Int32, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.List<TNode>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 112
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nCreates a node with a set of keys and children.\n"
  example: []
  syntax:
    content: public BTreeNodeBase(int maxBranchingDegree, List<KeyValuePair<TKey, TValue>> keyValues, List<TNode> children)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Is the maximum number of children the node can have. '
    - id: keyValues
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: 'Is a set of key-value pairs to be inserted in the new node. '
    - id: children
      type: System.Collections.Generic.List{{TNode}}
      description: 'Is a set of children of the node. Expectancy is that the count of children is one bigger than the count of key-value pairs in the node. '
    content.vb: Public Sub New(maxBranchingDegree As Integer, keyValues As List(Of KeyValuePair(Of TKey, TValue)), children As List(Of TNode))
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(Int32, List(Of KeyValuePair(Of TKey, TValue)), List(Of TNode))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase(System.Int32, System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.List(Of TNode))
  name.vb: BTreeNodeBase(Int32, List(Of KeyValuePair(Of TKey, TValue)), List(Of TNode))
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  id: KeyCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: KeyCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: KeyCount
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 127
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the count of key-value pairs in the node. \n"
  example: []
  syntax:
    content: public int KeyCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property KeyCount As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.KeyCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  id: ChildrenCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: ChildrenCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: ChildrenCount
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 138
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the count of the children of the node. \n"
  example: []
  syntax:
    content: public int ChildrenCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ChildrenCount As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.ChildrenCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  id: Clear
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Clear
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 149
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves all the keys from the node. \n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.Clear
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Clear()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Clear()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  id: GetKeyValues
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetKeyValues()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKeyValues
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 159
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nReturns the list of key-value pairs stored in this node. \n"
  example: []
  syntax:
    content: public List<KeyValuePair<TKey, TValue>> GetKeyValues()
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: ''
    content.vb: Public Function GetKeyValues As List(Of KeyValuePair(Of TKey, TValue))
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  id: IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsLeaf()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsLeaf()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeaf
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 168
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node is leaf. A node is leaf if it has no children. \n"
  example: []
  syntax:
    content: public bool IsLeaf()
    return:
      type: System.Boolean
      description: 'True if the current node is leaf, and false otherwise. '
    content.vb: Public Function IsLeaf As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsLeaf
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  id: IsRoot
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsRoot()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsRoot()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRoot
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 177
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node is root. A node is root if it has no parent.\n"
  example: []
  syntax:
    content: public bool IsRoot()
    return:
      type: System.Boolean
      description: True if the current node is root, and false otherwise.
    content.vb: Public Function IsRoot As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsRoot
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsRoot()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsRoot()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  id: IsFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsFull
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 186
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nDetects whether the node is full. A node is full, if it has MaxKeys keys. \n"
  example: []
  syntax:
    content: public bool IsFull()
    return:
      type: System.Boolean
      description: 'Truce if the node is full, and false otherwise. '
    content.vb: Public Function IsFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsFull()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  id: IsOverFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsOverFlown()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsOverFlown
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 195
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the node is overflown. A node is overflown, if its key count exceeds MaxKeys. \n"
  example: []
  syntax:
    content: public bool IsOverFlown()
    return:
      type: System.Boolean
      description: 'True if the node is overflown, and false otherwise. '
    content.vb: Public Function IsOverFlown As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsOverFlown
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  id: IsUnderFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsUnderFlown()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsUnderFlown
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 204
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the node is UnderFlown. A node is UnderFlown, if its key count falls lower than MinKeys.\n"
  example: []
  syntax:
    content: public bool IsUnderFlown()
    return:
      type: System.Boolean
      description: 'Truce if the node is UnderFlown, and false otherwise. '
    content.vb: Public Function IsUnderFlown As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsUnderFlown
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  id: IsMinFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsMinFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsMinFull
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 213
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether a node is MinFull: meaning it has exactly MinKeys key-value pairs. \n"
  example: []
  syntax:
    content: public bool IsMinFull()
    return:
      type: System.Boolean
      description: 'True if case is MinFull, false otherwise. '
    content.vb: Public Function IsMinFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsMinFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  id: IsMinOneFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsMinOneFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsMinOneFull
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 222
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether a node is MinOneFull: meaning it has exactly MinKeys+1 key-value pairs. \n"
  example: []
  syntax:
    content: public bool IsMinOneFull()
    return:
      type: System.Boolean
      description: 'True if it is MinOneFull, false otherwise. '
    content.vb: Public Function IsMinOneFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsMinOneFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  id: IsEmpty
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: IsEmpty()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsEmpty()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsEmpty
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 231
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether a node is empty: meaning has no key-value pairs. \n"
  example: []
  syntax:
    content: public bool IsEmpty()
    return:
      type: System.Boolean
      description: 'True if the node is free, and false otherwise. '
    content.vb: Public Function IsEmpty As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsEmpty
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  id: GetIndexAtParentChildren
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetIndexAtParentChildren()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetIndexAtParentChildren
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 240
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the index of the current node in its parent&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> list.\n"
  example: []
  syntax:
    content: public abstract int GetIndexAtParentChildren()
    return:
      type: System.Int32
      description: Index at parent&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children" data-throw-if-not-resolved="false"></xref> list.
    content.vb: Public MustOverride Function GetIndexAtParentChildren As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetIndexAtParentChildren
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  id: InsertChild(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: InsertChild(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertChild(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertChild
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 246
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nInserts a child in <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public abstract void InsertChild(TNode child)
    parameters:
    - id: child
      type: '{TNode}'
      description: 'the new child to be inserted in <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children" data-throw-if-not-resolved="false"></xref> array. '
    content.vb: Public MustOverride Sub InsertChild(child As TNode)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.InsertChild({TNode})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertChild(TNode)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertChild(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  id: HasLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: HasLeftSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasLeftSibling
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 252
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has a left sibling (a sibling to its left in the parent). \n"
  example: []
  syntax:
    content: public bool HasLeftSibling()
    return:
      type: System.Boolean
      description: 'True if the node has a left sibling, and false otherwise. '
    content.vb: Public Function HasLeftSibling As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.HasLeftSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  id: HasRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: HasRightSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasRightSibling
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 264
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has a right sibling (a sibling to its right in the parent).\n"
  example: []
  syntax:
    content: public bool HasRightSibling()
    return:
      type: System.Boolean
      description: 'True if the node has a right sibling, and false otherwise. '
    content.vb: Public Function HasRightSibling As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.HasRightSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  id: GetLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetLeftSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetLeftSibling
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 276
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the node&apos;s left sibling node. \n"
  example: []
  syntax:
    content: public TNode GetLeftSibling()
    return:
      type: '{TNode}'
      description: 'Node&apos;s left sibling node if it exists, and null otherwise. '
    content.vb: Public Function GetLeftSibling As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  id: GetRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetRightSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetRightSibling
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 291
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the node&apos;s right sibling node. \n"
  example: []
  syntax:
    content: public TNode GetRightSibling()
    return:
      type: '{TNode}'
      description: 'Node&apos;s right sibling node if it exists and null otherwise. '
    content.vb: Public Function GetRightSibling As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  id: GetMaxKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetMaxKey()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetMaxKey
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 306
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the key-value pair of the maximum key in the node.\n"
  example: []
  syntax:
    content: public KeyValuePair<TKey, TValue> GetMaxKey()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'Key-value pair of the maximum key in this node. '
    content.vb: Public Function GetMaxKey As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetMaxKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  id: GetMinKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetMinKey()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMinKey()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetMinKey
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 315
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the key-value pair of the minimum key in the node. \n"
  example: []
  syntax:
    content: public KeyValuePair<TKey, TValue> GetMinKey()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'Key-value pair of the minimum key in this node. '
    content.vb: Public Function GetMinKey As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetMinKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  id: RemoveKey(`1)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: RemoveKey(TKey)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKey(TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveKey
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 324
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves key <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> from the node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array. \n"
  example: []
  syntax:
    content: public void RemoveKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: Is the key to be removed.
    content.vb: Public Sub RemoveKey(key As TKey)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveKey({TKey})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey(TKey)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  id: RemoveKeyByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: RemoveKeyByIndex(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveKeyByIndex
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 340
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves key at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> from the node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array. \n"
  example: []
  syntax:
    content: public void RemoveKeyByIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'The index of the key to be removed from the node. '
    content.vb: Public Sub RemoveKeyByIndex(index As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveKeyByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  id: RemoveChildByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: RemoveChildByIndex(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveChildByIndex
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 356
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves child at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> from the node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public void RemoveChildByIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'The child index. '
    content.vb: Public Sub RemoveChildByIndex(index As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveChildByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  id: RemoveChild(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: RemoveChild(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChild(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveChild
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 372
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves child <code data-dev-comment-type=\"paramref\" class=\"paramref\">child</code> from the node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public void RemoveChild(TNode child)
    parameters:
    - id: child
      type: '{TNode}'
      description: 'Child to be removed. '
    content.vb: Public Sub RemoveChild(child As TNode)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  id: GetKeyValue(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetKeyValue(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKeyValue
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 389
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets (reads) the key-value pair at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> of node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array. \n"
  example: []
  syntax:
    content: public KeyValuePair<TKey, TValue> GetKeyValue(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'The index of the key-value pair wanted. '
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'Key-value pair located at index <code data-dev-comment-type="paramref" class="paramref">index</code> of node&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues" data-throw-if-not-resolved="false"></xref> array. '
    content.vb: Public Function GetKeyValue(index As Integer) As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetKeyValue(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetKey(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKey(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKey
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 399
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets (reads)the key of the key-value pair at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> of node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public TKey GetKey(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'The index of the key-value pair whose key is wanted. '
    return:
      type: '{TKey}'
      description: 'Key at index <code data-dev-comment-type="paramref" class="paramref">index</code> of node&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues" data-throw-if-not-resolved="false"></xref> array. '
    content.vb: Public Function GetKey(index As Integer) As TKey
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetKey(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKey(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKey(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  id: GetKeyIndex(`1)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetKeyIndex(TKey)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex(TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKeyIndex
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 409
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the index of the key <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> at node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array. \n"
  example: []
  syntax:
    content: public int GetKeyIndex(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to search for and return its index.
    return:
      type: System.Int32
      description: 'Index of the key <code data-dev-comment-type="paramref" class="paramref">key</code> at node&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues" data-throw-if-not-resolved="false"></xref> array. '
    content.vb: Public Function GetKeyIndex(key As TKey) As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex(TKey)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  id: GetChild(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetChild(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChild(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChild
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 419
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets (reads) the child at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> of node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> array.\n"
  example: []
  syntax:
    content: public TNode GetChild(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'The index of the child node wanted. '
    return:
      type: '{TNode}'
      description: Child node at index <code data-dev-comment-type="paramref" class="paramref">index</code> of node&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children" data-throw-if-not-resolved="false"></xref> array.
    content.vb: Public Function GetChild(index As Integer) As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetChild(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChild(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChild(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  id: GetChildIndex(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetChildIndex(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChildIndex
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 429
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nLooks for <code data-dev-comment-type=\"paramref\" class=\"paramref\">child</code> in node&apos;s <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children\" data-throw-if-not-resolved=\"false\"></xref> array, and returns its index.\n"
  example: []
  syntax:
    content: public int GetChildIndex(TNode child)
    parameters:
    - id: child
      type: '{TNode}'
      description: 'Child whose index is wanted. '
    return:
      type: System.Int32
      description: Index of <code data-dev-comment-type="paramref" class="paramref">child</code> in node&apos;s <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._children" data-throw-if-not-resolved="false"></xref> array
    content.vb: Public Function GetChildIndex(child As TNode) As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetChildIndex({TNode})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  id: InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertKeyValue
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 438
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nInserts the given key-value pair in <xref href=\"CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues\" data-throw-if-not-resolved=\"false\"></xref> array. \n"
  example: []
  syntax:
    content: public void InsertKeyValue(KeyValuePair<TKey, TValue> keyVal)
    parameters:
    - id: keyVal
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'the new key-value pair to be inserted in <xref href="CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase%603._keyValues" data-throw-if-not-resolved="false"></xref> array. '
    content.vb: Public Sub InsertKeyValue(keyVal As KeyValuePair(Of TKey, TValue))
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.InsertKeyValue(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  id: SetParent(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: SetParent(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.SetParent(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.SetParent(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: SetParent
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 451
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nSets the parent node of the current node. \n"
  example: []
  syntax:
    content: public void SetParent(TNode parent)
    parameters:
    - id: parent
      type: '{TNode}'
      description: 'Parent node of the current node. '
    content.vb: Public Sub SetParent(parent As TNode)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.SetParent({TNode})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).SetParent(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).SetParent(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  id: GetParent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: GetParent()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetParent()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetParent
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 460
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the parent node of the current node. \n"
  example: []
  syntax:
    content: public TNode GetParent()
    return:
      type: '{TNode}'
      description: 'Parent node of the current node. '
    content.vb: Public Function GetParent As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent*
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetParent
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetParent()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetParent()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  id: Split
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: Split()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Split()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Split()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Split
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 469
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nSplits this node to 2 nodes if it is overflown, such that each node has at least MinKeys keys.\n"
  example: []
  syntax:
    content: public TNode Split()
    return:
      type: '{TNode}'
      description: 'The new node. '
    content.vb: Public Function Split As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Split()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Split()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  id: KeyValueToMoveUp
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: KeyValueToMoveUp()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: KeyValueToMoveUp
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 512
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nWhen a node is being split into two nodes, gets the key that shall be moved to the parent of this node.\nThis operation is expected to only be called upon a node that is full. Yet to prevent issues, first checks for the key count. \n"
  example: []
  syntax:
    content: public KeyValuePair<TKey, TValue> KeyValueToMoveUp()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'The key at the middle of the key-value pairs that shall be moved to the parent. '
    content.vb: Public Function KeyValueToMoveUp As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp*
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  id: CompareTo(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  langs:
  - csharp
  - vb
  name: CompareTo(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.CompareTo(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.CompareTo(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/BTreeNodeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: CompareTo
    path: ../DataStructures/Trees/Nary/API/BTreeNodeBase.cs
    startLine: 527
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nCompares current node to another node. \n"
  example: []
  syntax:
    content: public int CompareTo(TNode other)
    parameters:
    - id: other
      type: '{TNode}'
      description: 'A tree node. '
    return:
      type: System.Int32
      description: '0 if they are equal, 1 if the current node is bigger and -1 otherwise. '
    content.vb: Public Function CompareTo(other As TNode) As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo*
  implements:
  - System.IComparable{{TNode}}.CompareTo({TNode})
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).CompareTo(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).CompareTo(TNode)
references:
- uid: CSFundamentals.DataStructures.Trees.Nary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Nary.API
  name: CSFundamentals.DataStructures.Trees.Nary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Nary.API
  fullName: CSFundamentals.DataStructures.Trees.Nary.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}
  parent: CSFundamentals.DataStructures.Trees.Nary.API
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  name: IBTreeNode<TNode, TKey, TValue>
  nameWithType: IBTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue)
  name.vb: IBTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{TNode}}
  commentId: T:System.IComparable{`0}
  parent: System
  definition: System.IComparable`1
  name: IComparable<TNode>
  nameWithType: IComparable<TNode>
  fullName: System.IComparable<TNode>
  nameWithType.vb: IComparable(Of TNode)
  fullName.vb: System.IComparable(Of TNode)
  name.vb: IComparable(Of TNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  name: IBTreeNode<TNode, TKey, TValue>
  nameWithType: IBTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue)
  name.vb: IBTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedList{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.SortedList{`1,`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedList`2
  name: SortedList<TKey, TValue>
  nameWithType: SortedList<TKey, TValue>
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  nameWithType.vb: SortedList(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  name.vb: SortedList(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.SortedList`2
  commentId: T:System.Collections.Generic.SortedList`2
  isExternal: true
  name: SortedList<TKey, TValue>
  nameWithType: SortedList<TKey, TValue>
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  nameWithType.vb: SortedList(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  name.vb: SortedList(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.SortedList{{TNode},System.Boolean}
  commentId: T:System.Collections.Generic.SortedList{`0,System.Boolean}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.SortedList`2
  name: SortedList<TNode, Boolean>
  nameWithType: SortedList<TNode, Boolean>
  fullName: System.Collections.Generic.SortedList<TNode, System.Boolean>
  nameWithType.vb: SortedList(Of TNode, Boolean)
  fullName.vb: System.Collections.Generic.SortedList(Of TNode, System.Boolean)
  name.vb: SortedList(Of TNode, Boolean)
  spec.csharp:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedList`2
    name: SortedList
    nameWithType: SortedList
    fullName: System.Collections.Generic.SortedList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  name: MinKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.MinKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  name: MinKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinKeys
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  name: MinKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  name: MaxKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.MaxKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  name: MaxKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  name: MaxKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.MinBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.MaxBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.#ctor
  name: BTreeNodeBase
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.BTreeNodeBase
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).BTreeNodeBase
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<TKey, TValue>>
  nameWithType: List<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: List(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: List(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TNode}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TNode>
  nameWithType: List<TNode>
  fullName: System.Collections.Generic.List<TNode>
  nameWithType.vb: List(Of TNode)
  fullName.vb: System.Collections.Generic.List(Of TNode)
  name.vb: List(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  name: KeyCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.KeyCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  name: KeyCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.KeyCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  name: KeyCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.KeyCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  name: ChildrenCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.ChildrenCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  name: ChildrenCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  name: ChildrenCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  name: Clear
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Clear
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Clear
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Clear
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Clear
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.Clear
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  name: Clear()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).Clear()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
    name: Clear
    nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
    name: Clear
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  name: Clear()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).Clear()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
    name: Clear
    nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
    name: Clear
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  name: GetKeyValues
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  name: IsLeaf
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsLeaf
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  name: IsLeaf()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  name: IsLeaf()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
    name: IsLeaf
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  name: IsRoot
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsRoot
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsRoot
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsRoot
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsRoot
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsRoot
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  name: IsRoot()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  name: IsRoot()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
    name: IsRoot
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  name: IsFull
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  name: IsFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
    name: IsFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
    name: IsFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  name: IsFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
    name: IsFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
    name: IsFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  name: IsOverFlown
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsOverFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  name: IsOverFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
    name: IsOverFlown
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
    name: IsOverFlown
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  name: IsOverFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
    name: IsOverFlown
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
    name: IsOverFlown
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  name: IsUnderFlown
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsUnderFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  name: IsUnderFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  name: IsUnderFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  name: IsMinFull
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsMinFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  name: IsMinFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
    name: IsMinFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
    name: IsMinFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  name: IsMinFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
    name: IsMinFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
    name: IsMinFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  name: IsMinOneFull
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsMinOneFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  name: IsMinOneFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  name: IsMinOneFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  name: IsEmpty
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsEmpty
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsEmpty
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.IsEmpty
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  name: IsEmpty()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
    name: IsEmpty
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
    name: IsEmpty
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  name: IsEmpty()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
    name: IsEmpty
    nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
    name: IsEmpty
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  name: _children
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._children
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._children
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._children
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._children
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetIndexAtParentChildren
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild
  name: InsertChild
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertChild
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertChild
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.InsertChild({TNode})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.InsertChild(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  name: InsertChild(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
    name: InsertChild
    nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
    name: InsertChild
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  name: InsertChild(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
    name: InsertChild
    nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
    name: InsertChild
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  name: HasLeftSibling
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.HasLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  name: HasLeftSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  name: HasLeftSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  name: HasRightSibling
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.HasRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  name: HasRightSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
    name: HasRightSibling
    nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
    name: HasRightSibling
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  name: HasRightSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
    name: HasRightSibling
    nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
    name: HasRightSibling
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  name: GetLeftSibling
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  name: GetRightSibling
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  name: GetMaxKey
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetMaxKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  name: GetMaxKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
    name: GetMaxKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
    name: GetMaxKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  name: GetMaxKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
    name: GetMaxKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
    name: GetMaxKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  name: GetMinKey
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMinKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMinKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetMinKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  name: GetMinKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
    name: GetMinKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
    name: GetMinKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  name: GetMinKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
    name: GetMinKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
    name: GetMinKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  name: _keyValues
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._keyValues
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._keyValues
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey
  name: RemoveKey
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveKey({TKey})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.RemoveKey(`1)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  name: RemoveKey(TKey)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  name: RemoveKey(TKey)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex
  name: RemoveKeyByIndex
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.RemoveKeyByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  name: RemoveKeyByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  isExternal: true
  name: RemoveKeyByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex
  name: RemoveChildByIndex
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.RemoveChildByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  name: RemoveChildByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  isExternal: true
  name: RemoveChildByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild
  name: RemoveChild
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChild
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue
  name: GetKeyValue
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetKeyValue(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  name: GetKeyValue(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  isExternal: true
  name: GetKeyValue(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey
  name: GetKey
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKey
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetKey(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  name: GetKey(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKey(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  isExternal: true
  name: GetKey(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKey(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex
  name: GetKeyIndex
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild
  name: GetChild
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChild
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChild
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetChild(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  name: GetChild(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChild(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  isExternal: true
  name: GetChild(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild(System.Int32)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChild(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex
  name: GetChildIndex
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetChildIndex({TNode})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetChildIndex(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  name: GetChildIndex(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  name: GetChildIndex(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue
  name: InsertKeyValue
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.InsertKeyValue(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  isExternal: true
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent
  name: SetParent
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.SetParent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.SetParent
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).SetParent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).SetParent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.SetParent({TNode})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.SetParent(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  name: SetParent(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
    name: SetParent
    nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
    name: SetParent
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  name: SetParent(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
    name: SetParent
    nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
    name: SetParent
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  name: GetParent
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetParent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetParent
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetParent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetParent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{`0,`1,`2}.GetParent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  name: GetParent()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
    name: GetParent
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
    name: GetParent
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  name: GetParent()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent()
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
    name: GetParent
    nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
    name: GetParent
    nameWithType: IBTreeNode(Of TNode, TKey, TValue).GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  name: Split
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Split
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Split
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Split
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Split
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  name: KeyValueToMoveUp
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo
  name: CompareTo
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.CompareTo
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.CompareTo
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).CompareTo
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).CompareTo
- uid: System.IComparable{{TNode}}.CompareTo({TNode})
  commentId: M:System.IComparable{`0}.CompareTo(`0)
  parent: System.IComparable{{TNode}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: IComparable<TNode>.CompareTo(TNode)
  fullName: System.IComparable<TNode>.CompareTo(TNode)
  nameWithType.vb: IComparable(Of TNode).CompareTo(TNode)
  fullName.vb: System.IComparable(Of TNode).CompareTo(TNode)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<TNode>.CompareTo
    fullName: System.IComparable<TNode>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of TNode).CompareTo
    fullName: System.IComparable(Of TNode).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
