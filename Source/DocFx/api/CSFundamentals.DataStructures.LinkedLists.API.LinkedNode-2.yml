### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  id: LinkedNode`2
  parent: CSFundamentals.DataStructures.LinkedLists.API
  children:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor(`1)
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  langs:
  - csharp
  - vb
  name: LinkedNode<TNode, TValue>
  nameWithType: LinkedNode<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LinkedNode
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 29
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nImplements a node in a linked list. \n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class LinkedNode<TNode, TValue>

          where TNode : LinkedNode<TNode, TValue> where TValue : IComparable<TValue>
    typeParameters:
    - id: TNode
      description: 'Type of the nodes in the linked list. '
    - id: TValue
      description: 'Type of the values stored in the linked list. '
    content.vb: >-
      <Serializable>

      Public Class LinkedNode(Of TNode As LinkedNode(Of TNode, TValue), TValue As IComparable(Of TValue))
  inheritance:
  - System.Object
  derivedClasses:
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: LinkedNode(Of TNode, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue)
  name.vb: LinkedNode(Of TNode, TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  id: Value
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: LinkedNode<TNode, TValue>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Value
  type: Property
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Value
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 35
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nIs the value stored in the node. \n"
  example: []
  syntax:
    content: public TValue Value { get; set; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Public Property Value As TValue
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value*
  nameWithType.vb: LinkedNode(Of TNode, TValue).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Value
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  id: Next
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  langs:
  - csharp
  - vb
  name: Next
  nameWithType: LinkedNode<TNode, TValue>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Next
  type: Property
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Next
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 40
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nIs a reference to the next immediate node in the list. \n"
  example: []
  syntax:
    content: public TNode Next { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Public Property Next As TNode
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next*
  nameWithType.vb: LinkedNode(Of TNode, TValue).Next
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Next
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor(`1)
  id: '#ctor(`1)'
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  langs:
  - csharp
  - vb
  name: LinkedNode(TValue)
  nameWithType: LinkedNode<TNode, TValue>.LinkedNode(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.LinkedNode(TValue)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 46
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public LinkedNode(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: 'The value to be stored in the node. '
    content.vb: Public Sub New(value As TValue)
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor*
  nameWithType.vb: LinkedNode(Of TNode, TValue).LinkedNode(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).LinkedNode(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  langs:
  - csharp
  - vb
  name: LinkedNode()
  nameWithType: LinkedNode<TNode, TValue>.LinkedNode()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.LinkedNode()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 54
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nThis constructor is for Serializability.\n"
  example: []
  syntax:
    content: public LinkedNode()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor*
  nameWithType.vb: LinkedNode(Of TNode, TValue).LinkedNode()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).LinkedNode()
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  id: IsTail
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  langs:
  - csharp
  - vb
  name: IsTail()
  nameWithType: LinkedNode<TNode, TValue>.IsTail()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail()
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsTail
    path: ../DataStructures/LinkedLists/API/LinkedNode.cs
    startLine: 62
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nChecks whether the current node is tail. A node is tail if it has no next node. \n"
  example: []
  syntax:
    content: public bool IsTail()
    return:
      type: System.Boolean
      description: True in case the node is tail, and false otherwise.
    content.vb: Public Function IsTail As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail*
  nameWithType.vb: LinkedNode(Of TNode, TValue).IsTail()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail()
references:
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  name: Value
  nameWithType: LinkedNode<TNode, TValue>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Value
  nameWithType.vb: LinkedNode(Of TNode, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  name: Next
  nameWithType: LinkedNode<TNode, TValue>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Next
  nameWithType.vb: LinkedNode(Of TNode, TValue).Next
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Next
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.#ctor
  name: LinkedNode
  nameWithType: LinkedNode<TNode, TValue>.LinkedNode
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.LinkedNode
  nameWithType.vb: LinkedNode(Of TNode, TValue).LinkedNode
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).LinkedNode
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  name: IsTail
  nameWithType: LinkedNode<TNode, TValue>.IsTail
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail
  nameWithType.vb: LinkedNode(Of TNode, TValue).IsTail
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
