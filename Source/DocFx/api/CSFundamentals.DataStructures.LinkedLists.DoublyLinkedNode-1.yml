### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  id: DoublyLinkedNode`1
  parent: CSFundamentals.DataStructures.LinkedLists
  children:
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor(`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.Previous
  langs:
  - csharp
  - vb
  name: DoublyLinkedNode<TValue>
  nameWithType: DoublyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DoublyLinkedNode
    path: ../DataStructures/LinkedLists/DoublyLinkedNode.cs
    startLine: 29
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nImplements a node in a DoublyLinkedList. \n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class DoublyLinkedNode<TValue> : LinkedNode<DoublyLinkedNode<TValue>, TValue> where TValue : IComparable<TValue>
    typeParameters:
    - id: TValue
      description: Is the type of the values stored in a node.
    content.vb: >-
      <Serializable>

      Public Class DoublyLinkedNode(Of TValue As IComparable(Of TValue))
          Inherits LinkedNode(Of DoublyLinkedNode(Of TValue), TValue)
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}
  inheritedMembers:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.Value
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.Next
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.IsTail
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: DoublyLinkedNode(Of TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue)
  name.vb: DoublyLinkedNode(Of TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.Previous
  commentId: F:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.Previous
  id: Previous
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  langs:
  - csharp
  - vb
  name: Previous
  nameWithType: DoublyLinkedNode<TValue>.Previous
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>.Previous
  type: Field
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Previous
    path: ../DataStructures/LinkedLists/DoublyLinkedNode.cs
    startLine: 35
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nIs a reference to the node before this one in the list. \n"
  example: []
  syntax:
    content: public DoublyLinkedNode<TValue> Previous
    return:
      type: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    content.vb: Public Previous As DoublyLinkedNode(Of TValue)
  nameWithType.vb: DoublyLinkedNode(Of TValue).Previous
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue).Previous
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  langs:
  - csharp
  - vb
  name: DoublyLinkedNode(TValue)
  nameWithType: DoublyLinkedNode<TValue>.DoublyLinkedNode(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>.DoublyLinkedNode(TValue)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/DoublyLinkedNode.cs
    startLine: 41
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public DoublyLinkedNode(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: 'The value to be stored in the node. '
    content.vb: Public Sub New(value As TValue)
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor*
  nameWithType.vb: DoublyLinkedNode(Of TValue).DoublyLinkedNode(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue).DoublyLinkedNode(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead
  id: IsHead
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  langs:
  - csharp
  - vb
  name: IsHead()
  nameWithType: DoublyLinkedNode<TValue>.IsHead()
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>.IsHead()
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsHead
    path: ../DataStructures/LinkedLists/DoublyLinkedNode.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nChecks whether the current node is head, a node is head if it has no previous node.\n"
  example: []
  syntax:
    content: public bool IsHead()
    return:
      type: System.Boolean
      description: 'True in case the node is head, and false otherwise. '
    content.vb: Public Function IsHead As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead*
  nameWithType.vb: DoublyLinkedNode(Of TValue).IsHead()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue).IsHead()
references:
- uid: CSFundamentals.DataStructures.LinkedLists
  commentId: N:CSFundamentals.DataStructures.LinkedLists
  name: CSFundamentals.DataStructures.LinkedLists
  nameWithType: CSFundamentals.DataStructures.LinkedLists
  fullName: CSFundamentals.DataStructures.LinkedLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,`0}
  parent: CSFundamentals.DataStructures.LinkedLists.API
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  name: LinkedNode<DoublyLinkedNode<TValue>, TValue>
  nameWithType: LinkedNode<DoublyLinkedNode<TValue>, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>
  nameWithType.vb: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue)
  name.vb: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.Value
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,`0}.Value
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  name: Value
  nameWithType: LinkedNode<DoublyLinkedNode<TValue>, TValue>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Value
  nameWithType.vb: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue).Value
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Value
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.Next
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,`0}.Next
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  name: Next
  nameWithType: LinkedNode<DoublyLinkedNode<TValue>, TValue>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Next
  nameWithType.vb: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue).Next
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Next
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}.IsTail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,`0}.IsTail
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1,{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  name: IsTail()
  nameWithType: LinkedNode<DoublyLinkedNode<TValue>, TValue>.IsTail()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.IsTail()
  nameWithType.vb: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue).IsTail()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).IsTail()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode<DoublyLinkedNode<TValue>, TValue>.IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode(Of DoublyLinkedNode(Of TValue), TValue).IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
  name: LinkedNode<TNode, TValue>
  nameWithType: LinkedNode<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>
  nameWithType.vb: LinkedNode(Of TNode, TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue)
  name.vb: LinkedNode(Of TNode, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2
    name: LinkedNode
    nameWithType: LinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Value
  name: Value
  nameWithType: LinkedNode<TNode, TValue>.Value
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Value
  nameWithType.vb: LinkedNode(Of TNode, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Value
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  commentId: P:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.Next
  name: Next
  nameWithType: LinkedNode<TNode, TValue>.Next
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.Next
  nameWithType.vb: LinkedNode(Of TNode, TValue).Next
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).Next
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
  name: IsTail()
  nameWithType: LinkedNode<TNode, TValue>.IsTail()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail()
  nameWithType.vb: LinkedNode(Of TNode, TValue).IsTail()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode<TNode, TValue>.IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode<TNode, TValue>.IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode`2.IsTail
    name: IsTail
    nameWithType: LinkedNode(Of TNode, TValue).IsTail
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedNode(Of TNode, TValue).IsTail
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  parent: CSFundamentals.DataStructures.LinkedLists
  name: DoublyLinkedNode<TValue>
  nameWithType: DoublyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>
  nameWithType.vb: DoublyLinkedNode(Of TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue)
  name.vb: DoublyLinkedNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.#ctor
  name: DoublyLinkedNode
  nameWithType: DoublyLinkedNode<TValue>.DoublyLinkedNode
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>.DoublyLinkedNode
  nameWithType.vb: DoublyLinkedNode(Of TValue).DoublyLinkedNode
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue).DoublyLinkedNode
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1.IsHead
  name: IsHead
  nameWithType: DoublyLinkedNode<TValue>.IsHead
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>.IsHead
  nameWithType.vb: DoublyLinkedNode(Of TValue).IsHead
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue).IsHead
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
