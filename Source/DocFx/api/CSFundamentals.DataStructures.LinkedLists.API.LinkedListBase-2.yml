### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  id: LinkedListBase`2
  parent: CSFundamentals.DataStructures.LinkedLists.API
  children:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  langs:
  - csharp
  - vb
  name: LinkedListBase<TNode, TValue>
  nameWithType: LinkedListBase<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LinkedListBase
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 31
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nIs the abstract class for a Linked List\n"
  example: []
  syntax:
    content: >-
      public abstract class LinkedListBase<TNode, TValue>

          where TNode : LinkedNode<TNode, TValue> where TValue : IComparable<TValue>
    typeParameters:
    - id: TNode
      description: 'Type of the nodes in linked list. '
    - id: TValue
      description: 'Type of the values stored in the linked list. '
    content.vb: Public MustInherit Class LinkedListBase(Of TNode As LinkedNode(Of TNode, TValue), TValue As IComparable(Of TValue))
  inheritance:
  - System.Object
  derivedClasses:
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedSortedList`1
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: LinkedListBase(Of TNode, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)
  name.vb: LinkedListBase(Of TNode, TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  commentId: F:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  id: _head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: _head
  nameWithType: LinkedListBase<TNode, TValue>._head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>._head
  type: Field
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: _head
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 36
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nIs the first node in the list. \n"
  example: []
  syntax:
    content: protected TNode _head
    return:
      type: '{TNode}'
    content.vb: Protected _head As TNode
  nameWithType.vb: LinkedListBase(Of TNode, TValue)._head
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)._head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  id: Head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: Head()
  nameWithType: LinkedListBase<TNode, TValue>.Head()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head()
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Head
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 42
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nGets a copy of the head node. \n"
  example: []
  syntax:
    content: public TNode Head()
    return:
      type: '{TNode}'
      description: 'A copy of the head node. '
    content.vb: Public Function Head As TNode
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head*
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Head()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head()
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  id: Insert(`1)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: Insert(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 52
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nInserts a new value in the list.\n"
  example: []
  syntax:
    content: public abstract bool Insert(TValue newValue)
    parameters:
    - id: newValue
      type: '{TValue}'
      description: 'Is the value of the new node. '
    return:
      type: System.Boolean
      description: True in case of success.
    content.vb: Public MustOverride Function Insert(newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert*
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Insert(TValue)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  id: Delete(`1)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: Delete(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 59
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nDeletes a node with the given value from the list. If no node with the given value exists, fails the operation and returns false.\n"
  example: []
  syntax:
    content: public abstract bool Delete(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: Is the value that is being searched for.
    return:
      type: System.Boolean
      description: 'True in case of success, and false otherwise. '
    content.vb: Public MustOverride Function Delete(value As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete*
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Delete(TValue)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  id: Search(`1)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: Search(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Search(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 66
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nSearches for the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>. Since there is no assumption about the order of the values in the list, starts from the Head node and performs a linear search.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)", When = "The first node (Head) contains the value.")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(n)")]

      public virtual TNode Search(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: Is the value of the node that is being searched for.
    return:
      type: '{TNode}'
      description: 'The node containing <code data-dev-comment-type="paramref" class="paramref">value</code>, and if no node is found throws an exception. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)", When:="The first node (Head) contains the value.")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(n)")>

      Public Overridable Function Search(value As TValue) As TNode
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
    namedArguments:
    - name: When
      type: System.String
      value: The first node (Head) contains the value.
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(n)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Search(TValue)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  id: Count
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  langs:
  - csharp
  - vb
  name: Count()
  nameWithType: LinkedListBase<TNode, TValue>.Count()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count()
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/API/LinkedListBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Count
    path: ../DataStructures/LinkedLists/API/LinkedListBase.cs
    startLine: 90
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists.API
  summary: "\nComputes the length of the linked list. Length is the number of the nodes in the list.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(n)")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(n)")]

      public int Count()
    return:
      type: System.Int32
      description: 'Number of nodes in the list. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(n)")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(n)")>

      Public Function Count As Integer
  overload: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(n)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Count()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count()
references:
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  name: Head
  nameWithType: LinkedListBase<TNode, TValue>.Head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Head
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert
  name: Insert
  nameWithType: LinkedListBase<TNode, TValue>.Insert
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete
  name: Delete
  nameWithType: LinkedListBase<TNode, TValue>.Delete
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Delete
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search
  name: Search
  nameWithType: LinkedListBase<TNode, TValue>.Search
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Search
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  name: Count
  nameWithType: LinkedListBase<TNode, TValue>.Count
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Count
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
