### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  id: BPlusTreeNode`2
  parent: CSFundamentals.DataStructures.Trees.Nary
  children:
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1}})
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey(`0)
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf
  - CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf
  langs:
  - csharp
  - vb
  name: BPlusTreeNode<TKey, TValue>
  nameWithType: BPlusTreeNode<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BPlusTreeNode
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 32
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nImplements a B+ Tree node. \n"
  example: []
  syntax:
    content: 'public class BPlusTreeNode<TKey, TValue> : BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>, IBTreeNode<BPlusTreeNode<TKey, TValue>, TKey, TValue>, IComparable<BPlusTreeNode<TKey, TValue>> where TKey : IComparable<TKey>'
    typeParameters:
    - id: TKey
      description: 'Type of the keys in the tree. '
    - id: TValue
      description: 'Type of the values in the tree. '
    content.vb: >-
      Public Class BPlusTreeNode(Of TKey As IComparable(Of TKey), TValue)

          Inherits BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)

          Implements IBTreeNode(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue), IComparable(Of BPlusTreeNode(Of TKey, TValue))
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  implements:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  - System.IComparable{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
  inheritedMembers:
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._keyValues
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._children
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._parent
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MinKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MaxKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MinBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MaxBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.KeyCount
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.ChildrenCount
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.Clear
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyValues
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsLeaf
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsRoot
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsOverFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsUnderFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsMinFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsMinOneFull
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsEmpty
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetIndexAtParentChildren
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.HasLeftSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.HasRightSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetLeftSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetRightSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetMaxKey
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetMinKey
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveKey({TKey})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveKeyByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveChildByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyValue(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKey(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyIndex({TKey})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetChild(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetChildIndex(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.InsertKeyValue(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.SetParent(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetParent
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.Split
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.KeyValueToMoveUp
  - CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.CompareTo(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue)
  name.vb: BPlusTreeNode(Of TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf
  id: NextLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: NextLeaf
  nameWithType: BPlusTreeNode<TKey, TValue>.NextLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.NextLeaf
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: NextLeaf
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 39
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nOnly used by leaf nodes, and points to the leaf to its right (note that the right leaf may or may not be a sibling of the current leaf)\n"
  example: []
  syntax:
    content: public BPlusTreeNode<TKey, TValue> NextLeaf { get; set; }
    parameters: []
    return:
      type: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    content.vb: Public Property NextLeaf As BPlusTreeNode(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).NextLeaf
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).NextLeaf
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf
  id: PreviousLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: PreviousLeaf
  nameWithType: BPlusTreeNode<TKey, TValue>.PreviousLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.PreviousLeaf
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: PreviousLeaf
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 44
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nOnly used by leaf nodes, and points to the leaf to its left (note that the left leaf may or may not be a sibling of the current leaf)\n"
  example: []
  syntax:
    content: public BPlusTreeNode<TKey, TValue> PreviousLeaf { get; set; }
    parameters: []
    return:
      type: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    content.vb: Public Property PreviousLeaf As BPlusTreeNode(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).PreviousLeaf
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).PreviousLeaf
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: BPlusTreeNode()
  nameWithType: BPlusTreeNode<TKey, TValue>.BPlusTreeNode()
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.BPlusTreeNode()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nParameter-less constructor.\n"
  example: []
  syntax:
    content: public BPlusTreeNode()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).BPlusTreeNode()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).BPlusTreeNode()
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: BPlusTreeNode(Int32)
  nameWithType: BPlusTreeNode<TKey, TValue>.BPlusTreeNode(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.BPlusTreeNode(System.Int32)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 57
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nCreates a node with no keys. \n"
  example: []
  syntax:
    content: public BPlusTreeNode(int maxBranchingDegree)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Is the maximum number of children the node can have. '
    content.vb: Public Sub New(maxBranchingDegree As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})
  id: '#ctor(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1})'
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: BPlusTreeNode(Int32, KeyValuePair<TKey, TValue>)
  nameWithType: BPlusTreeNode<TKey, TValue>.BPlusTreeNode(Int32, KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.BPlusTreeNode(System.Int32, System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 66
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nCreates a node with 1 key. \n"
  example: []
  syntax:
    content: public BPlusTreeNode(int maxBranchingDegree, KeyValuePair<TKey, TValue> keyValue)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Is the maximum number of children the node can have. '
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'Is a key-value pair to be inserted in the tree. '
    content.vb: Public Sub New(maxBranchingDegree As Integer, keyValue As KeyValuePair(Of TKey, TValue))
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(Int32, KeyValuePair(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(System.Int32, System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: BPlusTreeNode(Int32, KeyValuePair(Of TKey, TValue))
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1}})
  id: '#ctor(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1}})'
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: BPlusTreeNode(Int32, List<KeyValuePair<TKey, TValue>>, List<BPlusTreeNode<TKey, TValue>>)
  nameWithType: BPlusTreeNode<TKey, TValue>.BPlusTreeNode(Int32, List<KeyValuePair<TKey, TValue>>, List<BPlusTreeNode<TKey, TValue>>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.BPlusTreeNode(System.Int32, System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.List<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 76
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nCreates a node with a set of keys and children.\n"
  example: []
  syntax:
    content: public BPlusTreeNode(int maxBranchingDegree, List<KeyValuePair<TKey, TValue>> keyValues, List<BPlusTreeNode<TKey, TValue>> children)
    parameters:
    - id: maxBranchingDegree
      type: System.Int32
      description: 'Is the maximum number of children the node can have. '
    - id: keyValues
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: 'Is a set of key-value pairs to be inserted in the new node. '
    - id: children
      type: System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
      description: 'Is a set of children of the node. Expectancy is that the count of children is one bigger than the count of key-value pairs in the node. '
    content.vb: Public Sub New(maxBranchingDegree As Integer, keyValues As List(Of KeyValuePair(Of TKey, TValue)), children As List(Of BPlusTreeNode(Of TKey, TValue)))
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(Int32, List(Of KeyValuePair(Of TKey, TValue)), List(Of BPlusTreeNode(Of TKey, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).BPlusTreeNode(System.Int32, System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.List(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue)))
  name.vb: BPlusTreeNode(Int32, List(Of KeyValuePair(Of TKey, TValue)), List(Of BPlusTreeNode(Of TKey, TValue)))
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey(`0)
  id: InsertKey(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: InsertKey(TKey)
  nameWithType: BPlusTreeNode<TKey, TValue>.InsertKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.InsertKey(TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertKey
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 84
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nInserts the given key in _keyValues array. \n"
  example: []
  syntax:
    content: public void InsertKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 'A key to be inserted in the _keyValues array. '
    content.vb: Public Sub InsertKey(key As TKey)
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).InsertKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).InsertKey(TKey)
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren
  id: GetIndexAtParentChildren
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: GetIndexAtParentChildren()
  nameWithType: BPlusTreeNode<TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.GetIndexAtParentChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetIndexAtParentChildren
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 97
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nGets the index of the current node in its parent&apos;s _children array. \n"
  example: []
  syntax:
    content: public override int GetIndexAtParentChildren()
    return:
      type: System.Int32
      description: 'index of the current node in its parent&apos;s _children array. '
    content.vb: Public Overrides Function GetIndexAtParentChildren As Integer
  overridden: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetIndexAtParentChildren
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).GetIndexAtParentChildren()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).GetIndexAtParentChildren()
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  id: InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: InsertChild(BPlusTreeNode<TKey, TValue>)
  nameWithType: BPlusTreeNode<TKey, TValue>.InsertChild(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertChild
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 107
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nInserts a child in _children array.\n"
  example: []
  syntax:
    content: public override void InsertChild(BPlusTreeNode<TKey, TValue> child)
    parameters:
    - id: child
      type: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
      description: 'the new child to be inserted in _children array. '
    content.vb: Public Overrides Sub InsertChild(child As BPlusTreeNode(Of TKey, TValue))
  overridden: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).InsertChild(BPlusTreeNode(Of TKey, TValue))
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: InsertChild(BPlusTreeNode(Of TKey, TValue))
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild
  id: HasGrandChild
  parent: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  langs:
  - csharp
  - vb
  name: HasGrandChild()
  nameWithType: BPlusTreeNode<TKey, TValue>.HasGrandChild()
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.HasGrandChild()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/BPlusTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasGrandChild
    path: ../DataStructures/Trees/Nary/BPlusTreeNode.cs
    startLine: 119
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary
  summary: "\nChecks whether the current node has any grand children. \n"
  example: []
  syntax:
    content: public bool HasGrandChild()
    return:
      type: System.Boolean
      description: 'True if the current node has any grand child, and false otherwise. '
    content.vb: Public Function HasGrandChild As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild*
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).HasGrandChild()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).HasGrandChild()
references:
- uid: CSFundamentals.DataStructures.Trees.Nary
  commentId: N:CSFundamentals.DataStructures.Trees.Nary
  name: CSFundamentals.DataStructures.Trees.Nary
  nameWithType: CSFundamentals.DataStructures.Trees.Nary
  fullName: CSFundamentals.DataStructures.Trees.Nary
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}
  parent: CSFundamentals.DataStructures.Trees.Nary.API
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  name: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  name.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
    name: BTreeNodeBase
    nameWithType: BTreeNodeBase
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
    name: BTreeNodeBase
    nameWithType: BTreeNodeBase
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}
  parent: CSFundamentals.DataStructures.Trees.Nary.API
  definition: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  name: IBTreeNode<BPlusTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType: IBTreeNode<BPlusTreeNode<TKey, TValue>, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>
  nameWithType.vb: IBTreeNode(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  name.vb: IBTreeNode(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
  commentId: T:System.IComparable{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
  parent: System
  definition: System.IComparable`1
  name: IComparable<BPlusTreeNode<TKey, TValue>>
  nameWithType: IComparable<BPlusTreeNode<TKey, TValue>>
  fullName: System.IComparable<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>>
  nameWithType.vb: IComparable(Of BPlusTreeNode(Of TKey, TValue))
  fullName.vb: System.IComparable(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: IComparable(Of BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._keyValues
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}._keyValues
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  name: _keyValues
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>._keyValues
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>._keyValues
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)._keyValues
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue)._keyValues
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._children
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}._children
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  name: _children
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>._children
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>._children
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)._children
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue)._children
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}._parent
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}._parent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  name: _parent
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>._parent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>._parent
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue)._parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue)._parent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.MinKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  name: MinKeys
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.MinKeys
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.MaxKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  name: MaxKeys
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.MaxKeys
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.MinBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.MaxBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.KeyCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  name: KeyCount
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyCount
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.ChildrenCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  name: ChildrenCount
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.ChildrenCount
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.Clear
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  name: Clear()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.Clear()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).Clear()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).Clear()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
    name: Clear
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
    name: Clear
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyValues
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetKeyValues
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  name: GetKeyValues()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValues()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValues()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValues()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValues()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
    name: GetKeyValues
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValues
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
    name: GetKeyValues
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValues
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  name: IsLeaf()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
    name: IsLeaf
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
    name: IsLeaf
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsRoot
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  name: IsRoot()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsRoot()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
    name: IsRoot
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
    name: IsRoot
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  name: IsFull()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsFull()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
    name: IsFull
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
    name: IsFull
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsOverFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  name: IsOverFlown()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsOverFlown()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsOverFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsOverFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
    name: IsOverFlown
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
    name: IsOverFlown
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsUnderFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  name: IsUnderFlown()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsUnderFlown()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsUnderFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsUnderFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsMinFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  name: IsMinFull()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinFull()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
    name: IsMinFull
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
    name: IsMinFull
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsMinOneFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  name: IsMinOneFull()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinOneFull()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinOneFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinOneFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.IsEmpty
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  name: IsEmpty()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsEmpty()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsEmpty()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsEmpty()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
    name: IsEmpty
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
    name: IsEmpty
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetIndexAtParentChildren
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetIndexAtParentChildren()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetIndexAtParentChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetIndexAtParentChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  name: InsertChild(BPlusTreeNode<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertChild(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertChild(BPlusTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: InsertChild(BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
    name: InsertChild
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
    name: InsertChild
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.HasLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  name: HasLeftSibling()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasLeftSibling()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.HasRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  name: HasRightSibling()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasRightSibling()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
    name: HasRightSibling
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
    name: HasRightSibling
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  name: GetLeftSibling()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetLeftSibling()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
    name: GetLeftSibling
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
    name: GetLeftSibling
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  name: GetRightSibling()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetRightSibling()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
    name: GetRightSibling
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
    name: GetRightSibling
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetMaxKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  name: GetMaxKey()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMaxKey()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMaxKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMaxKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
    name: GetMaxKey
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
    name: GetMaxKey
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetMinKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  name: GetMinKey()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMinKey()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMinKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMinKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
    name: GetMinKey
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
    name: GetMinKey
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveKey({TKey})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.RemoveKey(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  name: RemoveKey(TKey)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKey(TKey)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKey(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKey(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.RemoveKeyByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  name: RemoveKeyByIndex(Int32)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKeyByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKeyByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.RemoveChildByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  name: RemoveChildByIndex(Int32)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChildByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChildByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChildByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.RemoveChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.RemoveChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  name: RemoveChild(BPlusTreeNode<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChild(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChild(BPlusTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChild(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: RemoveChild(BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
    name: RemoveChild
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
    name: RemoveChild
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetKeyValue(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  name: GetKeyValue(Int32)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValue(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValue(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValue(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetKey(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  name: GetKey(Int32)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKey(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKey(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKey(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetKeyIndex({TKey})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetKeyIndex(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  name: GetKeyIndex(TKey)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyIndex(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyIndex(TKey)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyIndex(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyIndex(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
    name: GetKeyIndex
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetKeyIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
    name: GetKeyIndex
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetKeyIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetChild(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  name: GetChild(Int32)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChild(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChild(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChild(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetChildIndex(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetChildIndex(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  name: GetChildIndex(BPlusTreeNode<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChildIndex(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChildIndex(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChildIndex(BPlusTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChildIndex(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: GetChildIndex(BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.InsertKeyValue(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.InsertKeyValue(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.SetParent(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.SetParent(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  name: SetParent(BPlusTreeNode<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.SetParent(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.SetParent(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).SetParent(BPlusTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).SetParent(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: SetParent(BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
    name: SetParent
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
    name: SetParent
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.GetParent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  name: GetParent()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetParent()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
    name: GetParent
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
    name: GetParent
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.Split
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.Split
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  name: Split()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.Split()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.Split()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).Split()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).Split()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
    name: Split
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.Split
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.Split
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
    name: Split
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).Split
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).Split
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.KeyValueToMoveUp
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.KeyValueToMoveUp
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  name: KeyValueToMoveUp()
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyValueToMoveUp()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyValueToMoveUp()
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyValueToMoveUp()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyValueToMoveUp()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
    name: KeyValueToMoveUp
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyValueToMoveUp
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.KeyValueToMoveUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
    name: KeyValueToMoveUp
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyValueToMoveUp
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).KeyValueToMoveUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}.CompareTo(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{{TKey},{TValue}})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,`0,`1}.CompareTo(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode{`0,`1})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2,{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  name: CompareTo(BPlusTreeNode<TKey, TValue>)
  nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.CompareTo(BPlusTreeNode<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.CompareTo(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).CompareTo(BPlusTreeNode(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).CompareTo(CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: CompareTo(BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BTreeNodeBase<BPlusTreeNode<TKey, TValue>, TKey, TValue>.CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>, TKey, TValue>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BTreeNodeBase(Of BPlusTreeNode(Of TKey, TValue), TKey, TValue).CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue), TKey, TValue).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
  name: BTreeNodeBase<TNode, TKey, TValue>
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)
  name.vb: BTreeNodeBase(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
    name: BTreeNodeBase
    nameWithType: BTreeNodeBase
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3
    name: BTreeNodeBase
    nameWithType: BTreeNodeBase
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Nary.API
  name: CSFundamentals.DataStructures.Trees.Nary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Nary.API
  fullName: CSFundamentals.DataStructures.Trees.Nary.API
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  name: IBTreeNode<TNode, TKey, TValue>
  nameWithType: IBTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue)
  name.vb: IBTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
    name: IBTreeNode
    nameWithType: IBTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._keyValues
  name: _keyValues
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._keyValues
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._keyValues
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._keyValues
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._children
  name: _children
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._children
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._children
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._children
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._children
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  commentId: F:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3._parent
  name: _parent
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>._parent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>._parent
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue)._parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue)._parent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinKeys
  name: MinKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxKeys
  name: MaxKeys
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxKeys
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyCount
  name: KeyCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.ChildrenCount
  name: ChildrenCount
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.ChildrenCount
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
  name: Clear()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Clear()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Clear()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Clear()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
    name: Clear
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Clear
    name: Clear
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).Clear
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
  name: GetKeyValues()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
    name: GetKeyValues
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValues
    name: GetKeyValues
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValues
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
  name: IsLeaf()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsLeaf()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
    name: IsLeaf
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsLeaf
    name: IsLeaf
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsLeaf
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
  name: IsRoot()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsRoot()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsRoot()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
    name: IsRoot
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsRoot
    name: IsRoot
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsRoot
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsRoot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
  name: IsFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsFull()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
    name: IsFull
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsFull
    name: IsFull
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
  name: IsOverFlown()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
    name: IsOverFlown
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsOverFlown
    name: IsOverFlown
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsOverFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
  name: IsUnderFlown()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsUnderFlown
    name: IsUnderFlown
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsUnderFlown
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
  name: IsMinFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinFull()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
    name: IsMinFull
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinFull
    name: IsMinFull
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
  name: IsMinOneFull()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsMinOneFull
    name: IsMinOneFull
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsMinOneFull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
  name: IsEmpty()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsEmpty()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
    name: IsEmpty
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.IsEmpty
    name: IsEmpty
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).IsEmpty
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetIndexAtParentChildren
    name: GetIndexAtParentChildren
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetIndexAtParentChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
  name: InsertChild(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertChild(TNode)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertChild(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertChild(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
    name: InsertChild
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertChild(`0)
    name: InsertChild
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).InsertChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
  name: HasLeftSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasLeftSibling
    name: HasLeftSibling
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
  name: HasRightSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
    name: HasRightSibling
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.HasRightSibling
    name: HasRightSibling
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).HasRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
  name: GetLeftSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
    name: GetLeftSibling
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetLeftSibling
    name: GetLeftSibling
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetLeftSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
  name: GetRightSibling()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
    name: GetRightSibling
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetRightSibling
    name: GetRightSibling
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetRightSibling
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
  name: GetMaxKey()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
    name: GetMaxKey
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMaxKey
    name: GetMaxKey
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMaxKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
  name: GetMinKey()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMinKey()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
    name: GetMinKey
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetMinKey
    name: GetMinKey
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetMinKey
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
  name: RemoveKey(TKey)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKey(TKey)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKey(`1)
    name: RemoveKey
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKey
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
  isExternal: true
  name: RemoveKeyByIndex(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveKeyByIndex(System.Int32)
    name: RemoveKeyByIndex
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveKeyByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
  isExternal: true
  name: RemoveChildByIndex(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChildByIndex(System.Int32)
    name: RemoveChildByIndex
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChildByIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
  name: RemoveChild(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChild(TNode)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
    name: RemoveChild
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.RemoveChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.RemoveChild(`0)
    name: RemoveChild
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).RemoveChild
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
  isExternal: true
  name: GetKeyValue(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyValue(System.Int32)
    name: GetKeyValue
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
  isExternal: true
  name: GetKey(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKey(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKey(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKey(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKey(System.Int32)
    name: GetKey
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetKey
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKey
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
  name: GetKeyIndex(TKey)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex(TKey)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
    name: GetKeyIndex
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetKeyIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetKeyIndex(`1)
    name: GetKeyIndex
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetKeyIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
  isExternal: true
  name: GetChild(Int32)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChild(System.Int32)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChild(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChild(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChild(System.Int32)
    name: GetChild
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetChild
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChild
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
  name: GetChildIndex(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex(TNode)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetChildIndex(`0)
    name: GetChildIndex
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetChildIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  isExternal: true
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
    name: InsertKeyValue
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).InsertKeyValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
  name: SetParent(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.SetParent(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.SetParent(TNode)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).SetParent(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).SetParent(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
    name: SetParent
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.SetParent(`0)
    name: SetParent
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).SetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).SetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
  name: GetParent()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetParent()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).GetParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetParent()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
    name: GetParent
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.GetParent
    name: GetParent
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).GetParent
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).GetParent
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
  name: Split()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Split()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Split()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).Split()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Split()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
    name: Split
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.Split
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.Split
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.Split
    name: Split
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).Split
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).Split
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
  name: KeyValueToMoveUp()
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp()
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
    name: KeyValueToMoveUp
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.KeyValueToMoveUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.KeyValueToMoveUp
    name: KeyValueToMoveUp
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).KeyValueToMoveUp
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: BTreeNodeBase<TNode, TKey, TValue>.CompareTo(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.CompareTo(TNode)
  nameWithType.vb: BTreeNodeBase(Of TNode, TKey, TValue).CompareTo(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).CompareTo(TNode)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BTreeNodeBase<TNode, TKey, TValue>.CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase<TNode, TKey, TValue>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase`3.CompareTo(`0)
    name: CompareTo
    nameWithType: BTreeNodeBase(Of TNode, TKey, TValue).CompareTo
    fullName: CSFundamentals.DataStructures.Trees.Nary.API.BTreeNodeBase(Of TNode, TKey, TValue).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.NextLeaf
  name: NextLeaf
  nameWithType: BPlusTreeNode<TKey, TValue>.NextLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.NextLeaf
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).NextLeaf
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).NextLeaf
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
  parent: CSFundamentals.DataStructures.Trees.Nary
  name: BPlusTreeNode<TKey, TValue>
  nameWithType: BPlusTreeNode<TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue)
  name.vb: BPlusTreeNode(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.PreviousLeaf
  name: PreviousLeaf
  nameWithType: BPlusTreeNode<TKey, TValue>.PreviousLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.PreviousLeaf
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).PreviousLeaf
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).PreviousLeaf
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.#ctor
  name: BPlusTreeNode
  nameWithType: BPlusTreeNode<TKey, TValue>.BPlusTreeNode
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.BPlusTreeNode
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).BPlusTreeNode
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).BPlusTreeNode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<TKey, TValue>>
  nameWithType: List<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: List(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: List(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
  commentId: T:System.Collections.Generic.List{CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<BPlusTreeNode<TKey, TValue>>
  nameWithType: List<BPlusTreeNode<TKey, TValue>>
  fullName: System.Collections.Generic.List<CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>>
  nameWithType.vb: List(Of BPlusTreeNode(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue))
  name.vb: List(Of BPlusTreeNode(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2
    name: BPlusTreeNode
    nameWithType: BPlusTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertKey
  name: InsertKey
  nameWithType: BPlusTreeNode<TKey, TValue>.InsertKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.InsertKey
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).InsertKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).InsertKey
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.GetIndexAtParentChildren
  name: GetIndexAtParentChildren
  nameWithType: BPlusTreeNode<TKey, TValue>.GetIndexAtParentChildren
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.GetIndexAtParentChildren
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).GetIndexAtParentChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).GetIndexAtParentChildren
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.InsertChild
  name: InsertChild
  nameWithType: BPlusTreeNode<TKey, TValue>.InsertChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.InsertChild
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).InsertChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).InsertChild
- uid: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode`2.HasGrandChild
  name: HasGrandChild
  nameWithType: BPlusTreeNode<TKey, TValue>.HasGrandChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode<TKey, TValue>.HasGrandChild
  nameWithType.vb: BPlusTreeNode(Of TKey, TValue).HasGrandChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.BPlusTreeNode(Of TKey, TValue).HasGrandChild
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
