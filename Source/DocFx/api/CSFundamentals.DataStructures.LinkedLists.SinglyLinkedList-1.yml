### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  id: SinglyLinkedList`1
  parent: CSFundamentals.DataStructures.LinkedLists
  children:
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0})
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete(`0)
  - CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert(`0)
  langs:
  - csharp
  - vb
  name: SinglyLinkedList<TValue>
  nameWithType: SinglyLinkedList<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/LinkedLists/SinglyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: SinglyLinkedList
    path: ../DataStructures/LinkedLists/SinglyLinkedList.cs
    startLine: 30
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nImplements a singly linked list. \n"
  example: []
  syntax:
    content: 'public class SinglyLinkedList<TValue> : LinkedListBase<SinglyLinkedNode<TValue>, TValue> where TValue : IComparable<TValue>'
    typeParameters:
    - id: TValue
      description: Type of the values stored in the list.
    content.vb: >-
      Public Class SinglyLinkedList(Of TValue As IComparable(Of TValue))
          Inherits LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue)
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  inheritedMembers:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}._head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Search({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Count
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SinglyLinkedList(Of TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue)
  name.vb: SinglyLinkedList(Of TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor
  commentId: M:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  langs:
  - csharp
  - vb
  name: SinglyLinkedList()
  nameWithType: SinglyLinkedList<TValue>.SinglyLinkedList()
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.SinglyLinkedList()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/SinglyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/SinglyLinkedList.cs
    startLine: 35
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nParameter-less Constructor.\n"
  example: []
  syntax:
    content: public SinglyLinkedList()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor*
  nameWithType.vb: SinglyLinkedList(Of TValue).SinglyLinkedList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).SinglyLinkedList()
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0})
  id: '#ctor(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0})'
  parent: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  langs:
  - csharp
  - vb
  name: SinglyLinkedList(SinglyLinkedNode<TValue>)
  nameWithType: SinglyLinkedList<TValue>.SinglyLinkedList(SinglyLinkedNode<TValue>)
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.SinglyLinkedList(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/SinglyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/SinglyLinkedList.cs
    startLine: 43
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public SinglyLinkedList(SinglyLinkedNode<TValue> head)
    parameters:
    - id: head
      type: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}}
      description: 'Head/starting node in the list. '
    content.vb: Public Sub New(head As SinglyLinkedNode(Of TValue))
  overload: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor*
  nameWithType.vb: SinglyLinkedList(Of TValue).SinglyLinkedList(SinglyLinkedNode(Of TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).SinglyLinkedList(CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue))
  name.vb: SinglyLinkedList(SinglyLinkedNode(Of TValue))
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete(`0)
  id: Delete(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  langs:
  - csharp
  - vb
  name: Delete(TValue)
  nameWithType: SinglyLinkedList<TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.Delete(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/SinglyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete
    path: ../DataStructures/LinkedLists/SinglyLinkedList.cs
    startLine: 54
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nDeletes a node with the given value from the list. If no node with the given value exists, fails the operation and returns false.\n"
  example: []
  syntax:
    content: public override bool Delete(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: Is the value that is being searched for.
    return:
      type: System.Boolean
      description: 'True in case of success, and false otherwise. '
    content.vb: Public Overrides Function Delete(value As TValue) As Boolean
  overridden: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  overload: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete*
  nameWithType.vb: SinglyLinkedList(Of TValue).Delete(TValue)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).Delete(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert(`0)
  id: Insert(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1
  langs:
  - csharp
  - vb
  name: Insert(TValue)
  nameWithType: SinglyLinkedList<TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.Insert(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/SinglyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/LinkedLists/SinglyLinkedList.cs
    startLine: 88
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node in the beginning of the list. Insert in a singly linked list is the fastest when treated as a prepend, meaning adding to the beginning of the list. \nNotice that the current implementation allows duplicates.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public override bool Insert(TValue newValue)
    parameters:
    - id: newValue
      type: '{TValue}'
      description: Is the value of the new node in the list.
    return:
      type: System.Boolean
      description: True in case of success.
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Overrides Function Insert(newValue As TValue) As Boolean
  overridden: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  overload: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: SinglyLinkedList(Of TValue).Insert(TValue)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).Insert(TValue)
references:
- uid: CSFundamentals.DataStructures.LinkedLists
  commentId: N:CSFundamentals.DataStructures.LinkedLists
  name: CSFundamentals.DataStructures.LinkedLists
  nameWithType: CSFundamentals.DataStructures.LinkedLists
  fullName: CSFundamentals.DataStructures.LinkedLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}
  parent: CSFundamentals.DataStructures.LinkedLists.API
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  name: LinkedListBase<SinglyLinkedNode<TValue>, TValue>
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue)
  name.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}._head
  commentId: F:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}._head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  name: _head
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>._head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>._head
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue)._head
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue)._head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Head
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}.Head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  name: Head()
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Head()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Head()
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Head()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Head()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}.Insert(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  name: Insert(TValue)
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Insert(TValue)
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Insert(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Insert(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}.Delete(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  name: Delete(TValue)
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Delete(TValue)
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Delete(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Delete(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Search({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}.Search(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  name: Search(TValue)
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Search(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Search(TValue)
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Search(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Search(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}.Count
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0},`0}.Count
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  name: Count()
  nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Count()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Count()
  nameWithType.vb: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Count()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Count()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase<SinglyLinkedNode<TValue>, TValue>.Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>, TValue>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase(Of SinglyLinkedNode(Of TValue), TValue).Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue), TValue).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  name: LinkedListBase<TNode, TValue>
  nameWithType: LinkedListBase<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>
  nameWithType.vb: LinkedListBase(Of TNode, TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)
  name.vb: LinkedListBase(Of TNode, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  commentId: F:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  name: _head
  nameWithType: LinkedListBase<TNode, TValue>._head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>._head
  nameWithType.vb: LinkedListBase(Of TNode, TValue)._head
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)._head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  name: Head()
  nameWithType: LinkedListBase<TNode, TValue>.Head()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head()
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Head()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase<TNode, TValue>.Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase(Of TNode, TValue).Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  name: Insert(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Insert(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase<TNode, TValue>.Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase(Of TNode, TValue).Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  name: Delete(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Delete(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase<TNode, TValue>.Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase(Of TNode, TValue).Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  name: Search(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Search(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Search(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase<TNode, TValue>.Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase(Of TNode, TValue).Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  name: Count()
  nameWithType: LinkedListBase<TNode, TValue>.Count()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count()
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Count()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase<TNode, TValue>.Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase(Of TNode, TValue).Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.#ctor
  name: SinglyLinkedList
  nameWithType: SinglyLinkedList<TValue>.SinglyLinkedList
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.SinglyLinkedList
  nameWithType.vb: SinglyLinkedList(Of TValue).SinglyLinkedList
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).SinglyLinkedList
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{{TValue}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode{`0}
  parent: CSFundamentals.DataStructures.LinkedLists
  definition: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
  name: SinglyLinkedNode<TValue>
  nameWithType: SinglyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>
  nameWithType.vb: SinglyLinkedNode(Of TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue)
  name.vb: SinglyLinkedNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
  name: SinglyLinkedNode<TValue>
  nameWithType: SinglyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode<TValue>
  nameWithType.vb: SinglyLinkedNode(Of TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode(Of TValue)
  name.vb: SinglyLinkedNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode`1
    name: SinglyLinkedNode
    nameWithType: SinglyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Delete
  name: Delete
  nameWithType: SinglyLinkedList<TValue>.Delete
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.Delete
  nameWithType.vb: SinglyLinkedList(Of TValue).Delete
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).Delete
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList`1.Insert
  name: Insert
  nameWithType: SinglyLinkedList<TValue>.Insert
  fullName: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList<TValue>.Insert
  nameWithType.vb: SinglyLinkedList(Of TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.SinglyLinkedList(Of TValue).Insert
