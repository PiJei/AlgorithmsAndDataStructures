### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  commentId: T:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  id: SuffixTreeNode
  parent: CSFundamentals.DataStructures.StringStructures
  children:
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
  - CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
  langs:
  - csharp
  - vb
  name: SuffixTreeNode
  nameWithType: SuffixTreeNode
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  type: Class
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: SuffixTreeNode
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 31
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nImplements a suffix tree node. \n"
  example: []
  syntax:
    content: public class SuffixTreeNode
    content.vb: Public Class SuffixTreeNode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
  id: StringValue
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: StringValue
  nameWithType: SuffixTreeNode.StringValue
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: StringValue
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 36
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nIs the substring - Also considered an edge. \n"
  example: []
  syntax:
    content: public string StringValue { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property StringValue As String
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
  id: StartIndex
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: StartIndex
  nameWithType: SuffixTreeNode.StartIndex
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: StartIndex
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 41
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nIs the startIndex of the suffix\n"
  example: []
  syntax:
    content: public int StartIndex { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property StartIndex As Integer
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
  id: IsLeaf
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: IsLeaf
  nameWithType: SuffixTreeNode.IsLeaf
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeaf
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 46
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nTrue if the suffix is a leaf node.\n"
  example: []
  syntax:
    content: public bool IsLeaf { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsLeaf As Boolean
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
  id: IsRoot
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: IsRoot
  nameWithType: SuffixTreeNode.IsRoot
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRoot
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 52
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nTrue if the suffix is a root node. \nIf Root, then suffix string is empty. \n"
  example: []
  syntax:
    content: public bool IsRoot { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsRoot As Boolean
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
  id: IsIntermediate
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: IsIntermediate
  nameWithType: SuffixTreeNode.IsIntermediate
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsIntermediate
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 58
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nTrue if the node is an intermediate node. \nIntermediate nodes&apos; startIndex is set to -1\n"
  example: []
  syntax:
    content: public bool IsIntermediate { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsIntermediate As Boolean
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
  commentId: P:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
  id: Children
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: SuffixTreeNode.Children
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
  type: Property
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffoxTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Children
    path: ../DataStructures/StringStructures/SuffoxTreeNode.cs
    startLine: 63
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nIs the list if the suffix Nodes that can be reached from the current node. \n"
  example: []
  syntax:
    content: public List<SuffixTreeNode> Children { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{CSFundamentals.DataStructures.StringStructures.SuffixTreeNode}
    content.vb: Public Property Children As List(Of SuffixTreeNode)
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: CSFundamentals.DataStructures.StringStructures
  commentId: N:CSFundamentals.DataStructures.StringStructures
  name: CSFundamentals.DataStructures.StringStructures
  nameWithType: CSFundamentals.DataStructures.StringStructures
  fullName: CSFundamentals.DataStructures.StringStructures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
  name: StringValue
  nameWithType: SuffixTreeNode.StringValue
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StringValue
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
  name: StartIndex
  nameWithType: SuffixTreeNode.StartIndex
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.StartIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
  name: IsLeaf
  nameWithType: SuffixTreeNode.IsLeaf
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsLeaf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
  name: IsRoot
  nameWithType: SuffixTreeNode.IsRoot
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsRoot
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
  name: IsIntermediate
  nameWithType: SuffixTreeNode.IsIntermediate
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.IsIntermediate
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
  name: Children
  nameWithType: SuffixTreeNode.Children
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode.Children
- uid: System.Collections.Generic.List{CSFundamentals.DataStructures.StringStructures.SuffixTreeNode}
  commentId: T:System.Collections.Generic.List{CSFundamentals.DataStructures.StringStructures.SuffixTreeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SuffixTreeNode>
  nameWithType: List<SuffixTreeNode>
  fullName: System.Collections.Generic.List<CSFundamentals.DataStructures.StringStructures.SuffixTreeNode>
  nameWithType.vb: List(Of SuffixTreeNode)
  fullName.vb: System.Collections.Generic.List(Of CSFundamentals.DataStructures.StringStructures.SuffixTreeNode)
  name.vb: List(Of SuffixTreeNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
    name: SuffixTreeNode
    nameWithType: SuffixTreeNode
    fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
    name: SuffixTreeNode
    nameWithType: SuffixTreeNode
    fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
