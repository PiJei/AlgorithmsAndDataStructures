### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.Search.InterpolationSearch
  commentId: T:CSFundamentals.Algorithms.Search.InterpolationSearch
  id: InterpolationSearch
  parent: CSFundamentals.Algorithms.Search
  children:
  - CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  - CSFundamentals.Algorithms.Search.InterpolationSearch.Search``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  langs:
  - csharp
  - vb
  name: InterpolationSearch
  nameWithType: InterpolationSearch
  fullName: CSFundamentals.Algorithms.Search.InterpolationSearch
  type: Class
  source:
    remote:
      path: Source/Algorithms/Search/InterpolationSearch.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InterpolationSearch
    path: ../Algorithms/Search/InterpolationSearch.cs
    startLine: 29
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Search
  summary: "\nImplements Interpolation search algorithm for finding a specific value in a sorted array.\n"
  example: []
  syntax:
    content: public class InterpolationSearch
    content.vb: Public Class InterpolationSearch
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.Algorithms.Search.InterpolationSearch.Search``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  commentId: M:CSFundamentals.Algorithms.Search.InterpolationSearch.Search``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  id: Search``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  parent: CSFundamentals.Algorithms.Search.InterpolationSearch
  langs:
  - csharp
  - vb
  name: Search<T>(List<T>, Int32, Int32, T)
  nameWithType: InterpolationSearch.Search<T>(List<T>, Int32, Int32, T)
  fullName: CSFundamentals.Algorithms.Search.InterpolationSearch.Search<T>(System.Collections.Generic.List<T>, System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Search/InterpolationSearch.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search
    path: ../Algorithms/Search/InterpolationSearch.cs
    startLine: 41
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Search
  summary: "\nSearches in a sorted list of any comparable type, where values have a uniform distribution. Interpolation search is an improvement over binary search, and has a very similar implementation, the only main difference is where (which index in the array) the search starts at.\nThe search is named interpolation, as it always has two main poles that it moves back and forth between them, these poles are the start index and the end index of the array. \nNotice that only works if the given array is sorted. \n"
  example: []
  syntax:
    content: >-
      [Algorithm(AlgorithmType.Search, "InterpolationSearch", Assumptions = "Array is sorted with an ascending order, and elements are driven from a uniform distribution.")]

      [SpaceComplexity("O(1)", false, InPlace = true)]

      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(Log(Log(n)))")]

      public static int Search<T>(List<T> sortedList, int startIndex, int endIndex, T key)
          where T : IComparable<T>
    parameters:
    - id: sortedList
      type: System.Collections.Generic.List{{T}}
      description: 'A sorted list of any comparable type that are also uniformly distributed. '
    - id: startIndex
      type: System.Int32
      description: 'Specifies the lowest (left-most) index of the array - inclusive. '
    - id: endIndex
      type: System.Int32
      description: 'Specifies the highest (right-most) index of the array - inclusive. '
    - id: key
      type: '{T}'
      description: 'Specifies the value that is being searched for. '
    typeParameters:
    - id: T
    return:
      type: System.Int32
      description: 'The index of the <code data-dev-comment-type="paramref" class="paramref">key</code> in the array, and -1 if it does not exist in the array. '
    content.vb: >-
      <Algorithm(AlgorithmType.Search, "InterpolationSearch", Assumptions:="Array is sorted with an ascending order, and elements are driven from a uniform distribution.")>

      <SpaceComplexity("O(1)", False, InPlace:=True)>

      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(Log(Log(n)))")>

      Public Shared Function Search(Of T As IComparable(Of T))(sortedList As List(Of T), startIndex As Integer, endIndex As Integer, key As T) As Integer
  overload: CSFundamentals.Algorithms.Search.InterpolationSearch.Search*
  attributes:
  - type: CSFundamentals.Decoration.AlgorithmAttribute
    ctor: CSFundamentals.Decoration.AlgorithmAttribute.#ctor(CSFundamentals.Decoration.AlgorithmType,System.String)
    arguments:
    - type: CSFundamentals.Decoration.AlgorithmType
      value: 2
    - type: System.String
      value: InterpolationSearch
    namedArguments:
    - name: Assumptions
      type: System.String
      value: Array is sorted with an ascending order, and elements are driven from a uniform distribution.
  - type: CSFundamentals.Decoration.SpaceComplexityAttribute
    ctor: CSFundamentals.Decoration.SpaceComplexityAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: O(1)
    - type: System.Boolean
      value: false
    namedArguments:
    - name: InPlace
      type: System.Boolean
      value: true
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(Log(Log(n)))
  nameWithType.vb: InterpolationSearch.Search(Of T)(List(Of T), Int32, Int32, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.Search.InterpolationSearch.Search(Of T)(System.Collections.Generic.List(Of T), System.Int32, System.Int32, T)
  name.vb: Search(Of T)(List(Of T), Int32, Int32, T)
- uid: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  commentId: M:CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  id: GetStartIndex``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,``0)
  parent: CSFundamentals.Algorithms.Search.InterpolationSearch
  langs:
  - csharp
  - vb
  name: GetStartIndex<T>(List<T>, Int32, Int32, T)
  nameWithType: InterpolationSearch.GetStartIndex<T>(List<T>, Int32, Int32, T)
  fullName: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex<T>(System.Collections.Generic.List<T>, System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Search/InterpolationSearch.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetStartIndex
    path: ../Algorithms/Search/InterpolationSearch.cs
    startLine: 94
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Search
  summary: "\nComputes an index to start the search from, Dependent on the value we are after. \nThis formula is such that if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> is closer to the value in the <code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code>, the search start point will be chosen closer to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">startIndex</code>, and if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> is closer to the value at <code data-dev-comment-type=\"paramref\" class=\"paramref\">endIndex</code>, the search start point will be chosen closer to the <code data-dev-comment-type=\"paramref\" class=\"paramref\">endIndex</code>.\n"
  example: []
  syntax:
    content: >-
      public static int GetStartIndex<T>(List<T> sortedList, int startIndex, int endIndex, T key)
          where T : IComparable<T>
    parameters:
    - id: sortedList
      type: System.Collections.Generic.List{{T}}
      description: 'A sorted list of any comparable type that are also uniformly distributed. '
    - id: startIndex
      type: System.Int32
      description: 'Specifies the lowest (left-most) index of the array - inclusive. '
    - id: endIndex
      type: System.Int32
      description: 'Specifies the highest (right-most) index of the array - inclusive. '
    - id: key
      type: '{T}'
      description: 'Specifies the value that is being searched for. '
    typeParameters:
    - id: T
    return:
      type: System.Int32
      description: 'The index in the array at which to start the search. '
    content.vb: Public Shared Function GetStartIndex(Of T As IComparable(Of T))(sortedList As List(Of T), startIndex As Integer, endIndex As Integer, key As T) As Integer
  overload: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex*
  nameWithType.vb: InterpolationSearch.GetStartIndex(Of T)(List(Of T), Int32, Int32, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex(Of T)(System.Collections.Generic.List(Of T), System.Int32, System.Int32, T)
  name.vb: GetStartIndex(Of T)(List(Of T), Int32, Int32, T)
references:
- uid: CSFundamentals.Algorithms.Search
  commentId: N:CSFundamentals.Algorithms.Search
  name: CSFundamentals.Algorithms.Search
  nameWithType: CSFundamentals.Algorithms.Search
  fullName: CSFundamentals.Algorithms.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.Algorithms.Search.InterpolationSearch.Search*
  commentId: Overload:CSFundamentals.Algorithms.Search.InterpolationSearch.Search
  name: Search
  nameWithType: InterpolationSearch.Search
  fullName: CSFundamentals.Algorithms.Search.InterpolationSearch.Search
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex*
  commentId: Overload:CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex
  name: GetStartIndex
  nameWithType: InterpolationSearch.GetStartIndex
  fullName: CSFundamentals.Algorithms.Search.InterpolationSearch.GetStartIndex
