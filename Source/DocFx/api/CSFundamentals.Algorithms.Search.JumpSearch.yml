### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.Search.JumpSearch
  commentId: T:CSFundamentals.Algorithms.Search.JumpSearch
  id: JumpSearch
  parent: CSFundamentals.Algorithms.Search
  children:
  - CSFundamentals.Algorithms.Search.JumpSearch.Search``1(System.Collections.Generic.List{``0},``0)
  langs:
  - csharp
  - vb
  name: JumpSearch
  nameWithType: JumpSearch
  fullName: CSFundamentals.Algorithms.Search.JumpSearch
  type: Class
  source:
    remote:
      path: Source/Algorithms/Search/JumpSearch.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: JumpSearch
    path: ../Algorithms/Search/JumpSearch.cs
    startLine: 29
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Search
  summary: "\nImplements Jump search algorithm for finding a specific value in a sorted array.\n"
  example: []
  syntax:
    content: public class JumpSearch
    content.vb: Public Class JumpSearch
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.Algorithms.Search.JumpSearch.Search``1(System.Collections.Generic.List{``0},``0)
  commentId: M:CSFundamentals.Algorithms.Search.JumpSearch.Search``1(System.Collections.Generic.List{``0},``0)
  id: Search``1(System.Collections.Generic.List{``0},``0)
  parent: CSFundamentals.Algorithms.Search.JumpSearch
  langs:
  - csharp
  - vb
  name: Search<T>(List<T>, T)
  nameWithType: JumpSearch.Search<T>(List<T>, T)
  fullName: CSFundamentals.Algorithms.Search.JumpSearch.Search<T>(System.Collections.Generic.List<T>, T)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Search/JumpSearch.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search
    path: ../Algorithms/Search/JumpSearch.cs
    startLine: 38
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Search
  summary: "\nPerforms a jumpSearch on a list of integers to find the <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>. \nNotice that only works if the given array is sorted. \n"
  example: []
  syntax:
    content: >-
      [Algorithm(AlgorithmType.Search, "JumpSearch", Assumptions = "Array is sorted with an ascending order.")]

      [SpaceComplexity("O(1)", false, InPlace = true)]

      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "o(√n)")]

      [TimeComplexity(Case.Average, "O(√n)")]

      public static int Search<T>(List<T> sortedList, T key)

          where T : IComparable<T>
    parameters:
    - id: sortedList
      type: System.Collections.Generic.List{{T}}
      description: Specifies a sorted list of any comparable type.
    - id: key
      type: '{T}'
      description: 'Specifies the value the method is searching for. '
    typeParameters:
    - id: T
    return:
      type: System.Int32
      description: 'The index of the <code data-dev-comment-type="paramref" class="paramref">key</code> in the array, and -1 if it does not exist in the array. '
    content.vb: >-
      <Algorithm(AlgorithmType.Search, "JumpSearch", Assumptions:="Array is sorted with an ascending order.")>

      <SpaceComplexity("O(1)", False, InPlace:=True)>

      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "o(√n)")>

      <TimeComplexity( Case.Average, "O(√n)")>

      Public Shared Function Search(Of T As IComparable(Of T))(sortedList As List(Of T), key As T) As Integer
  overload: CSFundamentals.Algorithms.Search.JumpSearch.Search*
  attributes:
  - type: CSFundamentals.Decoration.AlgorithmAttribute
    ctor: CSFundamentals.Decoration.AlgorithmAttribute.#ctor(CSFundamentals.Decoration.AlgorithmType,System.String)
    arguments:
    - type: CSFundamentals.Decoration.AlgorithmType
      value: 2
    - type: System.String
      value: JumpSearch
    namedArguments:
    - name: Assumptions
      type: System.String
      value: Array is sorted with an ascending order.
  - type: CSFundamentals.Decoration.SpaceComplexityAttribute
    ctor: CSFundamentals.Decoration.SpaceComplexityAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: O(1)
    - type: System.Boolean
      value: false
    namedArguments:
    - name: InPlace
      type: System.Boolean
      value: true
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: o(√n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(√n)
  nameWithType.vb: JumpSearch.Search(Of T)(List(Of T), T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.Search.JumpSearch.Search(Of T)(System.Collections.Generic.List(Of T), T)
  name.vb: Search(Of T)(List(Of T), T)
references:
- uid: CSFundamentals.Algorithms.Search
  commentId: N:CSFundamentals.Algorithms.Search
  name: CSFundamentals.Algorithms.Search
  nameWithType: CSFundamentals.Algorithms.Search
  fullName: CSFundamentals.Algorithms.Search
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.Algorithms.Search.JumpSearch.Search*
  commentId: Overload:CSFundamentals.Algorithms.Search.JumpSearch.Search
  name: Search
  nameWithType: JumpSearch.Search
  fullName: CSFundamentals.Algorithms.Search.JumpSearch.Search
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: T
  name: T
  nameWithType: T
  fullName: T
