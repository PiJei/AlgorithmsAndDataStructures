### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  id: BinaryTreeNode`3
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  children:
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor(`1,`2)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  langs:
  - csharp
  - vb
  name: BinaryTreeNode<TNode, TKey, TValue>
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BinaryTreeNode
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 31
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nImplements a base binary tree node. \n"
  example: []
  syntax:
    content: 'public abstract class BinaryTreeNode<TNode, TKey, TValue> : IBinaryTreeNode<TNode, TKey, TValue>, IComparable<TNode> where TNode : IBinaryTreeNode<TNode, TKey, TValue> where TKey : IComparable<TKey>'
    typeParameters:
    - id: TNode
      description: 'Type of a binary tree node. '
    - id: TKey
      description: 'Type of the key stored in the node. '
    - id: TValue
      description: 'Type of the value stored in the node. '
    content.vb: >-
      Public MustInherit Class BinaryTreeNode(Of TNode As IBinaryTreeNode(Of TNode, TKey, TValue), TKey As IComparable(Of TKey), TValue)
          Implements IBinaryTreeNode(Of TNode, TKey, TValue), IComparable(Of TNode)
  inheritance:
  - System.Object
  derivedClasses:
  - CSFundamentals.DataStructures.Trees.Binary.AVLTreeNode`2
  - CSFundamentals.DataStructures.Trees.Binary.BinarySearchTreeNode`2
  - CSFundamentals.DataStructures.Trees.Binary.RedBlackTreeNode`2
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  - System.IComparable{{TNode}}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: BinaryTreeNode(Of TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  id: IsNill
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsNill
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsNill
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsNill
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 40
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nSpecifies whether the node is a sentinel node. \n"
  example: []
  syntax:
    content: public bool IsNill { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsNill As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsNill
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsNill
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  id: Key
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Key
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Key
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 45
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the key stored in the node. \n"
  example: []
  syntax:
    content: public TKey Key { get; set; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Public Property Key As TKey
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Key
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Key
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  id: Value
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Value
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Value
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 50
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the value stored in the node. \n"
  example: []
  syntax:
    content: public TValue Value { get; set; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Public Property Value As TValue
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Value
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: BinaryTreeNode()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 55
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nParameter-less constructor. \n"
  example: []
  syntax:
    content: public BinaryTreeNode()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor(`1,`2)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor(`1,`2)
  id: '#ctor(`1,`2)'
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: BinaryTreeNode(TKey, TValue)
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode(TKey, TValue)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode(TKey, TValue)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 64
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nConstructor. \n"
  example: []
  syntax:
    content: public BinaryTreeNode(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: 'The key to be stored in the node. '
    - id: value
      type: '{TValue}'
      description: 'The value to be stored in the node. '
    content.vb: Public Sub New(key As TKey, value As TValue)
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode(TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  id: LeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: LeftChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LeftChild
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 73
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the left child of the current node. \n"
  example: []
  syntax:
    content: public abstract TNode LeftChild { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Public MustOverride Property LeftChild As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.LeftChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  id: RightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: RightChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.RightChild
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RightChild
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 78
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the right child of the current node. \n"
  example: []
  syntax:
    content: public abstract TNode RightChild { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Public MustOverride Property RightChild As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.RightChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).RightChild
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  id: Parent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Parent
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Parent
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 83
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs a reference to the parent of the current node. \n"
  example: []
  syntax:
    content: public abstract TNode Parent { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Public MustOverride Property Parent As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Parent
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Parent
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  id: IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsLeaf()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeaf()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeaf
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 89
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks whether the current node is a leaf node. A node is leaf if it has no children. \n"
  example: []
  syntax:
    content: public bool IsLeaf()
    return:
      type: System.Boolean
      description: 'True if the current node is leaf, and false otherwise. '
    content.vb: Public Function IsLeaf As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  id: IsLeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsLeftChild()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeftChild
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 102
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks to see if the node is the left child of its parent.\n"
  example: []
  syntax:
    content: public bool IsLeftChild()
    return:
      type: System.Boolean
      description: True in case the node is the left child of its parent, and false otherwise.
    content.vb: Public Function IsLeftChild As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsLeftChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  id: IsRightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsRightChild()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRightChild
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 126
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks to see if the node is the right child of its parent. \n"
  example: []
  syntax:
    content: public bool IsRightChild()
    return:
      type: System.Boolean
      description: True in case the node is the right child of its parent, and false otherwise.
    content.vb: Public Function IsRightChild As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsRightChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  id: IsRoot
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsRoot()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRoot()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRoot
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 150
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks whether the current node is the root of the tree. A node is root if it has no parent. \n"
  example: []
  syntax:
    content: public bool IsRoot()
    return:
      type: System.Boolean
      description: True in case the current node is the root, and false otherwise.
    content.vb: Public Function IsRoot As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRoot()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRoot()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  id: GetUncle
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetUncle()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetUncle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetUncle()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetUncle
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 164
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nGets the uncle of the current node. Uncle is the sibling of the parent.\n"
  example: []
  syntax:
    content: public TNode GetUncle()
    return:
      type: '{TNode}'
      description: Uncle node.
    content.vb: Public Function GetUncle As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetUncle()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetUncle()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  id: GetSibling
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetSibling()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetSibling()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetSibling
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 191
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nGets the sibling of the current node.\n"
  example: []
  syntax:
    content: public TNode GetSibling()
    return:
      type: '{TNode}'
      description: Sibling node.
    content.vb: Public Function GetSibling As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetSibling()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetSibling()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  id: GetGrandParent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetGrandParent()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetGrandParent
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 210
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nGets the grandparent of the current node. GrandParent is the parent of the parent. \n"
  example: []
  syntax:
    content: public TNode GetGrandParent()
    return:
      type: '{TNode}'
      description: 'Grand parent node. '
    content.vb: Public Function GetGrandParent As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  id: FormsLine
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: FormsLine()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsLine()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsLine()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: FormsLine
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 229
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks whether the node forms a line with its parent and grandparent. \nNotice a line needs exactly 3 nodes. \n"
  example: []
  syntax:
    content: public bool FormsLine()
    return:
      type: System.Boolean
    content.vb: Public Function FormsLine As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsLine()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsLine()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  id: FormsTriangle
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: FormsTriangle()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: FormsTriangle
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 253
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks whether the node forms a triangle with its parent and grandparent.\nNotice a triangle needs exactly 3 nodes.\n"
  example: []
  syntax:
    content: public bool FormsTriangle()
    return:
      type: System.Boolean
    content.vb: Public Function FormsTriangle As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo(`0)
  id: CompareTo(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: CompareTo(TNode)
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.CompareTo(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.CompareTo(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: CompareTo
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 278
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nCompares current node to another node. \n"
  example: []
  syntax:
    content: public int CompareTo(TNode other)
    parameters:
    - id: other
      type: '{TNode}'
      description: 'A binary tree node. '
    return:
      type: System.Int32
      description: '0 if the current node is equal to the other node, 1 if the current node is bigger and -1 otherwise. '
    content.vb: Public Function CompareTo(other As TNode) As Integer
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo*
  implements:
  - System.IComparable{{TNode}}.CompareTo({TNode})
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).CompareTo(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).CompareTo(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  id: IsComplete
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsComplete()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsComplete()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsComplete()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsComplete
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 287
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nChecks whether the current node is complete. A binary tree node is complete if it has both left and right children.\n"
  example: []
  syntax:
    content: public bool IsComplete()
    return:
      type: System.Boolean
      description: True in case the current node is complete, and false otherwise.
    content.vb: Public Function IsComplete As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsComplete()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsComplete()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  id: GetChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChildren
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 300
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nGets the immediate not-null children of the current node, the collection contains left and right children thus. \n"
  example: []
  syntax:
    content: public List<TNode> GetChildren()
    return:
      type: System.Collections.Generic.List{{TNode}}
      description: List of the immediate direct children of the current node.
    content.vb: Public Function GetChildren As List(Of TNode)
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren*
  implements:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.GetChildren
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  id: GetGrandChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetGrandChildren()
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetGrandChildren
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 318
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nGets the immediate grand children of a node. This is the children of the children of the node.\n"
  example: []
  syntax:
    content: public List<TNode> GetGrandChildren()
    return:
      type: System.Collections.Generic.List{{TNode}}
      description: The list of grand children of the node.
    content.vb: Public Function GetGrandChildren As List(Of TNode)
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals(`0)
  id: Equals(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Equals(TNode)
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Equals(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Equals(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Equals
    path: ../DataStructures/Trees/Binary/API/BinaryTreeNode.cs
    startLine: 339
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nCompares the current node to <code data-dev-comment-type=\"paramref\" class=\"paramref\">other</code> node for equality. \n"
  example: []
  syntax:
    content: public bool Equals(TNode other)
    parameters:
    - id: other
      type: '{TNode}'
      description: 'A binary tree node. '
    return:
      type: System.Boolean
      description: 'True if they are equal and false otherwise. '
    content.vb: Public Function Equals(other As TNode) As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals*
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Equals(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Equals(TNode)
references:
- uid: CSFundamentals.DataStructures.Trees.Binary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Binary.API
  name: CSFundamentals.DataStructures.Trees.Binary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Binary.API
  fullName: CSFundamentals.DataStructures.Trees.Binary.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  name: IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{TNode}}
  commentId: T:System.IComparable{`0}
  parent: System
  definition: System.IComparable`1
  name: IComparable<TNode>
  nameWithType: IComparable<TNode>
  fullName: System.IComparable<TNode>
  nameWithType.vb: IComparable(Of TNode)
  fullName.vb: System.IComparable(Of TNode)
  name.vb: IComparable(Of TNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  name: IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
    name: IBinaryTreeNode
    nameWithType: IBinaryTreeNode
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsNill
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.IsNill
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Key
  name: Key
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Key
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.Key
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  name: Key
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Key
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  name: Key
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Key
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Value
  name: Value
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Value
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.Value
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  name: Value
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Value
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  name: Value
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Value
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.#ctor
  name: BinaryTreeNode
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.BinaryTreeNode
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).BinaryTreeNode
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.LeftChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.LeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.RightChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.RightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Parent
  name: Parent
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Parent
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.Parent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  name: Parent
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Parent
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  name: Parent
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Parent
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeaf
  name: IsLeaf
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeaf
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeaf
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeaf
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsLeftChild
  name: IsLeftChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.IsLeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  name: IsLeftChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  name: IsLeftChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
    name: IsLeftChild
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRightChild
  name: IsRightChild
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.IsRightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  name: IsRightChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  name: IsRightChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
    name: IsRightChild
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsRoot
  name: IsRoot
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsRoot
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsRoot
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsRoot
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsRoot
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetUncle
  name: GetUncle
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetUncle
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetUncle
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetUncle
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetUncle
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetSibling
  name: GetSibling
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetSibling
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetSibling
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetSibling
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandParent
  name: GetGrandParent
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandParent
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandParent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsLine
  name: FormsLine
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsLine
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsLine
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsLine
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsLine
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.FormsTriangle
  name: FormsTriangle
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.FormsTriangle
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).FormsTriangle
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.CompareTo
  name: CompareTo
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.CompareTo
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.CompareTo
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).CompareTo
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).CompareTo
- uid: System.IComparable{{TNode}}.CompareTo({TNode})
  commentId: M:System.IComparable{`0}.CompareTo(`0)
  parent: System.IComparable{{TNode}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: IComparable<TNode>.CompareTo(TNode)
  fullName: System.IComparable<TNode>.CompareTo(TNode)
  nameWithType.vb: IComparable(Of TNode).CompareTo(TNode)
  fullName.vb: System.IComparable(Of TNode).CompareTo(TNode)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<TNode>.CompareTo
    fullName: System.IComparable<TNode>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of TNode).CompareTo
    fullName: System.IComparable(Of TNode).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.IsComplete
  name: IsComplete
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.IsComplete
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.IsComplete
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).IsComplete
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).IsComplete
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetChildren
  name: GetChildren
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetChildren
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetChildren
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetChildren
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{`0,`1,`2}.GetChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode{{TNode},{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  name: GetChildren()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TNode}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TNode>
  nameWithType: List<TNode>
  fullName: System.Collections.Generic.List<TNode>
  nameWithType.vb: List(Of TNode)
  fullName.vb: System.Collections.Generic.List(Of TNode)
  name.vb: List(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  name: GetChildren()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
    name: GetChildren
    nameWithType: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
    fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.GetGrandChildren
  name: GetGrandChildren
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.GetGrandChildren
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).GetGrandChildren
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode`3.Equals
  name: Equals
  nameWithType: BinaryTreeNode<TNode, TKey, TValue>.Equals
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode<TNode, TKey, TValue>.Equals
  nameWithType.vb: BinaryTreeNode(Of TNode, TKey, TValue).Equals
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinaryTreeNode(Of TNode, TKey, TValue).Equals
