### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.GraphTraversal.Dijkstra
  commentId: T:CSFundamentals.Algorithms.GraphTraversal.Dijkstra
  id: Dijkstra
  parent: CSFundamentals.Algorithms.GraphTraversal
  children:
  - CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot``1(CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0})
  langs:
  - csharp
  - vb
  name: Dijkstra
  nameWithType: Dijkstra
  fullName: CSFundamentals.Algorithms.GraphTraversal.Dijkstra
  type: Class
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/Dijkstra.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Dijkstra
    path: ../Algorithms/GraphTraversal/Dijkstra.cs
    startLine: 30
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nImplements Dijkstra&apos;s algorithm for finding shortest paths from a given node to all other nodes in a graph.\n"
  example: []
  syntax:
    content: public class Dijkstra
    content.vb: Public Class Dijkstra
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot``1(CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0})
  commentId: M:CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot``1(CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0})
  id: GetShortestDistancesFromRoot``1(CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0})
  parent: CSFundamentals.Algorithms.GraphTraversal.Dijkstra
  langs:
  - csharp
  - vb
  name: GetShortestDistancesFromRoot<TValue>(GraphNode<TValue>)
  nameWithType: Dijkstra.GetShortestDistancesFromRoot<TValue>(GraphNode<TValue>)
  fullName: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot<TValue>(CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>)
  type: Method
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/Dijkstra.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetShortestDistancesFromRoot
    path: ../Algorithms/GraphTraversal/Dijkstra.cs
    startLine: 37
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nImplements Dijkstra&apos;s ShortestPath algorithm using MinBinaryHeap\n"
  example: []
  syntax:
    content: >-
      [Algorithm(AlgorithmType.GraphRouteSearch, "Dijkstra's shortest path", IsGreedy = true)]

      [SpaceComplexity("O(3V)", false, InPlace = false)]

      [TimeComplexity(Case.Average, "O((E+V)Log(V))")]

      public static List<GraphNode<TValue>> GetShortestDistancesFromRoot<TValue>(GraphNode<TValue> root)
    parameters:
    - id: root
      type: CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}}
      description: 'Specifies a node from which we want to compute shortest paths to all the other nodes in the graph. '
    typeParameters:
    - id: TValue
    return:
      type: System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}}}
      description: 'All the nodes in the graph, in the order that they were visited with their shortest distance from the root computed. '
    content.vb: >-
      <Algorithm(AlgorithmType.GraphRouteSearch, "Dijkstra's shortest path", IsGreedy:=True)>

      <SpaceComplexity("O(3V)", False, InPlace:=False)>

      <TimeComplexity( Case.Average, "O((E+V)Log(V))")>

      Public Shared Function GetShortestDistancesFromRoot(Of TValue)(root As GraphNode(Of TValue)) As List(Of GraphNode(Of TValue))
  overload: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot*
  attributes:
  - type: CSFundamentals.Decoration.AlgorithmAttribute
    ctor: CSFundamentals.Decoration.AlgorithmAttribute.#ctor(CSFundamentals.Decoration.AlgorithmType,System.String)
    arguments:
    - type: CSFundamentals.Decoration.AlgorithmType
      value: 5
    - type: System.String
      value: Dijkstra's shortest path
    namedArguments:
    - name: IsGreedy
      type: System.Boolean
      value: true
  - type: CSFundamentals.Decoration.SpaceComplexityAttribute
    ctor: CSFundamentals.Decoration.SpaceComplexityAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: O(3V)
    - type: System.Boolean
      value: false
    namedArguments:
    - name: InPlace
      type: System.Boolean
      value: false
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O((E+V)Log(V))
  nameWithType.vb: Dijkstra.GetShortestDistancesFromRoot(Of TValue)(GraphNode(Of TValue))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot(Of TValue)(CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue))
  name.vb: GetShortestDistancesFromRoot(Of TValue)(GraphNode(Of TValue))
references:
- uid: CSFundamentals.Algorithms.GraphTraversal
  commentId: N:CSFundamentals.Algorithms.GraphTraversal
  name: CSFundamentals.Algorithms.GraphTraversal
  nameWithType: CSFundamentals.Algorithms.GraphTraversal
  fullName: CSFundamentals.Algorithms.GraphTraversal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot
  name: GetShortestDistancesFromRoot
  nameWithType: Dijkstra.GetShortestDistancesFromRoot
  fullName: CSFundamentals.Algorithms.GraphTraversal.Dijkstra.GetShortestDistancesFromRoot
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}}
  commentId: T:CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0}
  parent: CSFundamentals.Algorithms.GraphTraversal
  definition: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  name: GraphNode<TValue>
  nameWithType: GraphNode<TValue>
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>
  nameWithType.vb: GraphNode(Of TValue)
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)
  name.vb: GraphNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}}}
  commentId: T:System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphNode{``0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GraphNode<TValue>>
  nameWithType: List<GraphNode<TValue>>
  fullName: System.Collections.Generic.List<CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>>
  nameWithType.vb: List(Of GraphNode(Of TValue))
  fullName.vb: System.Collections.Generic.List(Of CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue))
  name.vb: List(Of GraphNode(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  commentId: T:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  parent: CSFundamentals.Algorithms.GraphTraversal
  name: GraphNode<TValue>
  nameWithType: GraphNode<TValue>
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>
  nameWithType.vb: GraphNode(Of TValue)
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)
  name.vb: GraphNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
