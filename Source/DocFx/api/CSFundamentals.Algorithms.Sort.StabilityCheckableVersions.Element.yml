### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  commentId: T:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  id: Element
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  children:
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(System.Int32,System.Int32)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move(System.Int32)
  - CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
  langs:
  - csharp
  - vb
  name: Element
  nameWithType: Element
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  type: Class
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Element
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 27
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: 'public class Element : IEquatable<Element>, IComparable<Element>'
    content.vb: >-
      Public Class Element

          Implements IEquatable(Of Element), IComparable(Of Element)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  - System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
  commentId: P:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
  id: Value
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Element.Value
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
  type: Property
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Value
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 32
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\nIs the value stored in this object. \n"
  example: []
  syntax:
    content: public int Value { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Value As Integer
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
  commentId: P:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
  id: FirstArrayIndex
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: FirstArrayIndex
  nameWithType: Element.FirstArrayIndex
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
  type: Property
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: FirstArrayIndex
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 37
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public int FirstArrayIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property FirstArrayIndex As Integer
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
  commentId: P:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
  id: LatestArrayIndex
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: LatestArrayIndex
  nameWithType: Element.LatestArrayIndex
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
  type: Property
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LatestArrayIndex
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 42
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public int LatestArrayIndex { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property LatestArrayIndex As Integer
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(System.Int32,System.Int32)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: Element(Int32, Int32)
  nameWithType: Element.Element(Int32, Int32)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Element(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public Element(int value, int firstArrayIndex)
    parameters:
    - id: value
      type: System.Int32
      description: ''
    - id: firstArrayIndex
      type: System.Int32
      description: ''
    content.vb: Public Sub New(value As Integer, firstArrayIndex As Integer)
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  id: '#ctor(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)'
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: Element(Element)
  nameWithType: Element.Element(Element)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Element(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  type: Constructor
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 59
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public Element(Element e)
    parameters:
    - id: e
      type: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
      description: ''
    content.vb: Public Sub New(e As Element)
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move(System.Int32)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move(System.Int32)
  id: Move(System.Int32)
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: Move(Int32)
  nameWithType: Element.Move(Int32)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move(System.Int32)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Move
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 70
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public void Move(int newIndex)
    parameters:
    - id: newIndex
      type: System.Int32
      description: ''
    content.vb: Public Sub Move(newIndex As Integer)
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  id: Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: Equals(Element)
  nameWithType: Element.Equals(Element)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Equals
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 80
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public bool Equals(Element other)
    parameters:
    - id: other
      type: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(other As Element) As Boolean
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals*
  implements:
  - System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode
  id: GetHashCode
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Element.GetHashCode()
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode()
  type: Method
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetHashCode
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 90
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\n\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  id: IsStable(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: IsStable(Element)
  nameWithType: Element.IsStable(Element)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsStable
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 101
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\nGiven two Elements, if the order between their new array index is the same order between their old array index, the element has been stable.\n"
  example: []
  syntax:
    content: public bool IsStable(Element other)
    parameters:
    - id: other
      type: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsStable(other As Element) As Boolean
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  id: CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  langs:
  - csharp
  - vb
  name: CompareTo(Element)
  nameWithType: Element.CompareTo(Element)
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  type: Method
  source:
    remote:
      path: Source/Algorithms/Sort/StabilityCheckableVersions/Element.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: CompareTo
    path: ../Algorithms/Sort/StabilityCheckableVersions/Element.cs
    startLine: 116
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  summary: "\nthis Less than other : return less than 0 , this == other return 0, this > other return > 0 \n"
  example: []
  syntax:
    content: public int CompareTo(Element other)
    parameters:
    - id: other
      type: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
      description: 'Specifies an object of type Element. '
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CompareTo(other As Element) As Integer
  overload: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo*
  implements:
  - System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  commentId: N:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  name: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  nameWithType: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  commentId: T:System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Element>
  nameWithType: IEquatable<Element>
  fullName: System.IEquatable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>
  nameWithType.vb: IEquatable(Of Element)
  fullName.vb: System.IEquatable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  name.vb: IEquatable(Of Element)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  commentId: T:System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Element>
  nameWithType: IComparable<Element>
  fullName: System.IComparable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>
  nameWithType.vb: IComparable(Of Element)
  fullName.vb: System.IComparable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  name.vb: IComparable(Of Element)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
  name: Value
  nameWithType: Element.Value
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Value
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
  name: FirstArrayIndex
  nameWithType: Element.FirstArrayIndex
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.FirstArrayIndex
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
  name: LatestArrayIndex
  nameWithType: Element.LatestArrayIndex
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.LatestArrayIndex
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.#ctor
  name: Element
  nameWithType: Element.Element
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Element
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  commentId: T:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  parent: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions
  name: Element
  nameWithType: Element
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move
  name: Move
  nameWithType: Element.Move
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Move
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals
  name: Equals
  nameWithType: Element.Equals
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.Equals
- uid: System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  parent: System.IEquatable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Element)
  nameWithType: IEquatable<Element>.Equals(Element)
  fullName: System.IEquatable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>.Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  nameWithType.vb: IEquatable(Of Element).Equals(Element)
  fullName.vb: System.IEquatable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element).Equals(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Element>.Equals
    fullName: System.IEquatable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Element).Equals
    fullName: System.IEquatable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode
  name: GetHashCode
  nameWithType: Element.GetHashCode
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.GetHashCode
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable
  name: IsStable
  nameWithType: Element.IsStable
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.IsStable
- uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo*
  commentId: Overload:CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo
  name: CompareTo
  nameWithType: Element.CompareTo
  fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element.CompareTo
- uid: System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  commentId: M:System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  parent: System.IComparable{CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Element)
  nameWithType: IComparable<Element>.CompareTo(Element)
  fullName: System.IComparable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>.CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  nameWithType.vb: IComparable(Of Element).CompareTo(Element)
  fullName.vb: System.IComparable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element).CompareTo(CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Element>.CompareTo
    fullName: System.IComparable<CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Element).CompareTo
    fullName: System.IComparable(Of CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
    name: Element
    nameWithType: Element
    fullName: CSFundamentals.Algorithms.Sort.StabilityCheckableVersions.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
