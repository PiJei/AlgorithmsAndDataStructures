### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTree
  commentId: T:CSFundamentals.DataStructures.StringStructures.SuffixTree
  id: SuffixTree
  parent: CSFundamentals.DataStructures.StringStructures
  children:
  - CSFundamentals.DataStructures.StringStructures.SuffixTree.Build(System.String)
  - CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert(CSFundamentals.DataStructures.StringStructures.SuffixTreeNode,System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: SuffixTree
  nameWithType: SuffixTree
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTree
  type: Class
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffixTree.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: SuffixTree
    path: ../DataStructures/StringStructures/SuffixTree.cs
    startLine: 33
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nImplements a SuffixTree also known as a PAT. A DFS search of the tree should give the collection of all the suffixes of the string. \nThis implementation is Naive: not optimized. \n"
  example: []
  syntax:
    content: >-
      [DataStructure("SuffixTree(aka. PAT)")]

      public class SuffixTree
    content.vb: >-
      <DataStructure("SuffixTree(aka. PAT)")>

      Public Class SuffixTree
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: CSFundamentals.Decoration.DataStructureAttribute
    ctor: CSFundamentals.Decoration.DataStructureAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SuffixTree(aka. PAT)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTree.Build(System.String)
  commentId: M:CSFundamentals.DataStructures.StringStructures.SuffixTree.Build(System.String)
  id: Build(System.String)
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTree
  langs:
  - csharp
  - vb
  name: Build(String)
  nameWithType: SuffixTree.Build(String)
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTree.Build(System.String)
  type: Method
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffixTree.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Build
    path: ../DataStructures/StringStructures/SuffixTree.cs
    startLine: 41
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nGiven a string, builds its suffix tree. \n"
  example: []
  syntax:
    content: public static SuffixTreeNode Build(string text)
    parameters:
    - id: text
      type: System.String
      description: 'Specifies the string for which the suffix tree is being built. '
    return:
      type: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
      description: 'The root of the suffix tree. '
    content.vb: Public Shared Function Build(text As String) As SuffixTreeNode
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTree.Build*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert(CSFundamentals.DataStructures.StringStructures.SuffixTreeNode,System.String,System.Int32)
  commentId: M:CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert(CSFundamentals.DataStructures.StringStructures.SuffixTreeNode,System.String,System.Int32)
  id: Insert(CSFundamentals.DataStructures.StringStructures.SuffixTreeNode,System.String,System.Int32)
  parent: CSFundamentals.DataStructures.StringStructures.SuffixTree
  langs:
  - csharp
  - vb
  name: Insert(SuffixTreeNode, String, Int32)
  nameWithType: SuffixTree.Insert(SuffixTreeNode, String, Int32)
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert(CSFundamentals.DataStructures.StringStructures.SuffixTreeNode, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/StringStructures/SuffixTree.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/StringStructures/SuffixTree.cs
    startLine: 71
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.StringStructures
  summary: "\nInserts the given suffix in the tree. Notice that the suffix is not necessarily inserted as a while. On the traversal of the tree, the intermediate nodes that have common prefixes with these suffix, make the suffix to break down. \n"
  example: []
  syntax:
    content: public static void Insert(SuffixTreeNode root, string suffix, int startIndex)
    parameters:
    - id: root
      type: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
      description: 'Specifies the root node of a suffix tree. '
    - id: suffix
      type: System.String
      description: 'Specifies the suffix string that should be inserted in the suffix tree. '
    - id: startIndex
      type: System.Int32
      description: 'Specifies the start index of the suffix in its container string. '
    content.vb: Public Shared Sub Insert(root As SuffixTreeNode, suffix As String, startIndex As Integer)
  overload: CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: CSFundamentals.DataStructures.StringStructures
  commentId: N:CSFundamentals.DataStructures.StringStructures
  name: CSFundamentals.DataStructures.StringStructures
  nameWithType: CSFundamentals.DataStructures.StringStructures
  fullName: CSFundamentals.DataStructures.StringStructures
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTree.Build*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTree.Build
  name: Build
  nameWithType: SuffixTree.Build
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTree.Build
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  commentId: T:CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
  parent: CSFundamentals.DataStructures.StringStructures
  name: SuffixTreeNode
  nameWithType: SuffixTreeNode
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTreeNode
- uid: CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert*
  commentId: Overload:CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert
  name: Insert
  nameWithType: SuffixTree.Insert
  fullName: CSFundamentals.DataStructures.StringStructures.SuffixTree.Insert
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
