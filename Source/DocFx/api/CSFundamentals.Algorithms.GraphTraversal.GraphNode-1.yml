### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  commentId: T:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  id: GraphNode`1
  parent: CSFundamentals.Algorithms.GraphTraversal
  children:
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor(`0)
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{`0})
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MaxValue
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MinValue
  - CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value
  langs:
  - csharp
  - vb
  name: GraphNode<TValue>
  nameWithType: GraphNode<TValue>
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>
  type: Class
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GraphNode
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 29
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nImplements a generic graph node. \n"
  example: []
  syntax:
    content: 'public class GraphNode<TValue> : IComparable<GraphNode<TValue>>'
    typeParameters:
    - id: TValue
      description: 'Is the type of the value stored in the node. '
    content.vb: >-
      Public Class GraphNode(Of TValue)
          Implements IComparable(Of GraphNode(Of TValue))
  inheritance:
  - System.Object
  implements:
  - System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: GraphNode(Of TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)
  name.vb: GraphNode(Of TValue)
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value
  commentId: P:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value
  id: Value
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: GraphNode<TValue>.Value
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.Value
  type: Property
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Value
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 34
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nThe value stored in the node. \n"
  example: []
  syntax:
    content: public TValue Value { get; set; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Public Property Value As TValue
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value*
  nameWithType.vb: GraphNode(Of TValue).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).Value
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents
  commentId: P:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents
  id: Adjacents
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: Adjacents
  nameWithType: GraphNode<TValue>.Adjacents
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.Adjacents
  type: Property
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Adjacents
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 39
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nThe list of all the adjacent nodes of this node. It means all the nodes that are connected to this node by a direct edge.\n"
  example: []
  syntax:
    content: public List<GraphEdge<TValue>> Adjacents { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphEdge{{TValue}}}
    content.vb: Public Property Adjacents As List(Of GraphEdge(Of TValue))
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents*
  nameWithType.vb: GraphNode(Of TValue).Adjacents
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).Adjacents
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot
  commentId: P:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot
  id: DistanceFromRoot
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: DistanceFromRoot
  nameWithType: GraphNode<TValue>.DistanceFromRoot
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.DistanceFromRoot
  type: Property
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DistanceFromRoot
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 44
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nIs the distance of this node from a node deemed as root (unlike trees graphs do not have a designated root)\n"
  example: []
  syntax:
    content: public int DistanceFromRoot { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property DistanceFromRoot As Integer
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot*
  nameWithType.vb: GraphNode(Of TValue).DistanceFromRoot
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).DistanceFromRoot
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted
  commentId: P:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted
  id: IsInserted
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: IsInserted
  nameWithType: GraphNode<TValue>.IsInserted
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.IsInserted
  type: Property
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsInserted
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nDetermines whether this node, in a particular instance of a traversal algorithm has been already visited : inserted in the queue/stack. \n"
  example: []
  syntax:
    content: public bool IsInserted { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsInserted As Boolean
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted*
  nameWithType.vb: GraphNode(Of TValue).IsInserted
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).IsInserted
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor(`0)
  commentId: M:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: GraphNode(TValue)
  nameWithType: GraphNode<TValue>.GraphNode(TValue)
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.GraphNode(TValue)
  type: Constructor
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 55
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public GraphNode(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: 'The value to be stored in the node. '
    content.vb: Public Sub New(value As TValue)
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor*
  nameWithType.vb: GraphNode(Of TValue).GraphNode(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).GraphNode(TValue)
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{`0})
  commentId: M:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{`0})
  id: CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{`0})
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: CompareTo(GraphNode<TValue>)
  nameWithType: GraphNode<TValue>.CompareTo(GraphNode<TValue>)
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>)
  type: Method
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: CompareTo
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 65
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nCompares this node to another node of type GraphNode.\n"
  example: []
  syntax:
    content: public int CompareTo(GraphNode<TValue> other)
    parameters:
    - id: other
      type: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
      description: A graph node
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CompareTo(other As GraphNode(Of TValue)) As Integer
  overload: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo*
  implements:
  - System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}})
  nameWithType.vb: GraphNode(Of TValue).CompareTo(GraphNode(Of TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue))
  name.vb: CompareTo(GraphNode(Of TValue))
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MinValue
  commentId: F:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MinValue
  id: MinValue
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: GraphNode<TValue>.MinValue
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.MinValue
  type: Field
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MinValue
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 98
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nSpecifies the minimum value for GraphNode type. \n"
  example: []
  syntax:
    content: public static readonly GraphNode<TValue> MinValue
    return:
      type: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    content.vb: Public Shared ReadOnly MinValue As GraphNode(Of TValue)
  nameWithType.vb: GraphNode(Of TValue).MinValue
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).MinValue
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MaxValue
  commentId: F:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.MaxValue
  id: MaxValue
  parent: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: GraphNode<TValue>.MaxValue
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.MaxValue
  type: Field
  source:
    remote:
      path: Source/Algorithms/GraphTraversal/GraphNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxValue
    path: ../Algorithms/GraphTraversal/GraphNode.cs
    startLine: 103
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.GraphTraversal
  summary: "\nSpecifies the maximum value for GraphNode type.\n"
  example: []
  syntax:
    content: public static readonly GraphNode<TValue> MaxValue
    return:
      type: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    content.vb: Public Shared ReadOnly MaxValue As GraphNode(Of TValue)
  nameWithType.vb: GraphNode(Of TValue).MaxValue
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).MaxValue
references:
- uid: CSFundamentals.Algorithms.GraphTraversal
  commentId: N:CSFundamentals.Algorithms.GraphTraversal
  name: CSFundamentals.Algorithms.GraphTraversal
  nameWithType: CSFundamentals.Algorithms.GraphTraversal
  fullName: CSFundamentals.Algorithms.GraphTraversal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}
  commentId: T:System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}
  parent: System
  definition: System.IComparable`1
  name: IComparable<GraphNode<TValue>>
  nameWithType: IComparable<GraphNode<TValue>>
  fullName: System.IComparable<CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>>
  nameWithType.vb: IComparable(Of GraphNode(Of TValue))
  fullName.vb: System.IComparable(Of CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue))
  name.vb: IComparable(Of GraphNode(Of TValue))
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Value
  name: Value
  nameWithType: GraphNode<TValue>.Value
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.Value
  nameWithType.vb: GraphNode(Of TValue).Value
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.Adjacents
  name: Adjacents
  nameWithType: GraphNode<TValue>.Adjacents
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.Adjacents
  nameWithType.vb: GraphNode(Of TValue).Adjacents
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).Adjacents
- uid: System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphEdge{{TValue}}}
  commentId: T:System.Collections.Generic.List{CSFundamentals.Algorithms.GraphTraversal.GraphEdge{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<GraphEdge<TValue>>
  nameWithType: List<GraphEdge<TValue>>
  fullName: System.Collections.Generic.List<CSFundamentals.Algorithms.GraphTraversal.GraphEdge<TValue>>
  nameWithType.vb: List(Of GraphEdge(Of TValue))
  fullName.vb: System.Collections.Generic.List(Of CSFundamentals.Algorithms.GraphTraversal.GraphEdge(Of TValue))
  name.vb: List(Of GraphEdge(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphEdge`1
    name: GraphEdge
    nameWithType: GraphEdge
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphEdge
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphEdge`1
    name: GraphEdge
    nameWithType: GraphEdge
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphEdge
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.DistanceFromRoot
  name: DistanceFromRoot
  nameWithType: GraphNode<TValue>.DistanceFromRoot
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.DistanceFromRoot
  nameWithType.vb: GraphNode(Of TValue).DistanceFromRoot
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).DistanceFromRoot
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.IsInserted
  name: IsInserted
  nameWithType: GraphNode<TValue>.IsInserted
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.IsInserted
  nameWithType.vb: GraphNode(Of TValue).IsInserted
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).IsInserted
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.#ctor
  name: GraphNode
  nameWithType: GraphNode<TValue>.GraphNode
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.GraphNode
  nameWithType.vb: GraphNode(Of TValue).GraphNode
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).GraphNode
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo*
  commentId: Overload:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1.CompareTo
  name: CompareTo
  nameWithType: GraphNode<TValue>.CompareTo
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>.CompareTo
  nameWithType.vb: GraphNode(Of TValue).CompareTo
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue).CompareTo
- uid: System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{{TValue}})
  commentId: M:System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode{`0})
  parent: System.IComparable{CSFundamentals.Algorithms.GraphTraversal.GraphNode`1}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(GraphNode<TValue>)
  nameWithType: IComparable<GraphNode<TValue>>.CompareTo(GraphNode<TValue>)
  fullName: System.IComparable<CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>>.CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>)
  nameWithType.vb: IComparable(Of GraphNode(Of TValue)).CompareTo(GraphNode(Of TValue))
  fullName.vb: System.IComparable(Of CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)).CompareTo(CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue))
  name.vb: CompareTo(GraphNode(Of TValue))
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<GraphNode<TValue>>.CompareTo
    fullName: System.IComparable<CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of GraphNode(Of TValue)).CompareTo
    fullName: System.IComparable(Of CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  commentId: T:CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
  parent: CSFundamentals.Algorithms.GraphTraversal
  name: GraphNode<TValue>
  nameWithType: GraphNode<TValue>
  fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode<TValue>
  nameWithType.vb: GraphNode(Of TValue)
  fullName.vb: CSFundamentals.Algorithms.GraphTraversal.GraphNode(Of TValue)
  name.vb: GraphNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.Algorithms.GraphTraversal.GraphNode`1
    name: GraphNode
    nameWithType: GraphNode
    fullName: CSFundamentals.Algorithms.GraphTraversal.GraphNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
