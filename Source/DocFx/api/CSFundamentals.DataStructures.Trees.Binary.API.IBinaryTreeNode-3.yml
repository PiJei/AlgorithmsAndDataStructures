### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  id: IBinaryTreeNode`3
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  children:
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  - CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  langs:
  - csharp
  - vb
  name: IBinaryTreeNode<TNode, TKey, TValue>
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>
  type: Interface
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IBinaryTreeNode
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 31
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nSpecifies an interface for nodes in any tree structure. \n"
  example: []
  syntax:
    content: 'public interface IBinaryTreeNode<TNode, TKey, TValue> : IComparable<TNode> where TKey : IComparable<TKey>'
    typeParameters:
    - id: TNode
      description: 'Is the type of the tree node. '
    - id: TKey
      description: 'Is the type of the keys in the tree nodes. '
    - id: TValue
      description: 'Is the type of the values in the tree nodes. '
    content.vb: >-
      Public Interface IBinaryTreeNode(Of TNode, TKey As IComparable(Of TKey), TValue)

          Inherits IComparable(Of TNode)
  inheritedMembers:
  - System.IComparable{{TNode}}.CompareTo({TNode})
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue)
  name.vb: IBinaryTreeNode(Of TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  id: IsNill
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsNill
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsNill
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 39
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIf set means the node contains no key-values, left or right children.\n"
  example: []
  syntax:
    content: bool IsNill { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Property IsNill As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  id: Key
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Key
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Key
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 44
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the key in a tree node. \n"
  example: []
  syntax:
    content: TKey Key { get; set; }
    parameters: []
    return:
      type: '{TKey}'
    content.vb: Property Key As TKey
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Key
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  id: Value
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Value
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Value
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 52
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the value (information) stored in a tree node. \n"
  remarks: "\nThis can be converted to a list of values alternatively, to handle duplicate keys. \n"
  example: []
  syntax:
    content: TValue Value { get; set; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: Property Value As TValue
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Value
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  id: LeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: LeftChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: LeftChild
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 57
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the left child of the node. \n"
  example: []
  syntax:
    content: TNode LeftChild { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Property LeftChild As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  id: RightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: RightChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RightChild
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 62
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the right child of the node. \n"
  example: []
  syntax:
    content: TNode RightChild { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Property RightChild As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  id: Parent
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Parent
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Parent
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 67
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the parent of the node.\n"
  example: []
  syntax:
    content: TNode Parent { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Property Parent As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Parent
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  id: IsLeftChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsLeftChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeftChild
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 73
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nCheck whether the current node is left child of its parent.\n"
  example: []
  syntax:
    content: bool IsLeftChild()
    return:
      type: System.Boolean
      description: True in case the current node is the left child of its parent, and false otherwise.
    content.vb: Function IsLeftChild As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  id: IsRightChild
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: IsRightChild()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRightChild
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 79
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nCheck whether the current node is right child of its parent.\n"
  example: []
  syntax:
    content: bool IsRightChild()
    return:
      type: System.Boolean
      description: 'True in case the current node is the right child of its parent, and false otherwise. '
    content.vb: Function IsRightChild As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild()
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  id: GetChildren
  parent: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3
  langs:
  - csharp
  - vb
  name: GetChildren()
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChildren
    path: ../DataStructures/Trees/Binary/API/IBinaryTreeNode.cs
    startLine: 85
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nReturns a list of the current node&apos;s children. \n"
  example: []
  syntax:
    content: List<TNode> GetChildren()
    return:
      type: System.Collections.Generic.List{{TNode}}
      description: ''
    content.vb: Function GetChildren As List(Of TNode)
  overload: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren*
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren()
references:
- uid: CSFundamentals.DataStructures.Trees.Binary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Binary.API
  name: CSFundamentals.DataStructures.Trees.Binary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Binary.API
  fullName: CSFundamentals.DataStructures.Trees.Binary.API
- uid: System.IComparable{{TNode}}.CompareTo({TNode})
  commentId: M:System.IComparable{`0}.CompareTo(`0)
  parent: System.IComparable{{TNode}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: IComparable<TNode>.CompareTo(TNode)
  fullName: System.IComparable<TNode>.CompareTo(TNode)
  nameWithType.vb: IComparable(Of TNode).CompareTo(TNode)
  fullName.vb: System.IComparable(Of TNode).CompareTo(TNode)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<TNode>.CompareTo
    fullName: System.IComparable<TNode>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of TNode).CompareTo
    fullName: System.IComparable(Of TNode).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{TNode}}
  commentId: T:System.IComparable{`0}
  parent: System
  definition: System.IComparable`1
  name: IComparable<TNode>
  nameWithType: IComparable<TNode>
  fullName: System.IComparable<TNode>
  nameWithType.vb: IComparable(Of TNode)
  fullName.vb: System.IComparable(Of TNode)
  name.vb: IComparable(Of TNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsNill
  name: IsNill
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsNill
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsNill
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Key
  name: Key
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Key
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Key
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Key
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Key
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Value
  name: Value
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Value
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Value
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Value
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.LeftChild
  name: LeftChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.LeftChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).LeftChild
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.RightChild
  name: RightChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.RightChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).RightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.Parent
  name: Parent
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.Parent
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.Parent
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).Parent
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).Parent
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsLeftChild
  name: IsLeftChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsLeftChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsLeftChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.IsRightChild
  name: IsRightChild
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.IsRightChild
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).IsRightChild
- uid: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode`3.GetChildren
  name: GetChildren
  nameWithType: IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode<TNode, TKey, TValue>.GetChildren
  nameWithType.vb: IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.IBinaryTreeNode(Of TNode, TKey, TValue).GetChildren
- uid: System.Collections.Generic.List{{TNode}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TNode>
  nameWithType: List<TNode>
  fullName: System.Collections.Generic.List<TNode>
  nameWithType.vb: List(Of TNode)
  fullName.vb: System.Collections.Generic.List(Of TNode)
  name.vb: List(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
