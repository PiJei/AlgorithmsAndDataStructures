### YamlMime:ManagedReference
items:
- uid: CSFundamentals.Algorithms.SubarraySearch.Naive
  commentId: T:CSFundamentals.Algorithms.SubarraySearch.Naive
  id: Naive
  parent: CSFundamentals.Algorithms.SubarraySearch
  children:
  - CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  - CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  langs:
  - csharp
  - vb
  name: Naive
  nameWithType: Naive
  fullName: CSFundamentals.Algorithms.SubarraySearch.Naive
  type: Class
  source:
    remote:
      path: Source/Algorithms/SubarraySearch/Naive.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Naive
    path: ../Algorithms/SubarraySearch/Naive.cs
    startLine: 27
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.SubarraySearch
  summary: "\nImplements a simple naive algorithm for searching if a sublist exists in a list. \n"
  example: []
  syntax:
    content: public class Naive
    content.vb: Public Class Naive
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  commentId: M:CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  id: Search_NaiveContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  parent: CSFundamentals.Algorithms.SubarraySearch.Naive
  langs:
  - csharp
  - vb
  name: Search_NaiveContiguousSublist(List<Int32>, List<Int32>)
  nameWithType: Naive.Search_NaiveContiguousSublist(List<Int32>, List<Int32>)
  fullName: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist(System.Collections.Generic.List<System.Int32>, System.Collections.Generic.List<System.Int32>)
  type: Method
  source:
    remote:
      path: Source/Algorithms/SubarraySearch/Naive.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search_NaiveContiguousSublist
    path: ../Algorithms/SubarraySearch/Naive.cs
    startLine: 36
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.SubarraySearch
  summary: "\nDetects whether parent list contains child list contiguously. For example list {1, 3, 7, 2, 10} contains sublist {7,2}, but does not contain {7,10}.\nEasier to implement this with linked lists due to the contiguous search. \n"
  example: []
  syntax:
    content: public static bool Search_NaiveContiguousSublist(List<int> list, List<int> subList)
    parameters:
    - id: list
      type: System.Collections.Generic.List{System.Int32}
      description: The list in which we are searching for a sublist.
    - id: subList
      type: System.Collections.Generic.List{System.Int32}
      description: The sublist
    return:
      type: System.Boolean
      description: 'True if the list contains the sublist, and false otherwise. '
    content.vb: Public Shared Function Search_NaiveContiguousSublist(list As List(Of Integer), subList As List(Of Integer)) As Boolean
  overload: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist*
  nameWithType.vb: Naive.Search_NaiveContiguousSublist(List(Of Int32), List(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist(System.Collections.Generic.List(Of System.Int32), System.Collections.Generic.List(Of System.Int32))
  name.vb: Search_NaiveContiguousSublist(List(Of Int32), List(Of Int32))
- uid: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  commentId: M:CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  id: Search_UnContiguousSublist(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})
  parent: CSFundamentals.Algorithms.SubarraySearch.Naive
  langs:
  - csharp
  - vb
  name: Search_UnContiguousSublist(List<Int32>, List<Int32>)
  nameWithType: Naive.Search_UnContiguousSublist(List<Int32>, List<Int32>)
  fullName: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist(System.Collections.Generic.List<System.Int32>, System.Collections.Generic.List<System.Int32>)
  type: Method
  source:
    remote:
      path: Source/Algorithms/SubarraySearch/Naive.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search_UnContiguousSublist
    path: ../Algorithms/SubarraySearch/Naive.cs
    startLine: 72
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.Algorithms.SubarraySearch
  summary: "\nSearches whether subList can be built from the elements in list, while respecting the order at which elements appear in list. \nFor example given list {3, 4, 1, 6, 7, 1, 8, 7}, can we build subList{1, 7}?\nYes, in several ways, indexes {2, 4} or {2, 7} or {5, 7}, we can build it in 3 different ways. \nThe approach this algorithm takes is to find the number of times the sublist can be built and returns true if this number higher than 0.\n"
  example: []
  syntax:
    content: public static bool Search_UnContiguousSublist(List<int> list, List<int> subList)
    parameters:
    - id: list
      type: System.Collections.Generic.List{System.Int32}
      description: The list in which we are searching for a sublist.
    - id: subList
      type: System.Collections.Generic.List{System.Int32}
      description: The sublist
    return:
      type: System.Boolean
      description: 'True if the list contains the sublist, and false otherwise. '
    content.vb: Public Shared Function Search_UnContiguousSublist(list As List(Of Integer), subList As List(Of Integer)) As Boolean
  overload: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist*
  nameWithType.vb: Naive.Search_UnContiguousSublist(List(Of Int32), List(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist(System.Collections.Generic.List(Of System.Int32), System.Collections.Generic.List(Of System.Int32))
  name.vb: Search_UnContiguousSublist(List(Of Int32), List(Of Int32))
references:
- uid: CSFundamentals.Algorithms.SubarraySearch
  commentId: N:CSFundamentals.Algorithms.SubarraySearch
  name: CSFundamentals.Algorithms.SubarraySearch
  nameWithType: CSFundamentals.Algorithms.SubarraySearch
  fullName: CSFundamentals.Algorithms.SubarraySearch
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist*
  commentId: Overload:CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist
  name: Search_NaiveContiguousSublist
  nameWithType: Naive.Search_NaiveContiguousSublist
  fullName: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_NaiveContiguousSublist
- uid: System.Collections.Generic.List{System.Int32}
  commentId: T:System.Collections.Generic.List{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Int32>
  nameWithType: List<Int32>
  fullName: System.Collections.Generic.List<System.Int32>
  nameWithType.vb: List(Of Int32)
  fullName.vb: System.Collections.Generic.List(Of System.Int32)
  name.vb: List(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist*
  commentId: Overload:CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist
  name: Search_UnContiguousSublist
  nameWithType: Naive.Search_UnContiguousSublist
  fullName: CSFundamentals.Algorithms.SubarraySearch.Naive.Search_UnContiguousSublist
