### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  id: MaxBinaryHeap`2
  parent: CSFundamentals.DataStructures.BinaryHeaps
  children:
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}})
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  langs:
  - csharp
  - vb
  name: MaxBinaryHeap<TKey, TValue>
  nameWithType: MaxBinaryHeap<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxBinaryHeap
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 34
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nImplements a Max Binary Heap, and its main operations.\n"
  example: []
  syntax:
    content: >-
      [DataStructure("MaxBinaryHeap")]

      public class MaxBinaryHeap<TKey, TValue> : BinaryHeapBase<TKey, TValue>, IBinaryHeap<TKey, TValue> where TKey : IComparable<TKey>
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <DataStructure("MaxBinaryHeap")>

      Public Class MaxBinaryHeap(Of TKey As IComparable(Of TKey), TValue)
          Inherits BinaryHeapBase(Of TKey, TValue)
          Implements IBinaryHeap(Of TKey, TValue)
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  implements:
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap{{TKey},{TValue}}
  inheritedMembers:
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Iteratively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Recursively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.Insert(System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryRemoveRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Recursively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleUp_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.HeapArray
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetLeftChildIndexInHeapArray(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetRightChildIndexInHeapArray(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetParentIndex(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetNodeLevel(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}},System.Collections.Generic.List{System.Int32},{TKey},System.Int32@)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}},System.Int32,System.Collections.Generic.List{System.Int32},{TKey},System.Int32@)
  - CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.FindIndex({TKey})
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: CSFundamentals.Decoration.DataStructureAttribute
    ctor: CSFundamentals.Decoration.DataStructureAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: MaxBinaryHeap
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue)
  name.vb: MaxBinaryHeap(Of TKey, TValue)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: MaxBinaryHeap(List<KeyValuePair<TKey, TValue>>)
  nameWithType: MaxBinaryHeap<TKey, TValue>.MaxBinaryHeap(List<KeyValuePair<TKey, TValue>>)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.MaxBinaryHeap(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 41
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nConstructor.\n"
  example: []
  syntax:
    content: public MaxBinaryHeap(List<KeyValuePair<TKey, TValue>> array)
    parameters:
    - id: array
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An array containing key-value pairs
    content.vb: Public Sub New(array As List(Of KeyValuePair(Of TKey, TValue)))
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).MaxBinaryHeap(List(Of KeyValuePair(Of TKey, TValue)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).MaxBinaryHeap(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: MaxBinaryHeap(List(Of KeyValuePair(Of TKey, TValue)))
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  id: BuildHeap_Recursively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BuildHeap_Recursively(Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.BuildHeap_Recursively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BuildHeap_Recursively(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BuildHeap_Recursively
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nBuilds an in-place max heap on the given array. \n"
  example: []
  syntax:
    content: public override void BuildHeap_Recursively(int heapArrayLength)
    parameters:
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Public Overrides Sub BuildHeap_Recursively(heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Recursively(System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BuildHeap_Recursively(Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BuildHeap_Recursively(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  id: BuildHeap_Iteratively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BuildHeap_Iteratively(Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.BuildHeap_Iteratively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BuildHeap_Iteratively(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BuildHeap_Iteratively
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 61
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nIs the iterative version of BuildHeap_Recursively. Expect to see exact same results for these two methods. \n"
  example: []
  syntax:
    content: public override void BuildHeap_Iteratively(int heapArrayLength)
    parameters:
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Public Overrides Sub BuildHeap_Iteratively(heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Iteratively(System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively(Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  id: Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: Insert(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.Insert(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.Insert(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 74
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nInserts a new value into the Max Heap. \n"
  example: []
  syntax:
    content: public override void Insert(KeyValuePair<TKey, TValue> value, int heapArrayLength)
    parameters:
    - id: value
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: Specifies the new value to be inserted in the tree.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length/size of the heap array. '
    content.vb: Public Overrides Sub Insert(value As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.Insert(System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).Insert(KeyValuePair(Of TKey, TValue), Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).Insert(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: Insert(KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  id: BubbleUp_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleUp_Iteratively(Int32, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleUp_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleUp_Iteratively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleUp_Iteratively
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 88
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\n\n"
  example: []
  syntax:
    content: public override void BubbleUp_Iteratively(int index, int heapArrayLength)
    parameters:
    - id: index
      type: System.Int32
      description: ''
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length/size of the heap array. '
    content.vb: Public Overrides Sub BubbleUp_Iteratively(index As Integer, heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleUp_Iteratively(System.Int32,System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively(Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively(System.Int32, System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  id: TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: TryRemoveRoot(out KeyValuePair<TKey, TValue>, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.TryRemoveRoot(out KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.TryRemoveRoot(out System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: TryRemoveRoot
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 111
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\nRemoves the max element from the heap.\n"
  example: []
  syntax:
    content: public override bool TryRemoveRoot(out KeyValuePair<TKey, TValue> keyValue, int heapArrayLength)
    parameters:
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: If the operation is successful, contains the maximum element in the array.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    return:
      type: System.Boolean
      description: True in case of success, and false otherwise
    content.vb: Public Overrides Function TryRemoveRoot(ByRef keyValue As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer) As Boolean
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryRemoveRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).TryRemoveRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).TryRemoveRoot(ByRef System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryRemoveRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  id: TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: TryFindRoot(out KeyValuePair<TKey, TValue>, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.TryFindRoot(out KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.TryFindRoot(out System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: TryFindRoot
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 140
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\n\n"
  example: []
  syntax:
    content: public override bool TryFindRoot(out KeyValuePair<TKey, TValue> keyValue, int heapArrayLength)
    parameters:
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: ''
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function TryFindRoot(ByRef keyValue As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer) As Boolean
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).TryFindRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).TryFindRoot(ByRef System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryFindRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  id: BubbleDown_Recursively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleDown_Recursively(Int32, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleDown_Recursively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleDown_Recursively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleDown_Recursively
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 156
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\n\n"
  example: []
  syntax:
    content: public override void BubbleDown_Recursively(int rootIndex, int heapArrayLength)
    parameters:
    - id: rootIndex
      type: System.Int32
      description: ''
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Public Overrides Sub BubbleDown_Recursively(rootIndex As Integer, heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Recursively(System.Int32,System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleDown_Recursively(Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleDown_Recursively(System.Int32, System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  id: BubbleDown_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleDown_Iteratively(Int32, Int32)
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleDown_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleDown_Iteratively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/MaxBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleDown_Iteratively
    path: ../DataStructures/BinaryHeaps/MaxBinaryHeap.cs
    startLine: 183
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps
  summary: "\n\n"
  example: []
  syntax:
    content: public override void BubbleDown_Iteratively(int rootIndex, int heapArrayLength)
    parameters:
    - id: rootIndex
      type: System.Int32
      description: ''
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Public Overrides Sub BubbleDown_Iteratively(rootIndex As Integer, heapArrayLength As Integer)
  overridden: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Iteratively(System.Int32,System.Int32)
  overload: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively*
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively(Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively(System.Int32, System.Int32)
references:
- uid: CSFundamentals.DataStructures.BinaryHeaps
  commentId: N:CSFundamentals.DataStructures.BinaryHeaps
  name: CSFundamentals.DataStructures.BinaryHeaps
  nameWithType: CSFundamentals.DataStructures.BinaryHeaps
  fullName: CSFundamentals.DataStructures.BinaryHeaps
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}
  parent: CSFundamentals.DataStructures.BinaryHeaps.API
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
  name: BinaryHeapBase<TKey, TValue>
  nameWithType: BinaryHeapBase<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue)
  name.vb: BinaryHeapBase(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
    name: BinaryHeapBase
    nameWithType: BinaryHeapBase
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
    name: BinaryHeapBase
    nameWithType: BinaryHeapBase
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap{{TKey},{TValue}}
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap{`0,`1}
  parent: CSFundamentals.DataStructures.BinaryHeaps.API
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  name: IBinaryHeap<TKey, TValue>
  nameWithType: IBinaryHeap<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>
  nameWithType.vb: IBinaryHeap(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue)
  name.vb: IBinaryHeap(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
    name: IBinaryHeap
    nameWithType: IBinaryHeap
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
    name: IBinaryHeap
    nameWithType: IBinaryHeap
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Iteratively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.BuildHeap_Iteratively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
  name: BuildHeap_Iteratively(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
    name: BuildHeap_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
    name: BuildHeap_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BuildHeap_Recursively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.BuildHeap_Recursively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
  name: BuildHeap_Recursively(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
    name: BuildHeap_Recursively
    nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
    name: BuildHeap_Recursively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.Insert(System.Collections.Generic.KeyValuePair{{TKey},{TValue}},System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  name: Insert(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.Insert(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.Insert(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).Insert(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).Insert(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: Insert(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
    name: Insert
    nameWithType: BinaryHeapBase<TKey, TValue>.Insert
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
    name: Insert
    nameWithType: BinaryHeapBase(Of TKey, TValue).Insert
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryRemoveRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  name: TryRemoveRoot(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryRemoveRoot(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryRemoveRoot(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryRemoveRoot(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryRemoveRoot(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryRemoveRoot(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryRemoveRoot
    nameWithType: BinaryHeapBase<TKey, TValue>.TryRemoveRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryRemoveRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryRemoveRoot
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryRemoveRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryRemoveRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindRoot(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  name: TryFindRoot(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindRoot(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindRoot(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindRoot(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindRoot(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryFindRoot(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryFindRoot
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryFindRoot
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Recursively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.BubbleDown_Recursively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
  name: BubbleDown_Recursively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
    name: BubbleDown_Recursively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
    name: BubbleDown_Recursively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleDown_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.BubbleDown_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  name: BubbleDown_Iteratively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
    name: BubbleDown_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
    name: BubbleDown_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.BubbleUp_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.BubbleUp_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  name: BubbleUp_Iteratively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
    name: BubbleUp_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
    name: BubbleUp_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.HeapArray
  commentId: F:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.HeapArray
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.HeapArray
  name: HeapArray
  nameWithType: BinaryHeapBase<TKey, TValue>.HeapArray
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.HeapArray
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).HeapArray
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).HeapArray
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetLeftChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.GetLeftChildIndexInHeapArray(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
  name: GetLeftChildIndexInHeapArray(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
    name: GetLeftChildIndexInHeapArray
    nameWithType: BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
    name: GetLeftChildIndexInHeapArray
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetRightChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.GetRightChildIndexInHeapArray(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
  name: GetRightChildIndexInHeapArray(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
    name: GetRightChildIndexInHeapArray
    nameWithType: BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
    name: GetRightChildIndexInHeapArray
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetParentIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.GetParentIndex(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
  name: GetParentIndex(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetParentIndex(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetParentIndex(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetParentIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetParentIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
    name: GetParentIndex
    nameWithType: BinaryHeapBase<TKey, TValue>.GetParentIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetParentIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
    name: GetParentIndex
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetParentIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetParentIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.GetNodeLevel(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.GetNodeLevel(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
  name: GetNodeLevel(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetNodeLevel(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetNodeLevel(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetNodeLevel(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetNodeLevel(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
    name: GetNodeLevel
    nameWithType: BinaryHeapBase<TKey, TValue>.GetNodeLevel
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetNodeLevel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
    name: GetNodeLevel
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetNodeLevel
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetNodeLevel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}},System.Collections.Generic.List{System.Int32},{TKey},System.Int32@)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  name: TryFindIndexOfMinSmallerThanReference(List<KeyValuePair<TKey, TValue>>, List<Int32>, TKey, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference(List<KeyValuePair<TKey, TValue>>, List<Int32>, TKey, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.List<System.Int32>, TKey, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference(List(Of KeyValuePair(Of TKey, TValue)), List(Of Int32), TKey, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.List(Of System.Int32), TKey, System.Int32)
  name.vb: TryFindIndexOfMinSmallerThanReference(List(Of KeyValuePair(Of TKey, TValue)), List(Of Int32), TKey, Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMinSmallerThanReference
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMinSmallerThanReference
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}},System.Int32,System.Collections.Generic.List{System.Int32},{TKey},System.Int32@)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  name: TryFindIndexOfMaxBiggerThanReference(List<KeyValuePair<TKey, TValue>>, Int32, List<Int32>, TKey, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference(List<KeyValuePair<TKey, TValue>>, Int32, List<Int32>, TKey, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Int32, System.Collections.Generic.List<System.Int32>, TKey, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference(List(Of KeyValuePair(Of TKey, TValue)), Int32, List(Of Int32), TKey, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Int32, System.Collections.Generic.List(Of System.Int32), TKey, System.Int32)
  name.vb: TryFindIndexOfMaxBiggerThanReference(List(Of KeyValuePair(Of TKey, TValue)), Int32, List(Of Int32), TKey, Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMaxBiggerThanReference
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMaxBiggerThanReference
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}.FindIndex({TKey})
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{`0,`1}.FindIndex(`0)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase{{TKey},{TValue}}
  definition: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
  name: FindIndex(TKey)
  nameWithType: BinaryHeapBase<TKey, TValue>.FindIndex(TKey)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.FindIndex(TKey)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).FindIndex(TKey)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).FindIndex(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
    name: FindIndex
    nameWithType: BinaryHeapBase<TKey, TValue>.FindIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.FindIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
    name: FindIndex
    nameWithType: BinaryHeapBase(Of TKey, TValue).FindIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).FindIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
  name: BinaryHeapBase<TKey, TValue>
  nameWithType: BinaryHeapBase<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue)
  name.vb: BinaryHeapBase(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
    name: BinaryHeapBase
    nameWithType: BinaryHeapBase
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2
    name: BinaryHeapBase
    nameWithType: BinaryHeapBase
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API
  commentId: N:CSFundamentals.DataStructures.BinaryHeaps.API
  name: CSFundamentals.DataStructures.BinaryHeaps.API
  nameWithType: CSFundamentals.DataStructures.BinaryHeaps.API
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  name: IBinaryHeap<TKey, TValue>
  nameWithType: IBinaryHeap<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>
  nameWithType.vb: IBinaryHeap(Of TKey, TValue)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue)
  name.vb: IBinaryHeap(Of TKey, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
    name: IBinaryHeap
    nameWithType: IBinaryHeap
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
    name: IBinaryHeap
    nameWithType: IBinaryHeap
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
  isExternal: true
  name: BuildHeap_Iteratively(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
    name: BuildHeap_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Iteratively(System.Int32)
    name: BuildHeap_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
  isExternal: true
  name: BuildHeap_Recursively(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
    name: BuildHeap_Recursively
    nameWithType: BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BuildHeap_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BuildHeap_Recursively(System.Int32)
    name: BuildHeap_Recursively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BuildHeap_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  isExternal: true
  name: Insert(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.Insert(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.Insert(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).Insert(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).Insert(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: Insert(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
    name: Insert
    nameWithType: BinaryHeapBase<TKey, TValue>.Insert
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
    name: Insert
    nameWithType: BinaryHeapBase(Of TKey, TValue).Insert
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  isExternal: true
  name: TryRemoveRoot(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryRemoveRoot(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryRemoveRoot(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryRemoveRoot(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryRemoveRoot(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryRemoveRoot(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryRemoveRoot
    nameWithType: BinaryHeapBase<TKey, TValue>.TryRemoveRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryRemoveRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryRemoveRoot
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryRemoveRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryRemoveRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  isExternal: true
  name: TryFindRoot(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindRoot(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindRoot(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindRoot(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindRoot(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryFindRoot(KeyValuePair(Of TKey, TValue), Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryFindRoot
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
    name: TryFindRoot
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindRoot
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindRoot
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
  isExternal: true
  name: BubbleDown_Recursively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
    name: BubbleDown_Recursively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Recursively(System.Int32,System.Int32)
    name: BubbleDown_Recursively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Recursively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  isExternal: true
  name: BubbleDown_Iteratively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
    name: BubbleDown_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleDown_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleDown_Iteratively(System.Int32,System.Int32)
    name: BubbleDown_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleDown_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  isExternal: true
  name: BubbleUp_Iteratively(Int32, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively(System.Int32, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively(System.Int32, System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
    name: BubbleUp_Iteratively
    nameWithType: BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.BubbleUp_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.BubbleUp_Iteratively(System.Int32,System.Int32)
    name: BubbleUp_Iteratively
    nameWithType: BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).BubbleUp_Iteratively
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.HeapArray
  commentId: F:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.HeapArray
  name: HeapArray
  nameWithType: BinaryHeapBase<TKey, TValue>.HeapArray
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.HeapArray
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).HeapArray
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).HeapArray
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
  isExternal: true
  name: GetLeftChildIndexInHeapArray(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
    name: GetLeftChildIndexInHeapArray
    nameWithType: BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetLeftChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetLeftChildIndexInHeapArray(System.Int32)
    name: GetLeftChildIndexInHeapArray
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetLeftChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
  isExternal: true
  name: GetRightChildIndexInHeapArray(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
    name: GetRightChildIndexInHeapArray
    nameWithType: BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetRightChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetRightChildIndexInHeapArray(System.Int32)
    name: GetRightChildIndexInHeapArray
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetRightChildIndexInHeapArray
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
  isExternal: true
  name: GetParentIndex(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetParentIndex(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetParentIndex(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetParentIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetParentIndex(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
    name: GetParentIndex
    nameWithType: BinaryHeapBase<TKey, TValue>.GetParentIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetParentIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetParentIndex(System.Int32)
    name: GetParentIndex
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetParentIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetParentIndex
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
  isExternal: true
  name: GetNodeLevel(Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.GetNodeLevel(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetNodeLevel(System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).GetNodeLevel(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetNodeLevel(System.Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
    name: GetNodeLevel
    nameWithType: BinaryHeapBase<TKey, TValue>.GetNodeLevel
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.GetNodeLevel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.GetNodeLevel(System.Int32)
    name: GetNodeLevel
    nameWithType: BinaryHeapBase(Of TKey, TValue).GetNodeLevel
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).GetNodeLevel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  isExternal: true
  name: TryFindIndexOfMinSmallerThanReference(List<KeyValuePair<TKey, TValue>>, List<Int32>, TKey, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference(List<KeyValuePair<TKey, TValue>>, List<Int32>, TKey, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.List<System.Int32>, TKey, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference(List(Of KeyValuePair(Of TKey, TValue)), List(Of Int32), TKey, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.List(Of System.Int32), TKey, System.Int32)
  name.vb: TryFindIndexOfMinSmallerThanReference(List(Of KeyValuePair(Of TKey, TValue)), List(Of Int32), TKey, Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMinSmallerThanReference
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMinSmallerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMinSmallerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMinSmallerThanReference
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMinSmallerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
  isExternal: true
  name: TryFindIndexOfMaxBiggerThanReference(List<KeyValuePair<TKey, TValue>>, Int32, List<Int32>, TKey, Int32)
  nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference(List<KeyValuePair<TKey, TValue>>, Int32, List<Int32>, TKey, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Int32, System.Collections.Generic.List<System.Int32>, TKey, System.Int32)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference(List(Of KeyValuePair(Of TKey, TValue)), Int32, List(Of Int32), TKey, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Int32, System.Collections.Generic.List(Of System.Int32), TKey, System.Int32)
  name.vb: TryFindIndexOfMaxBiggerThanReference(List(Of KeyValuePair(Of TKey, TValue)), Int32, List(Of Int32), TKey, Int32)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMaxBiggerThanReference
    nameWithType: BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.TryFindIndexOfMaxBiggerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.TryFindIndexOfMaxBiggerThanReference(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}},System.Int32,System.Collections.Generic.List{System.Int32},`0,System.Int32@)
    name: TryFindIndexOfMaxBiggerThanReference
    nameWithType: BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).TryFindIndexOfMaxBiggerThanReference
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
  name: FindIndex(TKey)
  nameWithType: BinaryHeapBase<TKey, TValue>.FindIndex(TKey)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.FindIndex(TKey)
  nameWithType.vb: BinaryHeapBase(Of TKey, TValue).FindIndex(TKey)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).FindIndex(TKey)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
    name: FindIndex
    nameWithType: BinaryHeapBase<TKey, TValue>.FindIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase<TKey, TValue>.FindIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase`2.FindIndex(`0)
    name: FindIndex
    nameWithType: BinaryHeapBase(Of TKey, TValue).FindIndex
    fullName: CSFundamentals.DataStructures.BinaryHeaps.API.BinaryHeapBase(Of TKey, TValue).FindIndex
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.#ctor
  name: MaxBinaryHeap
  nameWithType: MaxBinaryHeap<TKey, TValue>.MaxBinaryHeap
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.MaxBinaryHeap
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).MaxBinaryHeap
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).MaxBinaryHeap
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<TKey, TValue>>
  nameWithType: List<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: List(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: List(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Recursively
  name: BuildHeap_Recursively
  nameWithType: MaxBinaryHeap<TKey, TValue>.BuildHeap_Recursively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BuildHeap_Recursively
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BuildHeap_Recursively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BuildHeap_Recursively
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BuildHeap_Iteratively
  name: BuildHeap_Iteratively
  nameWithType: MaxBinaryHeap<TKey, TValue>.BuildHeap_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BuildHeap_Iteratively
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.Insert
  name: Insert
  nameWithType: MaxBinaryHeap<TKey, TValue>.Insert
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.Insert
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).Insert
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleUp_Iteratively
  name: BubbleUp_Iteratively
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleUp_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleUp_Iteratively
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryRemoveRoot
  name: TryRemoveRoot
  nameWithType: MaxBinaryHeap<TKey, TValue>.TryRemoveRoot
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.TryRemoveRoot
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).TryRemoveRoot
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).TryRemoveRoot
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.TryFindRoot
  name: TryFindRoot
  nameWithType: MaxBinaryHeap<TKey, TValue>.TryFindRoot
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.TryFindRoot
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).TryFindRoot
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).TryFindRoot
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Recursively
  name: BubbleDown_Recursively
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleDown_Recursively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleDown_Recursively
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleDown_Recursively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleDown_Recursively
- uid: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap`2.BubbleDown_Iteratively
  name: BubbleDown_Iteratively
  nameWithType: MaxBinaryHeap<TKey, TValue>.BubbleDown_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap<TKey, TValue>.BubbleDown_Iteratively
  nameWithType.vb: MaxBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.MaxBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively
