### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  id: DoublyLinkedList`1
  parent: CSFundamentals.DataStructures.LinkedLists
  children:
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0})
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append(`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete(`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert(`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(`0,`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(`0,`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend(`0)
  - CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail
  langs:
  - csharp
  - vb
  name: DoublyLinkedList<TValue>
  nameWithType: DoublyLinkedList<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DoublyLinkedList
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 30
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nImplements a bi-directional/doubly linked list (aka. DLL). \n"
  example: []
  syntax:
    content: 'public class DoublyLinkedList<TValue> : LinkedListBase<DoublyLinkedNode<TValue>, TValue> where TValue : IComparable<TValue>'
    typeParameters:
    - id: TValue
      description: 'Is the type of the keys in the list. '
    content.vb: >-
      Public Class DoublyLinkedList(Of TValue As IComparable(Of TValue))

          Inherits LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue)
  inheritance:
  - System.Object
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  inheritedMembers:
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}._head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Head
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Search({TValue})
  - CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Count
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: DoublyLinkedList(Of TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue)
  name.vb: DoublyLinkedList(Of TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor
  id: '#ctor'
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: DoublyLinkedList()
  nameWithType: DoublyLinkedList<TValue>.DoublyLinkedList()
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.DoublyLinkedList()
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 40
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nParameter-less Constructor\n"
  example: []
  syntax:
    content: public DoublyLinkedList()
    content.vb: Public Sub New
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor*
  nameWithType.vb: DoublyLinkedList(Of TValue).DoublyLinkedList()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).DoublyLinkedList()
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0})
  id: '#ctor(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0})'
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: DoublyLinkedList(DoublyLinkedNode<TValue>)
  nameWithType: DoublyLinkedList<TValue>.DoublyLinkedList(DoublyLinkedNode<TValue>)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.DoublyLinkedList(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>)
  type: Constructor
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: .ctor
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 48
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nConstructor\n"
  example: []
  syntax:
    content: public DoublyLinkedList(DoublyLinkedNode<TValue> head)
    parameters:
    - id: head
      type: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}}
      description: Head/starting node of the list
    content.vb: Public Sub New(head As DoublyLinkedNode(Of TValue))
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor*
  nameWithType.vb: DoublyLinkedList(Of TValue).DoublyLinkedList(DoublyLinkedNode(Of TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).DoublyLinkedList(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue))
  name.vb: DoublyLinkedList(DoublyLinkedNode(Of TValue))
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail
  id: Tail
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: Tail()
  nameWithType: DoublyLinkedList<TValue>.Tail()
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Tail()
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Tail
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 58
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nTail can be read, but to prevent any modification outside the API in this class, only a deep copy of the tail can be returned for reading purposes.\n"
  example: []
  syntax:
    content: public DoublyLinkedNode<TValue> Tail()
    return:
      type: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}}
      description: ''
    content.vb: Public Function Tail As DoublyLinkedNode(Of TValue)
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail*
  nameWithType.vb: DoublyLinkedList(Of TValue).Tail()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Tail()
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert(`0)
  id: Insert(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: Insert(TValue)
  nameWithType: DoublyLinkedList<TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Insert(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 68
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node at the beginning of the list, thus changing the head node.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public override bool Insert(TValue newValue)
    parameters:
    - id: newValue
      type: '{TValue}'
      description: 'Is the new value of the new node to be added as the head of the list. '
    return:
      type: System.Boolean
      description: True in case of success.
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Overrides Function Insert(newValue As TValue) As Boolean
  overridden: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: DoublyLinkedList(Of TValue).Insert(TValue)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Insert(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(`0,`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(`0,`0)
  id: InsertAfter(`0,`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: InsertAfter(TValue, TValue)
  nameWithType: DoublyLinkedList<TValue>.InsertAfter(TValue, TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertAfter(TValue, TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 82
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">newValue</code> as its value in the list after the node containing <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> as its value. If a node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not exist, fails the insert and returns false. \n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)", When = "Inserting after the first node in the list.")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(n)")]

      public bool InsertAfter(TValue value, TValue newValue)
    parameters:
    - id: value
      type: '{TValue}'
      description: The value of the node, that <code data-dev-comment-type="paramref" class="paramref">newValue</code> will be inserted after.
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be inserted in the list. '
    return:
      type: System.Boolean
      description: 'True in case the operation is successful, and false otherwise. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)", When:="Inserting after the first node in the list.")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(n)")>

      Public Function InsertAfter(value As TValue, newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
    namedArguments:
    - name: When
      type: System.String
      value: Inserting after the first node in the list.
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(n)
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertAfter(TValue, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertAfter(TValue, TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  id: InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: InsertAfter(DoublyLinkedNode<TValue>, TValue)
  nameWithType: DoublyLinkedList<TValue>.InsertAfter(DoublyLinkedNode<TValue>, TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertAfter
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 102
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">newValue</code> as its value in the list after the given node <code data-dev-comment-type=\"paramref\" class=\"paramref\">node</code>.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public bool InsertAfter(DoublyLinkedNode<TValue> node, TValue newValue)
    parameters:
    - id: node
      type: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}}
      description: The node that a new node with value <code data-dev-comment-type="paramref" class="paramref">newValue</code> will be inserted after.
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be inserted in the list. '
    return:
      type: System.Boolean
      description: True in case the operation is successful
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Function InsertAfter(node As DoublyLinkedNode(Of TValue), newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertAfter(DoublyLinkedNode(Of TValue), TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertAfter(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue)
  name.vb: InsertAfter(DoublyLinkedNode(Of TValue), TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(`0,`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(`0,`0)
  id: InsertBefore(`0,`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: InsertBefore(TValue, TValue)
  nameWithType: DoublyLinkedList<TValue>.InsertBefore(TValue, TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertBefore(TValue, TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 137
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">newValue</code> as its value in the list before the node containing <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> as its value. If a node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does not exist, fails the insert and returns false. \n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)", When = "Inserting before the first node in the list.")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(n)")]

      public bool InsertBefore(TValue value, TValue newValue)
    parameters:
    - id: value
      type: '{TValue}'
      description: The value of the node, that <code data-dev-comment-type="paramref" class="paramref">newValue</code> will be inserted before.
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be inserted in the list. '
    return:
      type: System.Boolean
      description: 'True in case the operation is successful, and false otherwise. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)", When:="Inserting before the first node in the list.")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(n)")>

      Public Function InsertBefore(value As TValue, newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
    namedArguments:
    - name: When
      type: System.String
      value: Inserting before the first node in the list.
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(n)
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertBefore(TValue, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertBefore(TValue, TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  id: InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: InsertBefore(DoublyLinkedNode<TValue>, TValue)
  nameWithType: DoublyLinkedList<TValue>.InsertBefore(DoublyLinkedNode<TValue>, TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertBefore
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 156
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nInserts a new node with <code data-dev-comment-type=\"paramref\" class=\"paramref\">newValue</code> as its value in the list before the given node.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public bool InsertBefore(DoublyLinkedNode<TValue> node, TValue newValue)
    parameters:
    - id: node
      type: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}}
      description: The node that a new node with value <code data-dev-comment-type="paramref" class="paramref">newValue</code> will be inserted before.
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be inserted in the list. '
    return:
      type: System.Boolean
      description: 'True in case the operation is successful. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Function InsertBefore(node As DoublyLinkedNode(Of TValue), newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertBefore(DoublyLinkedNode(Of TValue), TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertBefore(CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue)
  name.vb: InsertBefore(DoublyLinkedNode(Of TValue), TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append(`0)
  id: Append(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: Append(TValue)
  nameWithType: DoublyLinkedList<TValue>.Append(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Append(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Append
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 188
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nAdds a new node to the end of the list. Changing the Tail node.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public bool Append(TValue newValue)
    parameters:
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be appended in the list. '
    return:
      type: System.Boolean
      description: 'True in case the operation is successful, and false otherwise. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Function Append(newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: DoublyLinkedList(Of TValue).Append(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Append(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend(`0)
  id: PrePend(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: PrePend(TValue)
  nameWithType: DoublyLinkedList<TValue>.PrePend(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.PrePend(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: PrePend
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 214
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nAnds a new node to the beginning of the list. Changing the Head node. \n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)")]

      [TimeComplexity(Case.Worst, "O(1)")]

      [TimeComplexity(Case.Average, "O(1)")]

      public bool PrePend(TValue newValue)
    parameters:
    - id: newValue
      type: '{TValue}'
      description: 'The value of the new node that is meant to be prepended to the list. '
    return:
      type: System.Boolean
      description: 'True in case operation is successful, and false otherwise. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)")>

      <TimeComplexity( Case.Worst, "O(1)")>

      <TimeComplexity( Case.Average, "O(1)")>

      Public Function PrePend(newValue As TValue) As Boolean
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(1)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: DoublyLinkedList(Of TValue).PrePend(TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).PrePend(TValue)
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete(`0)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete(`0)
  id: Delete(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1
  langs:
  - csharp
  - vb
  name: Delete(TValue)
  nameWithType: DoublyLinkedList<TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Delete(TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/LinkedLists/DoublyLinkedList.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete
    path: ../DataStructures/LinkedLists/DoublyLinkedList.cs
    startLine: 239
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.LinkedLists
  summary: "\nDeletes a node from the list with the given value. If no node with the <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is found fails the operation and returns false.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Best, "O(1)", When = "The first node (Head) contains the value.")]

      [TimeComplexity(Case.Worst, "O(n)")]

      [TimeComplexity(Case.Average, "O(n)")]

      public override bool Delete(TValue value)
    parameters:
    - id: value
      type: '{TValue}'
      description: 'Is the value of the node to be deleted. '
    return:
      type: System.Boolean
      description: 'True in case the operation is successful, and false otherwise. '
    content.vb: >-
      <TimeComplexity( Case.Best, "O(1)", When:="The first node (Head) contains the value.")>

      <TimeComplexity( Case.Worst, "O(n)")>

      <TimeComplexity( Case.Average, "O(n)")>

      Public Overrides Function Delete(value As TValue) As Boolean
  overridden: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  overload: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 1
    - type: System.String
      value: O(1)
    namedArguments:
    - name: When
      type: System.String
      value: The first node (Head) contains the value.
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 2
    - type: System.String
      value: O(n)
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(n)
  nameWithType.vb: DoublyLinkedList(Of TValue).Delete(TValue)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Delete(TValue)
references:
- uid: CSFundamentals.DataStructures.LinkedLists
  commentId: N:CSFundamentals.DataStructures.LinkedLists
  name: CSFundamentals.DataStructures.LinkedLists
  nameWithType: CSFundamentals.DataStructures.LinkedLists
  fullName: CSFundamentals.DataStructures.LinkedLists
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}
  parent: CSFundamentals.DataStructures.LinkedLists.API
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  name: LinkedListBase<DoublyLinkedNode<TValue>, TValue>
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue)
  name.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}._head
  commentId: F:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}._head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  name: _head
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>._head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>._head
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue)._head
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue)._head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Head
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}.Head
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  name: Head()
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Head()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Head()
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Head()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Head()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Insert({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}.Insert(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  name: Insert(TValue)
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Insert(TValue)
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Insert(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Insert(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Delete({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}.Delete(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  name: Delete(TValue)
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Delete(TValue)
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Delete(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Delete(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Search({TValue})
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}.Search(`0)
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  name: Search(TValue)
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Search(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Search(TValue)
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Search(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Search(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}.Count
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0},`0}.Count
  parent: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase{CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}},{TValue}}
  definition: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  name: Count()
  nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Count()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Count()
  nameWithType.vb: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Count()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Count()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase<DoublyLinkedNode<TValue>, TValue>.Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>, TValue>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase(Of DoublyLinkedNode(Of TValue), TValue).Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue), TValue).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  commentId: T:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
  name: LinkedListBase<TNode, TValue>
  nameWithType: LinkedListBase<TNode, TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>
  nameWithType.vb: LinkedListBase(Of TNode, TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)
  name.vb: LinkedListBase(Of TNode, TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2
    name: LinkedListBase
    nameWithType: LinkedListBase
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API
  commentId: N:CSFundamentals.DataStructures.LinkedLists.API
  name: CSFundamentals.DataStructures.LinkedLists.API
  nameWithType: CSFundamentals.DataStructures.LinkedLists.API
  fullName: CSFundamentals.DataStructures.LinkedLists.API
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  commentId: F:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2._head
  name: _head
  nameWithType: LinkedListBase<TNode, TValue>._head
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>._head
  nameWithType.vb: LinkedListBase(Of TNode, TValue)._head
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue)._head
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
  name: Head()
  nameWithType: LinkedListBase<TNode, TValue>.Head()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head()
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Head()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase<TNode, TValue>.Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Head
    name: Head
    nameWithType: LinkedListBase(Of TNode, TValue).Head
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Head
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
  name: Insert(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Insert(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Insert(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase<TNode, TValue>.Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Insert(`1)
    name: Insert
    nameWithType: LinkedListBase(Of TNode, TValue).Insert
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Insert
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
  name: Delete(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Delete(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Delete(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase<TNode, TValue>.Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Delete(`1)
    name: Delete
    nameWithType: LinkedListBase(Of TNode, TValue).Delete
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
  name: Search(TValue)
  nameWithType: LinkedListBase<TNode, TValue>.Search(TValue)
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search(TValue)
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Search(TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search(TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase<TNode, TValue>.Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Search(`1)
    name: Search
    nameWithType: LinkedListBase(Of TNode, TValue).Search
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Search
  - name: (
    nameWithType: (
    fullName: (
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  commentId: M:CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
  name: Count()
  nameWithType: LinkedListBase<TNode, TValue>.Count()
  fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count()
  nameWithType.vb: LinkedListBase(Of TNode, TValue).Count()
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count()
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase<TNode, TValue>.Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase<TNode, TValue>.Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase`2.Count
    name: Count
    nameWithType: LinkedListBase(Of TNode, TValue).Count
    fullName: CSFundamentals.DataStructures.LinkedLists.API.LinkedListBase(Of TNode, TValue).Count
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.#ctor
  name: DoublyLinkedList
  nameWithType: DoublyLinkedList<TValue>.DoublyLinkedList
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.DoublyLinkedList
  nameWithType.vb: DoublyLinkedList(Of TValue).DoublyLinkedList
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).DoublyLinkedList
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{{TValue}}
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode{`0}
  parent: CSFundamentals.DataStructures.LinkedLists
  definition: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  name: DoublyLinkedNode<TValue>
  nameWithType: DoublyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>
  nameWithType.vb: DoublyLinkedNode(Of TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue)
  name.vb: DoublyLinkedNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  commentId: T:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
  parent: CSFundamentals.DataStructures.LinkedLists
  name: DoublyLinkedNode<TValue>
  nameWithType: DoublyLinkedNode<TValue>
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode<TValue>
  nameWithType.vb: DoublyLinkedNode(Of TValue)
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode(Of TValue)
  name.vb: DoublyLinkedNode(Of TValue)
  spec.csharp:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode`1
    name: DoublyLinkedNode
    nameWithType: DoublyLinkedNode
    fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedNode
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Tail
  name: Tail
  nameWithType: DoublyLinkedList<TValue>.Tail
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Tail
  nameWithType.vb: DoublyLinkedList(Of TValue).Tail
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Tail
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Insert
  name: Insert
  nameWithType: DoublyLinkedList<TValue>.Insert
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Insert
  nameWithType.vb: DoublyLinkedList(Of TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Insert
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertAfter
  name: InsertAfter
  nameWithType: DoublyLinkedList<TValue>.InsertAfter
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertAfter
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertAfter
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertAfter
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.InsertBefore
  name: InsertBefore
  nameWithType: DoublyLinkedList<TValue>.InsertBefore
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.InsertBefore
  nameWithType.vb: DoublyLinkedList(Of TValue).InsertBefore
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).InsertBefore
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Append
  name: Append
  nameWithType: DoublyLinkedList<TValue>.Append
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Append
  nameWithType.vb: DoublyLinkedList(Of TValue).Append
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Append
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.PrePend
  name: PrePend
  nameWithType: DoublyLinkedList<TValue>.PrePend
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.PrePend
  nameWithType.vb: DoublyLinkedList(Of TValue).PrePend
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).PrePend
- uid: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete*
  commentId: Overload:CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList`1.Delete
  name: Delete
  nameWithType: DoublyLinkedList<TValue>.Delete
  fullName: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList<TValue>.Delete
  nameWithType.vb: DoublyLinkedList(Of TValue).Delete
  fullName.vb: CSFundamentals.DataStructures.LinkedLists.DoublyLinkedList(Of TValue).Delete
