### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  commentId: T:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  id: IBinaryHeap`2
  parent: CSFundamentals.DataStructures.BinaryHeaps.API
  children:
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray(System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  - CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  langs:
  - csharp
  - vb
  name: IBinaryHeap<TKey, TValue>
  nameWithType: IBinaryHeap<TKey, TValue>
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>
  type: Interface
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IBinaryHeap
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 30
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nProvides interface definition for a binary heap. \n"
  example: []
  syntax:
    content: >-
      public interface IBinaryHeap<TKey, TValue>
          where TKey : IComparable<TKey>
    typeParameters:
    - id: TKey
      description: 'Is the type of the keys, based on which priorities in a priority queue are defined. '
    - id: TValue
      description: 'Is the type of the values stored with keys. '
    content.vb: Public Interface IBinaryHeap(Of TKey As IComparable(Of TKey), TValue)
  nameWithType.vb: IBinaryHeap(Of TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue)
  name.vb: IBinaryHeap(Of TKey, TValue)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively(System.Int32)
  id: BuildHeap_Recursively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BuildHeap_Recursively(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.BuildHeap_Recursively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BuildHeap_Recursively(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BuildHeap_Recursively
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 36
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nBuilds a heap using recursion, and does so in situ.\n"
  example: []
  syntax:
    content: void BuildHeap_Recursively(int heapArrayLength)
    parameters:
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Sub BuildHeap_Recursively(heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BuildHeap_Recursively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BuildHeap_Recursively(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively(System.Int32)
  id: BuildHeap_Iteratively(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BuildHeap_Iteratively(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.BuildHeap_Iteratively(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BuildHeap_Iteratively(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BuildHeap_Iteratively
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 42
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nBuilds a heap iteratively, and does so in situ.\n"
  example: []
  syntax:
    content: void BuildHeap_Iteratively(int heapArrayLength)
    parameters:
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Sub BuildHeap_Iteratively(heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  id: Insert(System.Collections.Generic.KeyValuePair{`0,`1},System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: Insert(KeyValuePair<TKey, TValue>, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.Insert(KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.Insert(System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nThis method is for inserting a new value into heap.\n"
  example: []
  syntax:
    content: void Insert(KeyValuePair<TKey, TValue> keyValue, int heapArrayLength)
    parameters:
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: Specifies the key-value to be inserted into the heap.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Sub Insert(keyValue As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).Insert(KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).Insert(System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: Insert(KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  id: TryRemoveRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: TryRemoveRoot(out KeyValuePair<TKey, TValue>, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.TryRemoveRoot(out KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.TryRemoveRoot(out System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: TryRemoveRoot
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 57
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nThis method is for removing the root of the heap. In a MinHeap and MinMaxHeap this is the min, and in a MaxHeap and MaxMinHeap this is the max. \n"
  example: []
  syntax:
    content: bool TryRemoveRoot(out KeyValuePair<TKey, TValue> keyValue, int heapArrayLength)
    parameters:
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: Specifies the key-value of the root.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    return:
      type: System.Boolean
      description: True in case of success, and false otherwise.
    content.vb: Function TryRemoveRoot(ByRef keyValue As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer) As Boolean
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).TryRemoveRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).TryRemoveRoot(ByRef System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryRemoveRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  id: TryFindRoot(System.Collections.Generic.KeyValuePair{`0,`1}@,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: TryFindRoot(out KeyValuePair<TKey, TValue>, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.TryFindRoot(out KeyValuePair<TKey, TValue>, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.TryFindRoot(out System.Collections.Generic.KeyValuePair<TKey, TValue>, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: TryFindRoot
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 65
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nThis method is for finding the root of the heap, without removing it. \n"
  example: []
  syntax:
    content: bool TryFindRoot(out KeyValuePair<TKey, TValue> keyValue, int heapArrayLength)
    parameters:
    - id: keyValue
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: Specifies the key-value of the root.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    return:
      type: System.Boolean
      description: True in case of success, and false in case of failure.
    content.vb: Function TryFindRoot(ByRef keyValue As KeyValuePair(Of TKey, TValue), heapArrayLength As Integer) As Boolean
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).TryFindRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).TryFindRoot(ByRef System.Collections.Generic.KeyValuePair(Of TKey, TValue), System.Int32)
  name.vb: TryFindRoot(ByRef KeyValuePair(Of TKey, TValue), Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively(System.Int32,System.Int32)
  id: BubbleDown_Recursively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleDown_Recursively(Int32, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleDown_Recursively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleDown_Recursively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleDown_Recursively
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 72
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nThis method implements the bubble down/trickle down operation using recursion.\n"
  example: []
  syntax:
    content: void BubbleDown_Recursively(int rootIndex, int heapArrayLength)
    parameters:
    - id: rootIndex
      type: System.Int32
      description: Specifies the index of the root element, the element for which the trickle down should be performed.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Sub BubbleDown_Recursively(rootIndex As Integer, heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleDown_Recursively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleDown_Recursively(System.Int32, System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively(System.Int32,System.Int32)
  id: BubbleDown_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleDown_Iteratively(Int32, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleDown_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleDown_Iteratively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleDown_Iteratively
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 79
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nThis method implements the bubble down/trickle down operation using iteration.\n"
  example: []
  syntax:
    content: void BubbleDown_Iteratively(int rootIndex, int heapArrayLength)
    parameters:
    - id: rootIndex
      type: System.Int32
      description: Specifies the index of the root element, the element for which the trickle down should be performed.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length of the heap array. '
    content.vb: Sub BubbleDown_Iteratively(rootIndex As Integer, heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively(System.Int32, System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively(System.Int32,System.Int32)
  id: BubbleUp_Iteratively(System.Int32,System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: BubbleUp_Iteratively(Int32, Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleUp_Iteratively(Int32, Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleUp_Iteratively(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BubbleUp_Iteratively
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 86
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nMoves the value in the given index, up in the heap till its position is found. The position is defined such to respect heap ordering property.\n"
  example: []
  syntax:
    content: void BubbleUp_Iteratively(int index, int heapArrayLength)
    parameters:
    - id: index
      type: System.Int32
      description: Specifies the index of the element that should be bubbled up.
    - id: heapArrayLength
      type: System.Int32
      description: 'Specifies the length/size of the heap array. '
    content.vb: Sub BubbleUp_Iteratively(index As Integer, heapArrayLength As Integer)
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively(Int32, Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively(System.Int32, System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray(System.Int32)
  id: GetLeftChildIndexInHeapArray(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: GetLeftChildIndexInHeapArray(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.GetLeftChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetLeftChildIndexInHeapArray(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetLeftChildIndexInHeapArray
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 93
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nReturns the index of the left child for the given index in a heap array.\n"
  example: []
  syntax:
    content: int GetLeftChildIndexInHeapArray(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Specifies the index of a node in an array.
    return:
      type: System.Int32
      description: The index of the left child.
    content.vb: Function GetLeftChildIndexInHeapArray(index As Integer) As Integer
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetLeftChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetLeftChildIndexInHeapArray(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray(System.Int32)
  id: GetRightChildIndexInHeapArray(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: GetRightChildIndexInHeapArray(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.GetRightChildIndexInHeapArray(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetRightChildIndexInHeapArray(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetRightChildIndexInHeapArray
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 100
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nReturns the index of the right child for the given index in a heap array.\n"
  example: []
  syntax:
    content: int GetRightChildIndexInHeapArray(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Specifies the index of a node in an array.
    return:
      type: System.Int32
      description: The index of the right child.
    content.vb: Function GetRightChildIndexInHeapArray(index As Integer) As Integer
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetRightChildIndexInHeapArray(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetRightChildIndexInHeapArray(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex(System.Int32)
  id: GetParentIndex(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: GetParentIndex(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.GetParentIndex(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetParentIndex(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetParentIndex
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 107
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nReturns the index of the parent for the given index in a heap array.\n"
  example: []
  syntax:
    content: int GetParentIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: Specifies the index of a node in an array.
    return:
      type: System.Int32
      description: The index of the parent.
    content.vb: Function GetParentIndex(index As Integer) As Integer
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetParentIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetParentIndex(System.Int32)
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel(System.Int32)
  commentId: M:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel(System.Int32)
  id: GetNodeLevel(System.Int32)
  parent: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2
  langs:
  - csharp
  - vb
  name: GetNodeLevel(Int32)
  nameWithType: IBinaryHeap<TKey, TValue>.GetNodeLevel(Int32)
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetNodeLevel(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/BinaryHeaps/API/IBinaryHeap.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetNodeLevel
    path: ../DataStructures/BinaryHeaps/API/IBinaryHeap.cs
    startLine: 114
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.BinaryHeaps.API
  summary: "\nReturns the level of a node in the heap, given the node&apos;s index in the heap array.\n"
  example: []
  syntax:
    content: int GetNodeLevel(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'Specifies the index of a node in an array. '
    return:
      type: System.Int32
      description: 'Returns the level of the node. '
    content.vb: Function GetNodeLevel(index As Integer) As Integer
  overload: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel*
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetNodeLevel(Int32)
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetNodeLevel(System.Int32)
references:
- uid: CSFundamentals.DataStructures.BinaryHeaps.API
  commentId: N:CSFundamentals.DataStructures.BinaryHeaps.API
  name: CSFundamentals.DataStructures.BinaryHeaps.API
  nameWithType: CSFundamentals.DataStructures.BinaryHeaps.API
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Recursively
  name: BuildHeap_Recursively
  nameWithType: IBinaryHeap<TKey, TValue>.BuildHeap_Recursively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BuildHeap_Recursively
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BuildHeap_Recursively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BuildHeap_Recursively
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BuildHeap_Iteratively
  name: BuildHeap_Iteratively
  nameWithType: IBinaryHeap<TKey, TValue>.BuildHeap_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BuildHeap_Iteratively
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BuildHeap_Iteratively
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.Insert
  name: Insert
  nameWithType: IBinaryHeap<TKey, TValue>.Insert
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.Insert
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).Insert
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryRemoveRoot
  name: TryRemoveRoot
  nameWithType: IBinaryHeap<TKey, TValue>.TryRemoveRoot
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.TryRemoveRoot
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).TryRemoveRoot
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).TryRemoveRoot
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.TryFindRoot
  name: TryFindRoot
  nameWithType: IBinaryHeap<TKey, TValue>.TryFindRoot
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.TryFindRoot
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).TryFindRoot
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).TryFindRoot
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Recursively
  name: BubbleDown_Recursively
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleDown_Recursively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleDown_Recursively
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleDown_Recursively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleDown_Recursively
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleDown_Iteratively
  name: BubbleDown_Iteratively
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleDown_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleDown_Iteratively
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleDown_Iteratively
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.BubbleUp_Iteratively
  name: BubbleUp_Iteratively
  nameWithType: IBinaryHeap<TKey, TValue>.BubbleUp_Iteratively
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.BubbleUp_Iteratively
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).BubbleUp_Iteratively
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetLeftChildIndexInHeapArray
  name: GetLeftChildIndexInHeapArray
  nameWithType: IBinaryHeap<TKey, TValue>.GetLeftChildIndexInHeapArray
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetLeftChildIndexInHeapArray
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetLeftChildIndexInHeapArray
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetLeftChildIndexInHeapArray
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetRightChildIndexInHeapArray
  name: GetRightChildIndexInHeapArray
  nameWithType: IBinaryHeap<TKey, TValue>.GetRightChildIndexInHeapArray
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetRightChildIndexInHeapArray
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetRightChildIndexInHeapArray
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetRightChildIndexInHeapArray
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetParentIndex
  name: GetParentIndex
  nameWithType: IBinaryHeap<TKey, TValue>.GetParentIndex
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetParentIndex
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetParentIndex
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetParentIndex
- uid: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel*
  commentId: Overload:CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap`2.GetNodeLevel
  name: GetNodeLevel
  nameWithType: IBinaryHeap<TKey, TValue>.GetNodeLevel
  fullName: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap<TKey, TValue>.GetNodeLevel
  nameWithType.vb: IBinaryHeap(Of TKey, TValue).GetNodeLevel
  fullName.vb: CSFundamentals.DataStructures.BinaryHeaps.API.IBinaryHeap(Of TKey, TValue).GetNodeLevel
