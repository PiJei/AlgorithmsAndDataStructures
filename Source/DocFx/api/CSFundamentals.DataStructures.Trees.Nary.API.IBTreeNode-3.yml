### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  commentId: T:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  id: IBTreeNode`3
  parent: CSFundamentals.DataStructures.Trees.Nary.API
  children:
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  - CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  langs:
  - csharp
  - vb
  name: IBTreeNode<TNode, TKey, TValue>
  nameWithType: IBTreeNode<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>
  type: Interface
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IBTreeNode
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 31
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nProvides an interface for B-Tree nodes. \n"
  example: []
  syntax:
    content: 'public interface IBTreeNode<TNode, TKey, TValue> : IComparable<TNode> where TKey : IComparable<TKey>'
    typeParameters:
    - id: TNode
      description: 'Type of a B-Tree node. '
    - id: TKey
      description: 'Type of the key stored in the node. '
    - id: TValue
      description: 'Type of the value stored in the node. '
    content.vb: >-
      Public Interface IBTreeNode(Of TNode, TKey As IComparable(Of TKey), TValue)
          Inherits IComparable(Of TNode)
  inheritedMembers:
  - System.IComparable{{TNode}}.CompareTo({TNode})
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue)
  name.vb: IBTreeNode(Of TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  id: MaxBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: MaxBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxBranchingDegree
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 38
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nMaximum branching degree or maximum number of children the node can have. \n"
  example: []
  syntax:
    content: int MaxBranchingDegree { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Property MaxBranchingDegree As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
  modifiers.csharp:
  - get
  - set
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  id: MinBranchingDegree
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: MinBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MinBranchingDegree
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 43
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nMinimum branching degree or the minimum number of children the node can have. \n"
  example: []
  syntax:
    content: int MinBranchingDegree { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property MinBranchingDegree As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  id: MaxKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: MaxKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxKeys
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MaxKeys
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 48
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nMaximum number of keys that can be stored in a tree. \n"
  example: []
  syntax:
    content: int MaxKeys { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property MaxKeys As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxKeys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  id: MinKeys
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: MinKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinKeys
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: MinKeys
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 53
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nMinimum number of keys that can be stored in a tree. \n"
  example: []
  syntax:
    content: int MinKeys { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property MinKeys As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinKeys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  id: KeyCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: KeyCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.KeyCount
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: KeyCount
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 58
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the count of key-value pairs in the node. \n"
  example: []
  syntax:
    content: int KeyCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property KeyCount As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).KeyCount
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  commentId: P:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  id: ChildrenCount
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: ChildrenCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: ChildrenCount
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 63
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nIs the count of the children of the node. \n"
  example: []
  syntax:
    content: int ChildrenCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly Property ChildrenCount As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  id: Clear
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Clear
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 68
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nClears the current node&apos;s key-values.\n"
  example: []
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).Clear()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  id: IsLeaf
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsLeaf()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsLeaf
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 74
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node is a leaf node. \n"
  example: []
  syntax:
    content: bool IsLeaf()
    return:
      type: System.Boolean
      description: 'True if leaf and false otherwise. '
    content.vb: Function IsLeaf As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  id: IsRoot
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsRoot()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsRoot
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 80
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node is a root node. \n"
  example: []
  syntax:
    content: bool IsRoot()
    return:
      type: System.Boolean
      description: 'True if root and false otherwise. '
    content.vb: Function IsRoot As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsRoot()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  id: IsFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsFull
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 86
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has MaxKeys keys stored in it (meaning it is full). \n"
  example: []
  syntax:
    content: bool IsFull()
    return:
      type: System.Boolean
      description: 'True if the node is full, and false otherwise. '
    content.vb: Function IsFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  id: IsOverFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsOverFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsOverFlown
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 92
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has more than MaxKeys stored in it (meaning it is overFlown). \n"
  example: []
  syntax:
    content: bool IsOverFlown()
    return:
      type: System.Boolean
      description: 'True if the node is overflown and false otherwise. '
    content.vb: Function IsOverFlown As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  id: IsUnderFlown
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsUnderFlown()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsUnderFlown
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 98
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has less than MinKeys stored in it (meaning it is underFlown)\n"
  example: []
  syntax:
    content: bool IsUnderFlown()
    return:
      type: System.Boolean
      description: 'True if the node is underFlown, and false otherwise. '
    content.vb: Function IsUnderFlown As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  id: IsMinFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsMinFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsMinFull
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 104
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has exactly MinKeys stored in it (meaning it is minFull). \n"
  example: []
  syntax:
    content: bool IsMinFull()
    return:
      type: System.Boolean
      description: 'True if the node is minFull, and false otherwise. '
    content.vb: Function IsMinFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  id: IsMinOneFull
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsMinOneFull()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsMinOneFull
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 110
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has exactly MinKeys+1 stored in it (meaning it is minOneFull).\n"
  example: []
  syntax:
    content: bool IsMinOneFull()
    return:
      type: System.Boolean
      description: 'True if the node is MinOneFull, and false otherwise. '
    content.vb: Function IsMinOneFull As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  id: IsEmpty
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: IsEmpty()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: IsEmpty
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 116
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has 0 keys stored in it (meaning is empty).\n"
  example: []
  syntax:
    content: bool IsEmpty()
    return:
      type: System.Boolean
      description: 'True if the node is empty, and false otherwise. '
    content.vb: Function IsEmpty As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  id: HasLeftSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: HasLeftSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasLeftSibling
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 122
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has a left sibling.\n"
  example: []
  syntax:
    content: bool HasLeftSibling()
    return:
      type: System.Boolean
      description: 'True if the current node has a left sibling, and false otherwise. '
    content.vb: Function HasLeftSibling As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  id: HasRightSibling
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: HasRightSibling()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: HasRightSibling
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 128
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nChecks whether the current node has a right sibling. \n"
  example: []
  syntax:
    content: bool HasRightSibling()
    return:
      type: System.Boolean
      description: 'True if the current node has a right sibling, and false otherwise. '
    content.vb: Function HasRightSibling As Boolean
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  id: GetMinKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetMinKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetMinKey
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 134
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the minimum key in the current node. \n"
  example: []
  syntax:
    content: KeyValuePair<TKey, TValue> GetMinKey()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: ''
    content.vb: Function GetMinKey As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  id: GetMaxKey
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetMaxKey()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetMaxKey
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 140
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the maximum key in the current node. \n"
  example: []
  syntax:
    content: KeyValuePair<TKey, TValue> GetMaxKey()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: ''
    content.vb: Function GetMaxKey As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild(System.Int32)
  id: GetChild(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetChild(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChild
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 147
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the child at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code>\n"
  example: []
  syntax:
    content: TNode GetChild(int index)
    parameters:
    - id: index
      type: System.Int32
      description: An index to be evaluated in the _children array.
    return:
      type: '{TNode}'
      description: 'The child node. '
    content.vb: Function GetChild(index As Integer) As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChild(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  id: GetParent
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetParent()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetParent
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 153
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the parent of the current node. \n"
  example: []
  syntax:
    content: TNode GetParent()
    return:
      type: '{TNode}'
      description: 'Parent node. '
    content.vb: Function GetParent As TNode
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetParent()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent(`0)
  id: SetParent(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: SetParent(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: SetParent
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 159
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nSets the parent node of the current node. \n"
  example: []
  syntax:
    content: void SetParent(TNode parent)
    parameters:
    - id: parent
      type: '{TNode}'
      description: 'Parent node. '
    content.vb: Sub SetParent(parent As TNode)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex(`0)
  id: GetChildIndex(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetChildIndex(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetChildIndex
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 166
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the index of the given child in _children array. \n"
  example: []
  syntax:
    content: int GetChildIndex(TNode child)
    parameters:
    - id: child
      type: '{TNode}'
      description: 'The child node. '
    return:
      type: System.Int32
      description: 'Index of the child node in the _children array. '
    content.vb: Function GetChildIndex(child As TNode) As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetKey(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKey
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 173
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the key in index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> of _keyValues array. \n"
  example: []
  syntax:
    content: TKey GetKey(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'An index to be evaluated in _keyValues array. '
    return:
      type: '{TKey}'
      description: 'The key at the given index. '
    content.vb: Function GetKey(index As Integer) As TKey
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKey(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue(System.Int32)
  id: GetKeyValue(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetKeyValue(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetKeyValue
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 180
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the key-value pair at index <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> of _keyValues array. \n"
  example: []
  syntax:
    content: KeyValuePair<TKey, TValue> GetKeyValue(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'An index to be evaluated in _keyValues array. '
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'The key-value pair at the given index. '
    content.vb: Function GetKeyValue(index As Integer) As KeyValuePair(Of TKey, TValue)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  id: InsertKeyValue(System.Collections.Generic.KeyValuePair{`1,`2})
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: InsertKeyValue(KeyValuePair<TKey, TValue>)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(KeyValuePair<TKey, TValue>)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertKeyValue
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 186
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nInserts the given key-value pair in the _keyValues array.\n"
  example: []
  syntax:
    content: void InsertKeyValue(KeyValuePair<TKey, TValue> keyVal)
    parameters:
    - id: keyVal
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: 'A key-value pair to be inserted in the _keyValues array. '
    content.vb: Sub InsertKeyValue(keyVal As KeyValuePair(Of TKey, TValue))
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(KeyValuePair(Of TKey, TValue))
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: InsertKeyValue(KeyValuePair(Of TKey, TValue))
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild(`0)
  id: InsertChild(`0)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: InsertChild(TNode)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InsertChild
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 192
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nInserts the given child node in the _children array. \n"
  example: []
  syntax:
    content: void InsertChild(TNode child)
    parameters:
    - id: child
      type: '{TNode}'
      description: 'A tree node. '
    content.vb: Sub InsertChild(child As TNode)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild(TNode)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  id: GetIndexAtParentChildren
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: GetIndexAtParentChildren()
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren()
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetIndexAtParentChildren
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 198
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nGets the index of the current node in its parent&apos;s _children array. \n"
  example: []
  syntax:
    content: int GetIndexAtParentChildren()
    return:
      type: System.Int32
      description: index of the current node in its parent&apos;s _children array
    content.vb: Function GetIndexAtParentChildren As Integer
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren()
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex(System.Int32)
  id: RemoveKeyByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: RemoveKeyByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveKeyByIndex
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 204
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves the key at the given index in _keyValues array. \n"
  example: []
  syntax:
    content: void RemoveKeyByIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: An index in _keyValues array.
    content.vb: Sub RemoveKeyByIndex(index As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex(System.Int32)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey(`1)
  id: RemoveKey(`1)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: RemoveKey(TKey)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey(TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveKey
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 210
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves the given key from _keyValues array. \n"
  example: []
  syntax:
    content: void RemoveKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: 'A key to be removed. '
    content.vb: Sub RemoveKey(key As TKey)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey(TKey)
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  commentId: M:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex(System.Int32)
  id: RemoveChildByIndex(System.Int32)
  parent: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3
  langs:
  - csharp
  - vb
  name: RemoveChildByIndex(Int32)
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(Int32)
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Nary/API/IBTreeNode.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RemoveChildByIndex
    path: ../DataStructures/Trees/Nary/API/IBTreeNode.cs
    startLine: 216
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Nary.API
  summary: "\nRemoves the child at the given index from _children array. \n"
  example: []
  syntax:
    content: void RemoveChildByIndex(int index)
    parameters:
    - id: index
      type: System.Int32
      description: 'An index in the _children array. '
    content.vb: Sub RemoveChildByIndex(index As Integer)
  overload: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex*
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(Int32)
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex(System.Int32)
references:
- uid: CSFundamentals.DataStructures.Trees.Nary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Nary.API
  name: CSFundamentals.DataStructures.Trees.Nary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Nary.API
  fullName: CSFundamentals.DataStructures.Trees.Nary.API
- uid: System.IComparable{{TNode}}.CompareTo({TNode})
  commentId: M:System.IComparable{`0}.CompareTo(`0)
  parent: System.IComparable{{TNode}}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(TNode)
  nameWithType: IComparable<TNode>.CompareTo(TNode)
  fullName: System.IComparable<TNode>.CompareTo(TNode)
  nameWithType.vb: IComparable(Of TNode).CompareTo(TNode)
  fullName.vb: System.IComparable(Of TNode).CompareTo(TNode)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<TNode>.CompareTo
    fullName: System.IComparable<TNode>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of TNode).CompareTo
    fullName: System.IComparable(Of TNode).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{{TNode}}
  commentId: T:System.IComparable{`0}
  parent: System
  definition: System.IComparable`1
  name: IComparable<TNode>
  nameWithType: IComparable<TNode>
  fullName: System.IComparable<TNode>
  nameWithType.vb: IComparable(Of TNode)
  fullName.vb: System.IComparable(Of TNode)
  name.vb: IComparable(Of TNode)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxBranchingDegree
  name: MaxBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxBranchingDegree
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinBranchingDegree
  name: MinBranchingDegree
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinBranchingDegree
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinBranchingDegree
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MaxKeys
  name: MaxKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MaxKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MaxKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MaxKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MaxKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.MinKeys
  name: MinKeys
  nameWithType: IBTreeNode<TNode, TKey, TValue>.MinKeys
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.MinKeys
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).MinKeys
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).MinKeys
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.KeyCount
  name: KeyCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.KeyCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.KeyCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).KeyCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).KeyCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.ChildrenCount
  name: ChildrenCount
  nameWithType: IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.ChildrenCount
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).ChildrenCount
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.Clear
  name: Clear
  nameWithType: IBTreeNode<TNode, TKey, TValue>.Clear
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.Clear
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).Clear
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).Clear
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsLeaf
  name: IsLeaf
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsLeaf
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsLeaf
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsLeaf
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsLeaf
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsRoot
  name: IsRoot
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsRoot
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsRoot
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsRoot
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsRoot
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsFull
  name: IsFull
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsFull
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsOverFlown
  name: IsOverFlown
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsOverFlown
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsOverFlown
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsOverFlown
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsUnderFlown
  name: IsUnderFlown
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsUnderFlown
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsUnderFlown
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinFull
  name: IsMinFull
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinFull
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsMinOneFull
  name: IsMinOneFull
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsMinOneFull
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsMinOneFull
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.IsEmpty
  name: IsEmpty
  nameWithType: IBTreeNode<TNode, TKey, TValue>.IsEmpty
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.IsEmpty
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).IsEmpty
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).IsEmpty
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasLeftSibling
  name: HasLeftSibling
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasLeftSibling
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasLeftSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.HasRightSibling
  name: HasRightSibling
  nameWithType: IBTreeNode<TNode, TKey, TValue>.HasRightSibling
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.HasRightSibling
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).HasRightSibling
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMinKey
  name: GetMinKey
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMinKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMinKey
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMinKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMinKey
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetMaxKey
  name: GetMaxKey
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetMaxKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetMaxKey
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetMaxKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChild
  name: GetChild
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChild
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChild
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetParent
  name: GetParent
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetParent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetParent
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetParent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetParent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.SetParent
  name: SetParent
  nameWithType: IBTreeNode<TNode, TKey, TValue>.SetParent
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.SetParent
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).SetParent
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).SetParent
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetChildIndex
  name: GetChildIndex
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetChildIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetChildIndex
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetChildIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKey
  name: GetKey
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKey
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKey
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetKeyValue
  name: GetKeyValue
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetKeyValue
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetKeyValue
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetKeyValue
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertKeyValue
  name: InsertKeyValue
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertKeyValue
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertKeyValue
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.InsertChild
  name: InsertChild
  nameWithType: IBTreeNode<TNode, TKey, TValue>.InsertChild
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.InsertChild
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).InsertChild
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).InsertChild
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.GetIndexAtParentChildren
  name: GetIndexAtParentChildren
  nameWithType: IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.GetIndexAtParentChildren
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).GetIndexAtParentChildren
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKeyByIndex
  name: RemoveKeyByIndex
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKeyByIndex
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKeyByIndex
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveKey
  name: RemoveKey
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveKey
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveKey
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveKey
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveKey
- uid: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode`3.RemoveChildByIndex
  name: RemoveChildByIndex
  nameWithType: IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
  fullName: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode<TNode, TKey, TValue>.RemoveChildByIndex
  nameWithType.vb: IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
  fullName.vb: CSFundamentals.DataStructures.Trees.Nary.API.IBTreeNode(Of TNode, TKey, TValue).RemoveChildByIndex
