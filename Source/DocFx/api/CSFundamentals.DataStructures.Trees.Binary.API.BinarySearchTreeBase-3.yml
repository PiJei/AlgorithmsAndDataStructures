### YamlMime:ManagedReference
items:
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  commentId: T:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  id: BinarySearchTreeBase`3
  parent: CSFundamentals.DataStructures.Trees.Binary.API
  children:
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}})
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete(`0,`1)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal(`0,System.Collections.Generic.List{`0})
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert(`0,`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight(`0)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search(`0,`1)
  - CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update(`0,`1,`2)
  langs:
  - csharp
  - vb
  name: BinarySearchTreeBase<TNode, TKey, TValue>
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>
  type: Class
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: BinarySearchTreeBase
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 35
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nProvides a base class for a binary search tree (aka. BST)\n"
  example: []
  syntax:
    content: >-
      public abstract class BinarySearchTreeBase<TNode, TKey, TValue>

          where TNode : IBinaryTreeNode<TNode, TKey, TValue>, new()

          where TKey : IComparable<TKey>
    typeParameters:
    - id: TNode
      description: 'Type of the nodes in the tree. '
    - id: TKey
      description: 'Type of the keys stored in the tree nodes. '
    - id: TValue
      description: 'Type of the values stored in the tree nodes. '
    content.vb: Public MustInherit Class BinarySearchTreeBase(Of TNode As {IBinaryTreeNode(Of TNode, TKey, TValue), New}, TKey As IComparable(Of TKey), TValue)
  inheritance:
  - System.Object
  derivedClasses:
  - CSFundamentals.DataStructures.Trees.Binary.AVLTree`2
  - CSFundamentals.DataStructures.Trees.Binary.BinarySearchTreeBase`2
  - CSFundamentals.DataStructures.Trees.Binary.RedBlackTree`2
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue)
  name.vb: BinarySearchTreeBase(Of TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root
  commentId: P:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root
  id: _root
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: _root
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>._root
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>._root
  type: Property
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: _root
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 42
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nIs the root of the binary search tree.\n"
  example: []
  syntax:
    content: protected TNode _root { get; set; }
    parameters: []
    return:
      type: '{TNode}'
    content.vb: Protected Property _root As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue)._root
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue)._root
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}})
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}})
  id: Build(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`1,`2}})
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: Build(List<KeyValuePair<TKey, TValue>>)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Build(List<KeyValuePair<TKey, TValue>>)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Build(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Build
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 49
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nBuilds the tree to include the given nodes.\n"
  example: []
  syntax:
    content: public abstract TNode Build(List<KeyValuePair<TKey, TValue>> keyValues)
    parameters:
    - id: keyValues
      type: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: Is a list of key-value pairs to be inserted in the tree.
    return:
      type: '{TNode}'
      description: Root of the tree.
    content.vb: Public MustOverride Function Build(keyValues As List(Of KeyValuePair(Of TKey, TValue))) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Build(List(Of KeyValuePair(Of TKey, TValue)))
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Build(System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: Build(List(Of KeyValuePair(Of TKey, TValue)))
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert(`0,`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert(`0,`0)
  id: Insert(`0,`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: Insert(TNode, TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Insert(TNode, TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Insert(TNode, TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Insert
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 57
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nInserts a new node in the tree\n"
  example: []
  syntax:
    content: public abstract TNode Insert(TNode root, TNode newNode)
    parameters:
    - id: root
      type: '{TNode}'
      description: Current root of the tree, or the node at which insert operation should be started.
    - id: newNode
      type: '{TNode}'
      description: 'New node to be inserted in the tree. '
    return:
      type: '{TNode}'
      description: New root of the tree (might or might not change during operation).
    content.vb: Public MustOverride Function Insert(root As TNode, newNode As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Insert(TNode, TNode)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Insert(TNode, TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete(`0,`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete(`0,`1)
  id: Delete(`0,`1)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: Delete(TNode, TKey)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Delete(TNode, TKey)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Delete(TNode, TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Delete
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 65
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nDeletes a node with the given key from th tree.\n"
  example: []
  syntax:
    content: public abstract TNode Delete(TNode root, TKey key)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'Current root of the tree, or the node at which delete operation should be started. '
    - id: key
      type: '{TKey}'
      description: 'Specifies the key of the node to be deleted. '
    return:
      type: '{TNode}'
      description: New root of the tree (might or might not change during the operation).
    content.vb: Public MustOverride Function Delete(root As TNode, key As TKey) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Delete(TNode, TKey)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Delete(TNode, TKey)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search(`0,`1)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search(`0,`1)
  id: Search(`0,`1)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: Search(TNode, TKey)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Search(TNode, TKey)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Search(TNode, TKey)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Search
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 73
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nSearches for the given key in the tree. \n"
  example: []
  syntax:
    content: public abstract TNode Search(TNode root, TKey key)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'Current root of the tree, or the node at which search operation should be started. '
    - id: key
      type: '{TKey}'
      description: 'Specifies the key to be searched. '
    return:
      type: '{TNode}'
      description: 'Returns the tree node that contains key. '
    content.vb: Public MustOverride Function Search(root As TNode, key As TKey) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Search(TNode, TKey)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Search(TNode, TKey)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update(`0,`1,`2)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update(`0,`1,`2)
  id: Update(`0,`1,`2)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: Update(TNode, TKey, TValue)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Update(TNode, TKey, TValue)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Update(TNode, TKey, TValue)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: Update
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 82
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nUpdates the tree node of the specified key with the new given value. \n"
  example: []
  syntax:
    content: public abstract bool Update(TNode root, TKey key, TValue value)
    parameters:
    - id: root
      type: '{TNode}'
      description: Current root of the tree, or the node at which update operation should be started.
    - id: key
      type: '{TKey}'
      description: Specifies the key of the node whose value should be updated.
    - id: value
      type: '{TValue}'
      description: 'Specifies the new value. '
    return:
      type: System.Boolean
      description: true in case of success and false otherwise.
    content.vb: Public MustOverride Function Update(root As TNode, key As TKey, value As TValue) As Boolean
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Update(TNode, TKey, TValue)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Update(TNode, TKey, TValue)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin(`0)
  id: FindMin(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: FindMin(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.FindMin(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.FindMin(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: FindMin
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 89
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nFinds the minimum key in the (sub)tree rooted at <code data-dev-comment-type=\"paramref\" class=\"paramref\">root</code> node. \n"
  example: []
  syntax:
    content: public abstract TNode FindMin(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'Is the node at which (sub)tree is rooted. '
    return:
      type: '{TNode}'
      description: 'The node containing the minimum key. '
    content.vb: Public MustOverride Function FindMin(root As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).FindMin(TNode)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).FindMin(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax(`0)
  id: FindMax(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: FindMax(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.FindMax(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.FindMax(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: FindMax
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 96
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nFinds the maximum key in the (sub)tree rooted at <code data-dev-comment-type=\"paramref\" class=\"paramref\">root</code> node. \n"
  example: []
  syntax:
    content: public abstract TNode FindMax(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'Is the node at which (sub)tree is rooted. '
    return:
      type: '{TNode}'
      description: 'The node containing the maximum key. '
    content.vb: Public MustOverride Function FindMax(root As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).FindMax(TNode)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).FindMax(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft(`0)
  id: RotateLeft(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: RotateLeft(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.RotateLeft(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.RotateLeft(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RotateLeft
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 297
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nRotates the tree to left at the given node, meaning that the current right child of the given node will be its new parent.\nAlso notice that in rotation, keys or values of a node never change, only the relations change.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Average, "O(1)")]

      public TNode RotateLeft(TNode node)
    parameters:
    - id: node
      type: '{TNode}'
      description: Is the node at which rotation happens.
    return:
      type: '{TNode}'
    content.vb: >-
      <TimeComplexity( Case.Average, "O(1)")>

      Public Function RotateLeft(node As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).RotateLeft(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).RotateLeft(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight(`0)
  id: RotateRight(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: RotateRight(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.RotateRight(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.RotateRight(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: RotateRight
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 344
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nRotates the tree to right at the given node. Meaning that the current left child of the given node will be its new parent.\nAlso notice that in rotation, keys or values of a node never change, only the relations change.\n"
  example: []
  syntax:
    content: >-
      [TimeComplexity(Case.Average, "O(1)")]

      public TNode RotateRight(TNode node)
    parameters:
    - id: node
      type: '{TNode}'
      description: Is the node at which rotation happens.
    return:
      type: '{TNode}'
    content.vb: >-
      <TimeComplexity( Case.Average, "O(1)")>

      Public Function RotateRight(node As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight*
  attributes:
  - type: CSFundamentals.Decoration.TimeComplexityAttribute
    ctor: CSFundamentals.Decoration.TimeComplexityAttribute.#ctor(CSFundamentals.Decoration.Case,System.String)
    arguments:
    - type: CSFundamentals.Decoration.Case
      value: 0
    - type: System.String
      value: O(1)
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).RotateRight(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).RotateRight(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin(`0)
  id: DeleteMin(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: DeleteMin(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMin(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMin(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DeleteMin
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 390
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nDeletes the minimum key from the tree. \n"
  example: []
  syntax:
    content: public TNode DeleteMin(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'The node at which the tree is rooted. '
    return:
      type: '{TNode}'
      description: The root of the tree.
    content.vb: Public Function DeleteMin(root As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMin(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMin(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax(`0)
  id: DeleteMax(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: DeleteMax(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMax(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMax(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: DeleteMax
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 401
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nDeletes the maximum key from the tree. \n"
  example: []
  syntax:
    content: public TNode DeleteMax(TNode root)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'The node at which the tree is rooted. '
    return:
      type: '{TNode}'
      description: 'The root of the tree. '
    content.vb: Public Function DeleteMax(root As TNode) As TNode
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMax(TNode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMax(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves(`0)
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves(`0)
  id: GetAllPathToLeaves(`0)
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: GetAllPathToLeaves(TNode)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.GetAllPathToLeaves(TNode)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.GetAllPathToLeaves(TNode)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: GetAllPathToLeaves
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 412
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nComputes all the paths from the given node to all of its leaves. A node is a leaf if it has no children.\n"
  example: []
  syntax:
    content: public virtual List<List<TNode>> GetAllPathToLeaves(TNode startNode)
    parameters:
    - id: startNode
      type: '{TNode}'
      description: Is the node at which computing all routes/paths to leaf nodes starts.
    return:
      type: System.Collections.Generic.List{System.Collections.Generic.List{{TNode}}}
      description: List of all the paths.
    content.vb: Public Overridable Function GetAllPathToLeaves(startNode As TNode) As List(Of List(Of TNode))
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).GetAllPathToLeaves(TNode)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).GetAllPathToLeaves(TNode)
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal(`0,System.Collections.Generic.List{`0})
  commentId: M:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal(`0,System.Collections.Generic.List{`0})
  id: InOrderTraversal(`0,System.Collections.Generic.List{`0})
  parent: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3
  langs:
  - csharp
  - vb
  name: InOrderTraversal(TNode, List<TNode>)
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.InOrderTraversal(TNode, List<TNode>)
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.InOrderTraversal(TNode, System.Collections.Generic.List<TNode>)
  type: Method
  source:
    remote:
      path: Source/DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
      branch: dev/pijei/AddingDocFx
      repo: https://github.com/PiJei/CSFundamentalAlgorithms.git
    id: InOrderTraversal
    path: ../DataStructures/Trees/Binary/API/BinarySearchTreeBase.cs
    startLine: 449
  assemblies:
  - CSFundamentals
  namespace: CSFundamentals.DataStructures.Trees.Binary.API
  summary: "\nTraverses tree in order, and since this is a binary search tree, in order traversal returns a sorted list of keys.\n"
  example: []
  syntax:
    content: public void InOrderTraversal(TNode root, List<TNode> inOrderSetOfNodes)
    parameters:
    - id: root
      type: '{TNode}'
      description: 'Is the node at which in order traversal starts. '
    - id: inOrderSetOfNodes
      type: System.Collections.Generic.List{{TNode}}
      description: Is the sorted list of nodes.
    content.vb: Public Sub InOrderTraversal(root As TNode, inOrderSetOfNodes As List(Of TNode))
  overload: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal*
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).InOrderTraversal(TNode, List(Of TNode))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).InOrderTraversal(TNode, System.Collections.Generic.List(Of TNode))
  name.vb: InOrderTraversal(TNode, List(Of TNode))
references:
- uid: CSFundamentals.DataStructures.Trees.Binary.API
  commentId: N:CSFundamentals.DataStructures.Trees.Binary.API
  name: CSFundamentals.DataStructures.Trees.Binary.API
  nameWithType: CSFundamentals.DataStructures.Trees.Binary.API
  fullName: CSFundamentals.DataStructures.Trees.Binary.API
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3._root
  name: _root
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>._root
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>._root
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue)._root
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue)._root
- uid: '{TNode}'
  commentId: '!:TNode'
  definition: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: TNode
  name: TNode
  nameWithType: TNode
  fullName: TNode
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Build
  name: Build
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Build
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Build
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Build
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Build
- uid: System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<KeyValuePair<TKey, TValue>>
  nameWithType: List<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: List(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: List(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Insert
  name: Insert
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Insert
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Insert
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Insert
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Insert
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Delete
  name: Delete
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Delete
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Delete
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Delete
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Delete
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Search
  name: Search
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Search
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Search
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Search
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Search
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.Update
  name: Update
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.Update
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.Update
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).Update
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).Update
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMin
  name: FindMin
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.FindMin
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.FindMin
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).FindMin
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).FindMin
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.FindMax
  name: FindMax
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.FindMax
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.FindMax
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).FindMax
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).FindMax
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateLeft
  name: RotateLeft
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.RotateLeft
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.RotateLeft
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).RotateLeft
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).RotateLeft
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.RotateRight
  name: RotateRight
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.RotateRight
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.RotateRight
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).RotateRight
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).RotateRight
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMin
  name: DeleteMin
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMin
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMin
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMin
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMin
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.DeleteMax
  name: DeleteMax
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMax
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.DeleteMax
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMax
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).DeleteMax
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.GetAllPathToLeaves
  name: GetAllPathToLeaves
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.GetAllPathToLeaves
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.GetAllPathToLeaves
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).GetAllPathToLeaves
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).GetAllPathToLeaves
- uid: System.Collections.Generic.List{System.Collections.Generic.List{{TNode}}}
  commentId: T:System.Collections.Generic.List{System.Collections.Generic.List{`0}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<List<TNode>>
  nameWithType: List<List<TNode>>
  fullName: System.Collections.Generic.List<System.Collections.Generic.List<TNode>>
  nameWithType.vb: List(Of List(Of TNode))
  fullName.vb: System.Collections.Generic.List(Of System.Collections.Generic.List(Of TNode))
  name.vb: List(Of List(Of TNode))
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal*
  commentId: Overload:CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase`3.InOrderTraversal
  name: InOrderTraversal
  nameWithType: BinarySearchTreeBase<TNode, TKey, TValue>.InOrderTraversal
  fullName: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase<TNode, TKey, TValue>.InOrderTraversal
  nameWithType.vb: BinarySearchTreeBase(Of TNode, TKey, TValue).InOrderTraversal
  fullName.vb: CSFundamentals.DataStructures.Trees.Binary.API.BinarySearchTreeBase(Of TNode, TKey, TValue).InOrderTraversal
- uid: System.Collections.Generic.List{{TNode}}
  commentId: T:System.Collections.Generic.List{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TNode>
  nameWithType: List<TNode>
  fullName: System.Collections.Generic.List<TNode>
  nameWithType.vb: List(Of TNode)
  fullName.vb: System.Collections.Generic.List(Of TNode)
  name.vb: List(Of TNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TNode
    nameWithType: TNode
    fullName: TNode
  - name: )
    nameWithType: )
    fullName: )
